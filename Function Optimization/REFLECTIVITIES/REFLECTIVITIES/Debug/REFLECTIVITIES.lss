
REFLECTIVITIES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000660  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecb  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000529  00000000  00000000  0000224d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030d  00000000  00000000  00002eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000031fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
   6:	00 00       	nop
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c1       	rjmp	.+708    	; 0x2d2 <__vector_3>
   e:	00 00       	nop
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c1       	rjmp	.+810    	; 0x348 <__vector_7>
  1e:	00 00       	nop
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
  26:	00 00       	nop
  28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
  36:	00 00       	nop
  38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
  42:	00 00       	nop
  44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
  46:	00 00       	nop
  48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
  52:	00 00       	nop
  54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
  56:	00 00       	nop
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
  66:	00 00       	nop
  68:	27 c0       	rjmp	.+78     	; 0xb8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	25 c0       	rjmp	.+74     	; 0xb8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	23 c0       	rjmp	.+70     	; 0xb8 <__bad_interrupt>
  72:	00 00       	nop
  74:	3d c1       	rjmp	.+634    	; 0x2f0 <__vector_29>
  76:	00 00       	nop
  78:	1f c0       	rjmp	.+62     	; 0xb8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1d c0       	rjmp	.+58     	; 0xb8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1b c0       	rjmp	.+54     	; 0xb8 <__bad_interrupt>
  82:	00 00       	nop
  84:	19 c0       	rjmp	.+50     	; 0xb8 <__bad_interrupt>
  86:	00 00       	nop
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	13 c0       	rjmp	.+38     	; 0xb8 <__bad_interrupt>
  92:	00 00       	nop
  94:	11 c0       	rjmp	.+34     	; 0xb8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a6 30       	cpi	r26, 0x06	; 6
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	89 d0       	rcall	.+274    	; 0x1c8 <main>
  b6:	98 c2       	rjmp	.+1328   	; 0x5e8 <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <setupPWM>:
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
  ba:	bc 01       	movw	r22, r24
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 68       	ori	r24, 0x83	; 131
  c0:	84 bd       	out	0x24, r24	; 36
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	07 2e       	mov	r0, r23
  ca:	00 0c       	add	r0, r0
  cc:	88 0b       	sbc	r24, r24
  ce:	99 0b       	sbc	r25, r25
  d0:	9c d1       	rcall	.+824    	; 0x40a <__floatsisf>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	33 e3       	ldi	r19, 0x33	; 51
  d6:	43 e2       	ldi	r20, 0x23	; 35
  d8:	50 e4       	ldi	r21, 0x40	; 64
  da:	fb d1       	rcall	.+1014   	; 0x4d2 <__mulsf3>
  dc:	68 d1       	rcall	.+720    	; 0x3ae <__fixunssfsi>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <setupISR>:
  e8:	8d b3       	in	r24, 0x1d	; 29
  ea:	84 64       	ori	r24, 0x44	; 68
  ec:	8d bb       	out	0x1d, r24	; 29
  ee:	e9 e6       	ldi	r30, 0x69	; 105
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 63       	ori	r24, 0x30	; 48
  f6:	80 83       	st	Z, r24
  f8:	ea e6       	ldi	r30, 0x6A	; 106
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <setupADC>:
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8d 68       	ori	r24, 0x8D	; 141
 10c:	80 83       	st	Z, r24
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 64       	ori	r24, 0x41	; 65
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	81 7e       	andi	r24, 0xE1	; 225
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <motorControl>:
 120:	26 2f       	mov	r18, r22
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 128:	43 70       	andi	r20, 0x03	; 3
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	42 17       	cp	r20, r18
 12e:	53 07       	cpc	r21, r19
 130:	81 f0       	breq	.+32     	; 0x152 <motorControl+0x32>
 132:	45 b1       	in	r20, 0x05	; 5
 134:	40 7f       	andi	r20, 0xF0	; 240
 136:	45 b9       	out	0x05, r20	; 5
 138:	45 b1       	in	r20, 0x05	; 5
 13a:	20 95       	com	r18
 13c:	30 95       	com	r19
 13e:	23 70       	andi	r18, 0x03	; 3
 140:	33 27       	eor	r19, r19
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	24 2b       	or	r18, r20
 14c:	25 b9       	out	0x05, r18	; 5
 14e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 152:	bc 01       	movw	r22, r24
 154:	99 0f       	add	r25, r25
 156:	88 0b       	sbc	r24, r24
 158:	99 0b       	sbc	r25, r25
 15a:	57 d1       	rcall	.+686    	; 0x40a <__floatsisf>
 15c:	23 e3       	ldi	r18, 0x33	; 51
 15e:	33 e3       	ldi	r19, 0x33	; 51
 160:	43 e2       	ldi	r20, 0x23	; 35
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	b6 d1       	rcall	.+876    	; 0x4d2 <__mulsf3>
 166:	23 d1       	rcall	.+582    	; 0x3ae <__fixunssfsi>
 168:	67 bd       	out	0x27, r22	; 39
 16a:	08 95       	ret

0000016c <initTimer1>:
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	88 ee       	ldi	r24, 0xE8	; 232
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 18a:	08 95       	ret

0000018c <mTimer2>:
	return;
} //mTimer
void mTimer2(int count){
 18c:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 18e:	e1 eb       	ldi	r30, 0xB1	; 177
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	93 60       	ori	r25, 0x03	; 3
 196:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
 198:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 19c:	b8 99       	sbic	0x17, 0	; 23
 19e:	b8 9a       	sbi	0x17, 0	; 23
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
	return;
} //mTimer
void mTimer2(int count){
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 1a6:	b8 9b       	sbis	0x17, 0	; 23
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 1aa:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 1b0:	24 17       	cp	r18, r20
 1b2:	35 07       	cpc	r19, r21
 1b4:	1c f4       	brge	.+6      	; 0x1bc <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 1b6:	b8 9b       	sbis	0x17, 0	; 23
 1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <mTimer2+0x1a>
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 1bc:	e1 eb       	ldi	r30, 0xB1	; 177
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 7f       	andi	r24, 0xF8	; 248
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <main>:
volatile unsigned char ADC_RESET;
volatile unsigned char OPT2FLAG;

/*Beginning of main program*/
int main(void){
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 1c8:	e1 e6       	ldi	r30, 0x61	; 97
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	80 83       	st	Z, r24
	CLKPR = 0;
 1d0:	10 82       	st	Z, r1
	uint16_t oldADCResult=0x03FF;
	cli(); //disable all interrupts
 1d2:	f8 94       	cli
	initTimer1();
 1d4:	cb df       	rcall	.-106    	; 0x16c <initTimer1>
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
 1d8:	90 e0       	ldi	r25, 0x00	; 0
	setupISR(); //interrupt initializations
 1da:	6f df       	rcall	.-290    	; 0xba <setupPWM>
 1dc:	85 df       	rcall	.-246    	; 0xe8 <setupISR>
	setupADC(); //ADC initializations
 1de:	92 df       	rcall	.-220    	; 0x104 <setupADC>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 1e2:	84 b9       	out	0x04, r24	; 4
 1e4:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xFF; //LEDs Debugging
 1e6:	80 ef       	ldi	r24, 0xF0	; 240
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 1e8:	8a b9       	out	0x0a, r24	; 10
 1ea:	10 ba       	out	0x10, r1	; 16
	DDRF = 0x00; /*PF1=ADC1 pin*/
 1ec:	78 94       	sei
	sei(); //enable all interrupts
 1ee:	85 b1       	in	r24, 0x05	; 5
	PORTB &= 0b11110000; //apply brake to Vcc
 1f0:	80 7f       	andi	r24, 0xF0	; 240
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	8a ea       	ldi	r24, 0xAA	; 170
	PORTC=0b10101010;
 1f6:	88 b9       	out	0x08, r24	; 8
	mTimer2(2000);
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	c7 df       	rcall	.-114    	; 0x18c <mTimer2>
	PORTC=0b00000000;
 1fe:	18 b8       	out	0x08, r1	; 8
	mTimer2(2000);
 200:	80 ed       	ldi	r24, 0xD0	; 208
 202:	97 e0       	ldi	r25, 0x07	; 7
 204:	c3 df       	rcall	.-122    	; 0x18c <mTimer2>
	motorControl(40,DC_FORWARD); //start conveyor towards stepper
 206:	62 e0       	ldi	r22, 0x02	; 2
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	89 df       	rcall	.-238    	; 0x120 <motorControl>
 20e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ADC_RESET>
	ADC_RESET=0;
 212:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OPT2FLAG>
	OPT2FLAG=0;
 216:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADCResultFlag>
	ADCResultFlag=0;
 21a:	8f ef       	ldi	r24, 0xFF	; 255

/*Beginning of main program*/
int main(void){
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
	CLKPR = 0;
	uint16_t oldADCResult=0x03FF;
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	ca e7       	ldi	r28, 0x7A	; 122
				mTimer2(20001);
				PORTC=0x00;
				PORTD&=0x0F;
			}
			ADCResultFlag=0x00;
			ADCSRA |= _BV(ADSC);	
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	0f ef       	ldi	r16, 0xFF	; 255
				PORTC=(oldADCResult & 0x00FF); //bits 7:0
				PORTD=((oldADCResult & 0x0100) >> 3); //D2=GREEN when set (8th bit of ADC value)
				PORTD|=((oldADCResult & 0x0200) >> 2); //D5=RED when set (9th bit of ADC value)
;
			} else if (ADCResult>(oldADCResult+50)){
				oldADCResult=0xFFFF;
 224:	1f ef       	ldi	r17, 0xFF	; 255
 226:	e0 2e       	mov	r14, r16
 228:	f1 2e       	mov	r15, r17
 22a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ADCResultFlag>
	ADC_RESET=0;
	OPT2FLAG=0;
	ADCResultFlag=0;

	while (1){
		if (ADCResultFlag){
 22e:	22 23       	and	r18, r18
 230:	c9 f1       	breq	.+114    	; 0x2a4 <main+0xdc>
 232:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>
			if (ADCResult<(oldADCResult)){
 236:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 23a:	28 17       	cp	r18, r24
 23c:	39 07       	cpc	r19, r25
 23e:	d0 f4       	brcc	.+52     	; 0x274 <main+0xac>
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCResult>
				oldADCResult=ADCResult;
 244:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCResult+0x1>
 248:	88 b9       	out	0x08, r24	; 8
				PORTC=(oldADCResult & 0x00FF); //bits 7:0
 24a:	9c 01       	movw	r18, r24
				PORTD=((oldADCResult & 0x0100) >> 3); //D2=GREEN when set (8th bit of ADC value)
 24c:	22 27       	eor	r18, r18
 24e:	31 70       	andi	r19, 0x01	; 1
 250:	36 95       	lsr	r19
 252:	27 95       	ror	r18
 254:	36 95       	lsr	r19
 256:	27 95       	ror	r18
 258:	36 95       	lsr	r19
 25a:	27 95       	ror	r18
 25c:	2b b9       	out	0x0b, r18	; 11
 25e:	4b b1       	in	r20, 0x0b	; 11
				PORTD|=((oldADCResult & 0x0200) >> 2); //D5=RED when set (9th bit of ADC value)
 260:	9c 01       	movw	r18, r24
 262:	22 27       	eor	r18, r18
 264:	32 70       	andi	r19, 0x02	; 2
 266:	36 95       	lsr	r19
 268:	27 95       	ror	r18
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	24 2b       	or	r18, r20
 270:	2b b9       	out	0x0b, r18	; 11
 272:	13 c0       	rjmp	.+38     	; 0x29a <main+0xd2>
 274:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>
;
			} else if (ADCResult>(oldADCResult+50)){
 278:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 27c:	ac 01       	movw	r20, r24
 27e:	4e 5c       	subi	r20, 0xCE	; 206
 280:	5f 4f       	sbci	r21, 0xFF	; 255
 282:	42 17       	cp	r20, r18
 284:	53 07       	cpc	r21, r19
 286:	48 f4       	brcc	.+18     	; 0x29a <main+0xd2>
				oldADCResult=0xFFFF;
				mTimer2(20001);
 288:	81 e2       	ldi	r24, 0x21	; 33
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	7f df       	rcall	.-258    	; 0x18c <mTimer2>
 28e:	18 b8       	out	0x08, r1	; 8
				PORTC=0x00;
 290:	8b b1       	in	r24, 0x0b	; 11
				PORTD&=0x0F;
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	8b b9       	out	0x0b, r24	; 11
 296:	8e 2d       	mov	r24, r14
				PORTC=(oldADCResult & 0x00FF); //bits 7:0
				PORTD=((oldADCResult & 0x0100) >> 3); //D2=GREEN when set (8th bit of ADC value)
				PORTD|=((oldADCResult & 0x0200) >> 2); //D5=RED when set (9th bit of ADC value)
;
			} else if (ADCResult>(oldADCResult+50)){
				oldADCResult=0xFFFF;
 298:	9f 2d       	mov	r25, r15
 29a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADCResultFlag>
				mTimer2(20001);
				PORTC=0x00;
				PORTD&=0x0F;
			}
			ADCResultFlag=0x00;
 29e:	28 81       	ld	r18, Y
			ADCSRA |= _BV(ADSC);	
 2a0:	20 64       	ori	r18, 0x40	; 64
 2a2:	28 83       	st	Y, r18
 2a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <OPT2FLAG>
			PORTD = 0b10010000; //D5=Red; D2=Red
			mTimer(1000);	
			PORTD = 0b01100000; //D5=Green; D2=Green
			mTimer(1000);*/
		}
		if (OPT2FLAG){
 2a8:	22 23       	and	r18, r18
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <main+0xee>
 2ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OPT2FLAG>
			OPT2FLAG=0x00;
 2b0:	28 81       	ld	r18, Y
			ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
 2b2:	20 64       	ori	r18, 0x40	; 64
 2b4:	28 83       	st	Y, r18
 2b6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ADC_RESET>
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
 2ba:	22 23       	and	r18, r18
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0xf8>
 2be:	b5 cf       	rjmp	.-150    	; 0x22a <main+0x62>
 2c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ADC_RESET>
			oldADCResult=0xFFFF;
			ADC_RESET=0x00;
 2c4:	18 b8       	out	0x08, r1	; 8
			PORTC=0x00;
 2c6:	8b b1       	in	r24, 0x0b	; 11
			PORTD&=0x0F;
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	80 2f       	mov	r24, r16
			OPT2FLAG=0x00;
			ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
			oldADCResult=0xFFFF;
 2ce:	91 2f       	mov	r25, r17
 2d0:	ac cf       	rjmp	.-168    	; 0x22a <main+0x62>

000002d2 <__vector_3>:
 2d2:	1f 92       	push	r1
	}
	TCCR2B&=0b11111000; //disable timer 2
}
/**********INTERRUPT SERVICE ROUTINES**********/
/*sensor 3: 2nt Optical Reflective, Active HIGH starts AD conversion*/
ISR(INT2_vect){ //unused --ODA
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	OPT2FLAG=0x01;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OPT2FLAG>
}
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_29>:
ISR(ADC_vect){ //ADCResult is left-adjusted (i.e. the upper most byte is taken; 2 LSB' are discarded)
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
	ADCResult = ADCL;
 302:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCResult+0x1>
 30c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResult>
	ADCResult += ADCH << 8;
 310:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 314:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>
 318:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 31c:	89 2f       	mov	r24, r25
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	98 2f       	mov	r25, r24
 322:	88 27       	eor	r24, r24
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCResult+0x1>
 32c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResult>
	ADCResultFlag = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCResultFlag>
}
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__vector_7>:
ISR(INT6_vect){
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	0b b6       	in	r0, 0x3b	; 59
 354:	0f 92       	push	r0
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	ADC_RESET=1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADC_RESET>
	mTimer2(25); //debounce period
 374:	89 e1       	ldi	r24, 0x19	; 25
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	09 df       	rcall	.-494    	; 0x18c <mTimer2>
	while((PINE & 0b01000000)==0b01000000)mTimer2(25); //while switch is still pressed
 37a:	66 9b       	sbis	0x0c, 6	; 12
 37c:	05 c0       	rjmp	.+10     	; 0x388 <__vector_7+0x40>
 37e:	89 e1       	ldi	r24, 0x19	; 25
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	04 df       	rcall	.-504    	; 0x18c <mTimer2>
 384:	66 99       	sbic	0x0c, 6	; 12
 386:	fb cf       	rjmp	.-10     	; 0x37e <__vector_7+0x36>
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0b be       	out	0x3b, r0	; 59
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__fixunssfsi>:
 3ae:	70 d0       	rcall	.+224    	; 0x490 <__fp_splitA>
 3b0:	88 f0       	brcs	.+34     	; 0x3d4 <__fixunssfsi+0x26>
 3b2:	9f 57       	subi	r25, 0x7F	; 127
 3b4:	90 f0       	brcs	.+36     	; 0x3da <__fixunssfsi+0x2c>
 3b6:	b9 2f       	mov	r27, r25
 3b8:	99 27       	eor	r25, r25
 3ba:	b7 51       	subi	r27, 0x17	; 23
 3bc:	a0 f0       	brcs	.+40     	; 0x3e6 <__fixunssfsi+0x38>
 3be:	d1 f0       	breq	.+52     	; 0x3f4 <__fixunssfsi+0x46>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	1a f0       	brmi	.+6      	; 0x3d0 <__fixunssfsi+0x22>
 3ca:	ba 95       	dec	r27
 3cc:	c9 f7       	brne	.-14     	; 0x3c0 <__fixunssfsi+0x12>
 3ce:	12 c0       	rjmp	.+36     	; 0x3f4 <__fixunssfsi+0x46>
 3d0:	b1 30       	cpi	r27, 0x01	; 1
 3d2:	81 f0       	breq	.+32     	; 0x3f4 <__fixunssfsi+0x46>
 3d4:	77 d0       	rcall	.+238    	; 0x4c4 <__fp_zero>
 3d6:	b1 e0       	ldi	r27, 0x01	; 1
 3d8:	08 95       	ret
 3da:	74 c0       	rjmp	.+232    	; 0x4c4 <__fp_zero>
 3dc:	67 2f       	mov	r22, r23
 3de:	78 2f       	mov	r23, r24
 3e0:	88 27       	eor	r24, r24
 3e2:	b8 5f       	subi	r27, 0xF8	; 248
 3e4:	39 f0       	breq	.+14     	; 0x3f4 <__fixunssfsi+0x46>
 3e6:	b9 3f       	cpi	r27, 0xF9	; 249
 3e8:	cc f3       	brlt	.-14     	; 0x3dc <__fixunssfsi+0x2e>
 3ea:	86 95       	lsr	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b3 95       	inc	r27
 3f2:	d9 f7       	brne	.-10     	; 0x3ea <__fixunssfsi+0x3c>
 3f4:	3e f4       	brtc	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f6:	90 95       	com	r25
 3f8:	80 95       	com	r24
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	08 95       	ret

00000406 <__floatunsisf>:
 406:	e8 94       	clt
 408:	09 c0       	rjmp	.+18     	; 0x41c <__floatsisf+0x12>

0000040a <__floatsisf>:
 40a:	97 fb       	bst	r25, 7
 40c:	3e f4       	brtc	.+14     	; 0x41c <__floatsisf+0x12>
 40e:	90 95       	com	r25
 410:	80 95       	com	r24
 412:	70 95       	com	r23
 414:	61 95       	neg	r22
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	8f 4f       	sbci	r24, 0xFF	; 255
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	99 23       	and	r25, r25
 41e:	a9 f0       	breq	.+42     	; 0x44a <__floatsisf+0x40>
 420:	f9 2f       	mov	r31, r25
 422:	96 e9       	ldi	r25, 0x96	; 150
 424:	bb 27       	eor	r27, r27
 426:	93 95       	inc	r25
 428:	f6 95       	lsr	r31
 42a:	87 95       	ror	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b7 95       	ror	r27
 432:	f1 11       	cpse	r31, r1
 434:	f8 cf       	rjmp	.-16     	; 0x426 <__floatsisf+0x1c>
 436:	fa f4       	brpl	.+62     	; 0x476 <__floatsisf+0x6c>
 438:	bb 0f       	add	r27, r27
 43a:	11 f4       	brne	.+4      	; 0x440 <__floatsisf+0x36>
 43c:	60 ff       	sbrs	r22, 0
 43e:	1b c0       	rjmp	.+54     	; 0x476 <__floatsisf+0x6c>
 440:	6f 5f       	subi	r22, 0xFF	; 255
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	16 c0       	rjmp	.+44     	; 0x476 <__floatsisf+0x6c>
 44a:	88 23       	and	r24, r24
 44c:	11 f0       	breq	.+4      	; 0x452 <__floatsisf+0x48>
 44e:	96 e9       	ldi	r25, 0x96	; 150
 450:	11 c0       	rjmp	.+34     	; 0x474 <__floatsisf+0x6a>
 452:	77 23       	and	r23, r23
 454:	21 f0       	breq	.+8      	; 0x45e <__floatsisf+0x54>
 456:	9e e8       	ldi	r25, 0x8E	; 142
 458:	87 2f       	mov	r24, r23
 45a:	76 2f       	mov	r23, r22
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__floatsisf+0x5e>
 45e:	66 23       	and	r22, r22
 460:	71 f0       	breq	.+28     	; 0x47e <__floatsisf+0x74>
 462:	96 e8       	ldi	r25, 0x86	; 134
 464:	86 2f       	mov	r24, r22
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	2a f0       	brmi	.+10     	; 0x476 <__floatsisf+0x6c>
 46c:	9a 95       	dec	r25
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	da f7       	brpl	.-10     	; 0x46c <__floatsisf+0x62>
 476:	88 0f       	add	r24, r24
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	97 f9       	bld	r25, 7
 47e:	08 95       	ret

00000480 <__fp_split3>:
 480:	57 fd       	sbrc	r21, 7
 482:	90 58       	subi	r25, 0x80	; 128
 484:	44 0f       	add	r20, r20
 486:	55 1f       	adc	r21, r21
 488:	59 f0       	breq	.+22     	; 0x4a0 <__fp_splitA+0x10>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	71 f0       	breq	.+28     	; 0x4aa <__fp_splitA+0x1a>
 48e:	47 95       	ror	r20

00000490 <__fp_splitA>:
 490:	88 0f       	add	r24, r24
 492:	97 fb       	bst	r25, 7
 494:	99 1f       	adc	r25, r25
 496:	61 f0       	breq	.+24     	; 0x4b0 <__fp_splitA+0x20>
 498:	9f 3f       	cpi	r25, 0xFF	; 255
 49a:	79 f0       	breq	.+30     	; 0x4ba <__fp_splitA+0x2a>
 49c:	87 95       	ror	r24
 49e:	08 95       	ret
 4a0:	12 16       	cp	r1, r18
 4a2:	13 06       	cpc	r1, r19
 4a4:	14 06       	cpc	r1, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	f2 cf       	rjmp	.-28     	; 0x48e <__fp_split3+0xe>
 4aa:	46 95       	lsr	r20
 4ac:	f1 df       	rcall	.-30     	; 0x490 <__fp_splitA>
 4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <__fp_splitA+0x30>
 4b0:	16 16       	cp	r1, r22
 4b2:	17 06       	cpc	r1, r23
 4b4:	18 06       	cpc	r1, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	f1 cf       	rjmp	.-30     	; 0x49c <__fp_splitA+0xc>
 4ba:	86 95       	lsr	r24
 4bc:	71 05       	cpc	r23, r1
 4be:	61 05       	cpc	r22, r1
 4c0:	08 94       	sec
 4c2:	08 95       	ret

000004c4 <__fp_zero>:
 4c4:	e8 94       	clt

000004c6 <__fp_szero>:
 4c6:	bb 27       	eor	r27, r27
 4c8:	66 27       	eor	r22, r22
 4ca:	77 27       	eor	r23, r23
 4cc:	cb 01       	movw	r24, r22
 4ce:	97 f9       	bld	r25, 7
 4d0:	08 95       	ret

000004d2 <__mulsf3>:
 4d2:	0b d0       	rcall	.+22     	; 0x4ea <__mulsf3x>
 4d4:	78 c0       	rjmp	.+240    	; 0x5c6 <__fp_round>
 4d6:	69 d0       	rcall	.+210    	; 0x5aa <__fp_pscA>
 4d8:	28 f0       	brcs	.+10     	; 0x4e4 <__mulsf3+0x12>
 4da:	6e d0       	rcall	.+220    	; 0x5b8 <__fp_pscB>
 4dc:	18 f0       	brcs	.+6      	; 0x4e4 <__mulsf3+0x12>
 4de:	95 23       	and	r25, r21
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__mulsf3+0x12>
 4e2:	5a c0       	rjmp	.+180    	; 0x598 <__fp_inf>
 4e4:	5f c0       	rjmp	.+190    	; 0x5a4 <__fp_nan>
 4e6:	11 24       	eor	r1, r1
 4e8:	ee cf       	rjmp	.-36     	; 0x4c6 <__fp_szero>

000004ea <__mulsf3x>:
 4ea:	ca df       	rcall	.-108    	; 0x480 <__fp_split3>
 4ec:	a0 f3       	brcs	.-24     	; 0x4d6 <__mulsf3+0x4>

000004ee <__mulsf3_pse>:
 4ee:	95 9f       	mul	r25, r21
 4f0:	d1 f3       	breq	.-12     	; 0x4e6 <__mulsf3+0x14>
 4f2:	95 0f       	add	r25, r21
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	55 1f       	adc	r21, r21
 4f8:	62 9f       	mul	r22, r18
 4fa:	f0 01       	movw	r30, r0
 4fc:	72 9f       	mul	r23, r18
 4fe:	bb 27       	eor	r27, r27
 500:	f0 0d       	add	r31, r0
 502:	b1 1d       	adc	r27, r1
 504:	63 9f       	mul	r22, r19
 506:	aa 27       	eor	r26, r26
 508:	f0 0d       	add	r31, r0
 50a:	b1 1d       	adc	r27, r1
 50c:	aa 1f       	adc	r26, r26
 50e:	64 9f       	mul	r22, r20
 510:	66 27       	eor	r22, r22
 512:	b0 0d       	add	r27, r0
 514:	a1 1d       	adc	r26, r1
 516:	66 1f       	adc	r22, r22
 518:	82 9f       	mul	r24, r18
 51a:	22 27       	eor	r18, r18
 51c:	b0 0d       	add	r27, r0
 51e:	a1 1d       	adc	r26, r1
 520:	62 1f       	adc	r22, r18
 522:	73 9f       	mul	r23, r19
 524:	b0 0d       	add	r27, r0
 526:	a1 1d       	adc	r26, r1
 528:	62 1f       	adc	r22, r18
 52a:	83 9f       	mul	r24, r19
 52c:	a0 0d       	add	r26, r0
 52e:	61 1d       	adc	r22, r1
 530:	22 1f       	adc	r18, r18
 532:	74 9f       	mul	r23, r20
 534:	33 27       	eor	r19, r19
 536:	a0 0d       	add	r26, r0
 538:	61 1d       	adc	r22, r1
 53a:	23 1f       	adc	r18, r19
 53c:	84 9f       	mul	r24, r20
 53e:	60 0d       	add	r22, r0
 540:	21 1d       	adc	r18, r1
 542:	82 2f       	mov	r24, r18
 544:	76 2f       	mov	r23, r22
 546:	6a 2f       	mov	r22, r26
 548:	11 24       	eor	r1, r1
 54a:	9f 57       	subi	r25, 0x7F	; 127
 54c:	50 40       	sbci	r21, 0x00	; 0
 54e:	8a f0       	brmi	.+34     	; 0x572 <__mulsf3_pse+0x84>
 550:	e1 f0       	breq	.+56     	; 0x58a <__mulsf3_pse+0x9c>
 552:	88 23       	and	r24, r24
 554:	4a f0       	brmi	.+18     	; 0x568 <__mulsf3_pse+0x7a>
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	bb 1f       	adc	r27, r27
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	91 50       	subi	r25, 0x01	; 1
 564:	50 40       	sbci	r21, 0x00	; 0
 566:	a9 f7       	brne	.-22     	; 0x552 <__mulsf3_pse+0x64>
 568:	9e 3f       	cpi	r25, 0xFE	; 254
 56a:	51 05       	cpc	r21, r1
 56c:	70 f0       	brcs	.+28     	; 0x58a <__mulsf3_pse+0x9c>
 56e:	14 c0       	rjmp	.+40     	; 0x598 <__fp_inf>
 570:	aa cf       	rjmp	.-172    	; 0x4c6 <__fp_szero>
 572:	5f 3f       	cpi	r21, 0xFF	; 255
 574:	ec f3       	brlt	.-6      	; 0x570 <__mulsf3_pse+0x82>
 576:	98 3e       	cpi	r25, 0xE8	; 232
 578:	dc f3       	brlt	.-10     	; 0x570 <__mulsf3_pse+0x82>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b7 95       	ror	r27
 582:	f7 95       	ror	r31
 584:	e7 95       	ror	r30
 586:	9f 5f       	subi	r25, 0xFF	; 255
 588:	c1 f7       	brne	.-16     	; 0x57a <__mulsf3_pse+0x8c>
 58a:	fe 2b       	or	r31, r30
 58c:	88 0f       	add	r24, r24
 58e:	91 1d       	adc	r25, r1
 590:	96 95       	lsr	r25
 592:	87 95       	ror	r24
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret

00000598 <__fp_inf>:
 598:	97 f9       	bld	r25, 7
 59a:	9f 67       	ori	r25, 0x7F	; 127
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	08 95       	ret

000005a4 <__fp_nan>:
 5a4:	9f ef       	ldi	r25, 0xFF	; 255
 5a6:	80 ec       	ldi	r24, 0xC0	; 192
 5a8:	08 95       	ret

000005aa <__fp_pscA>:
 5aa:	00 24       	eor	r0, r0
 5ac:	0a 94       	dec	r0
 5ae:	16 16       	cp	r1, r22
 5b0:	17 06       	cpc	r1, r23
 5b2:	18 06       	cpc	r1, r24
 5b4:	09 06       	cpc	r0, r25
 5b6:	08 95       	ret

000005b8 <__fp_pscB>:
 5b8:	00 24       	eor	r0, r0
 5ba:	0a 94       	dec	r0
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	05 06       	cpc	r0, r21
 5c4:	08 95       	ret

000005c6 <__fp_round>:
 5c6:	09 2e       	mov	r0, r25
 5c8:	03 94       	inc	r0
 5ca:	00 0c       	add	r0, r0
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__fp_round+0xc>
 5ce:	88 23       	and	r24, r24
 5d0:	52 f0       	brmi	.+20     	; 0x5e6 <__fp_round+0x20>
 5d2:	bb 0f       	add	r27, r27
 5d4:	40 f4       	brcc	.+16     	; 0x5e6 <__fp_round+0x20>
 5d6:	bf 2b       	or	r27, r31
 5d8:	11 f4       	brne	.+4      	; 0x5de <__fp_round+0x18>
 5da:	60 ff       	sbrs	r22, 0
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__fp_round+0x20>
 5de:	6f 5f       	subi	r22, 0xFF	; 255
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	08 95       	ret

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
