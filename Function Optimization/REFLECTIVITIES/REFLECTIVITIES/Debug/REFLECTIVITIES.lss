
REFLECTIVITIES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000504  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3a  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000025b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bc  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
   6:	00 00       	nop
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	00 00       	nop
   c:	14 c1       	rjmp	.+552    	; 0x236 <__vector_3>
   e:	00 00       	nop
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c1       	rjmp	.+624    	; 0x28e <__vector_7>
  1e:	00 00       	nop
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
  26:	00 00       	nop
  28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
  36:	00 00       	nop
  38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
  42:	00 00       	nop
  44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
  46:	00 00       	nop
  48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
  52:	00 00       	nop
  54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
  56:	00 00       	nop
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
  66:	00 00       	nop
  68:	27 c0       	rjmp	.+78     	; 0xb8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	25 c0       	rjmp	.+74     	; 0xb8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	23 c0       	rjmp	.+70     	; 0xb8 <__bad_interrupt>
  72:	00 00       	nop
  74:	f9 c0       	rjmp	.+498    	; 0x268 <__vector_29>
  76:	00 00       	nop
  78:	1f c0       	rjmp	.+62     	; 0xb8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1d c0       	rjmp	.+58     	; 0xb8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1b c0       	rjmp	.+54     	; 0xb8 <__bad_interrupt>
  82:	00 00       	nop
  84:	19 c0       	rjmp	.+50     	; 0xb8 <__bad_interrupt>
  86:	00 00       	nop
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	13 c0       	rjmp	.+38     	; 0xb8 <__bad_interrupt>
  92:	00 00       	nop
  94:	11 c0       	rjmp	.+34     	; 0xb8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a4 30       	cpi	r26, 0x04	; 4
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	82 d0       	rcall	.+260    	; 0x1ba <main>
  b6:	24 c2       	rjmp	.+1096   	; 0x500 <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <setupPWM>:
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
  ba:	bc 01       	movw	r22, r24
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 68       	ori	r24, 0x83	; 131
  c0:	84 bd       	out	0x24, r24	; 36
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	07 2e       	mov	r0, r23
  ca:	00 0c       	add	r0, r0
  cc:	88 0b       	sbc	r24, r24
  ce:	99 0b       	sbc	r25, r25
  d0:	28 d1       	rcall	.+592    	; 0x322 <__floatsisf>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	33 e3       	ldi	r19, 0x33	; 51
  d6:	43 e2       	ldi	r20, 0x23	; 35
  d8:	50 e4       	ldi	r21, 0x40	; 64
  da:	87 d1       	rcall	.+782    	; 0x3ea <__mulsf3>
  dc:	f4 d0       	rcall	.+488    	; 0x2c6 <__fixunssfsi>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <setupISR>:
  e8:	ee 9a       	sbi	0x1d, 6	; 29
  ea:	ea e6       	ldi	r30, 0x6A	; 106
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <setupADC>:
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 68       	ori	r24, 0x8D	; 141
  fe:	80 83       	st	Z, r24
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 66       	ori	r24, 0x61	; 97
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	81 7e       	andi	r24, 0xE1	; 225
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <motorControl>:
 112:	26 2f       	mov	r18, r22
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 11a:	43 70       	andi	r20, 0x03	; 3
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	42 17       	cp	r20, r18
 120:	53 07       	cpc	r21, r19
 122:	81 f0       	breq	.+32     	; 0x144 <motorControl+0x32>
 124:	45 b1       	in	r20, 0x05	; 5
 126:	40 7f       	andi	r20, 0xF0	; 240
 128:	45 b9       	out	0x05, r20	; 5
 12a:	45 b1       	in	r20, 0x05	; 5
 12c:	20 95       	com	r18
 12e:	30 95       	com	r19
 130:	23 70       	andi	r18, 0x03	; 3
 132:	33 27       	eor	r19, r19
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	24 2b       	or	r18, r20
 13e:	25 b9       	out	0x05, r18	; 5
 140:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 144:	bc 01       	movw	r22, r24
 146:	99 0f       	add	r25, r25
 148:	88 0b       	sbc	r24, r24
 14a:	99 0b       	sbc	r25, r25
 14c:	ea d0       	rcall	.+468    	; 0x322 <__floatsisf>
 14e:	23 e3       	ldi	r18, 0x33	; 51
 150:	33 e3       	ldi	r19, 0x33	; 51
 152:	43 e2       	ldi	r20, 0x23	; 35
 154:	50 e4       	ldi	r21, 0x40	; 64
 156:	49 d1       	rcall	.+658    	; 0x3ea <__mulsf3>
 158:	b6 d0       	rcall	.+364    	; 0x2c6 <__fixunssfsi>
 15a:	67 bd       	out	0x27, r22	; 39
 15c:	08 95       	ret

0000015e <initTimer1>:
 15e:	e1 e8       	ldi	r30, 0x81	; 129
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	80 83       	st	Z, r24
 168:	88 ee       	ldi	r24, 0xE8	; 232
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 170:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 174:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 178:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 17c:	08 95       	ret

0000017e <mTimer2>:
	return;
} //mTimer
void mTimer2(int count){
 17e:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 180:	e1 eb       	ldi	r30, 0xB1	; 177
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	93 60       	ori	r25, 0x03	; 3
 188:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
 18a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 18e:	b8 99       	sbic	0x17, 0	; 23
 190:	b8 9a       	sbi	0x17, 0	; 23
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
	return;
} //mTimer
void mTimer2(int count){
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 198:	b8 9b       	sbis	0x17, 0	; 23
 19a:	fe cf       	rjmp	.-4      	; 0x198 <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 19c:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 1a2:	24 17       	cp	r18, r20
 1a4:	35 07       	cpc	r19, r21
 1a6:	1c f4       	brge	.+6      	; 0x1ae <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 1a8:	b8 9b       	sbis	0x17, 0	; 23
 1aa:	f6 cf       	rjmp	.-20     	; 0x198 <mTimer2+0x1a>
 1ac:	f7 cf       	rjmp	.-18     	; 0x19c <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 1ae:	e1 eb       	ldi	r30, 0xB1	; 177
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 7f       	andi	r24, 0xF8	; 248
 1b6:	80 83       	st	Z, r24
 1b8:	08 95       	ret

000001ba <main>:
volatile unsigned char ADC_RESET;

/*Beginning of main program*/
int main(void){
	uint8_t oldADCResult=0x00;
	cli(); //disable all interrupts
 1ba:	f8 94       	cli
	initTimer1();
 1bc:	d0 df       	rcall	.-96     	; 0x15e <initTimer1>
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM
 1be:	8e e1       	ldi	r24, 0x1E	; 30
 1c0:	90 e0       	ldi	r25, 0x00	; 0
	setupISR(); //interrupt initializations
 1c2:	7b df       	rcall	.-266    	; 0xba <setupPWM>
 1c4:	91 df       	rcall	.-222    	; 0xe8 <setupISR>
	setupADC(); //ADC initializations
 1c6:	97 df       	rcall	.-210    	; 0xf6 <setupADC>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 1ca:	84 b9       	out	0x04, r24	; 4
 1cc:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xFF; //LEDs Debugging
 1ce:	80 ef       	ldi	r24, 0xF0	; 240
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 1d0:	8a b9       	out	0x0a, r24	; 10
 1d2:	10 ba       	out	0x10, r1	; 16
	DDRF = 0x00; /*PF1=ADC1 pin*/
 1d4:	78 94       	sei
	sei(); //enable all interrupts
 1d6:	85 b1       	in	r24, 0x05	; 5
	PORTB &= 0b11110000; //apply brake to Vcc
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	85 b9       	out	0x05, r24	; 5
	motorControl(CONVEYOR_SPEED,DC_FORWARD); //start conveyor towards stepper
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	8e e1       	ldi	r24, 0x1E	; 30
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	97 df       	rcall	.-210    	; 0x112 <motorControl>
 1e4:	ea e7       	ldi	r30, 0x7A	; 122
	ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	80 83       	st	Z, r24
 1ee:	10 e0       	ldi	r17, 0x00	; 0
volatile unsigned char ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete
volatile unsigned char ADC_RESET;

/*Beginning of main program*/
int main(void){
	uint8_t oldADCResult=0x00;
 1f0:	ca e7       	ldi	r28, 0x7A	; 122
	while (1){
		if ((ADCResultFlag) && (ADCResult>(oldADCResult+0x05))){
			oldADCResult=ADCResult;
			PORTC=oldADCResult;
			ADCResultFlag=0x00;
			ADCSRA |= _BV(ADSC);
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ADCResultFlag>
	sei(); //enable all interrupts
	PORTB &= 0b11110000; //apply brake to Vcc
	motorControl(CONVEYOR_SPEED,DC_FORWARD); //start conveyor towards stepper
	ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
	while (1){
		if ((ADCResultFlag) && (ADCResult>(oldADCResult+0x05))){
 1f8:	88 23       	and	r24, r24
 1fa:	89 f0       	breq	.+34     	; 0x21e <main+0x64>
 1fc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ADCResult>
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 2f       	mov	r24, r17
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	05 96       	adiw	r24, 0x05	; 5
 208:	82 17       	cp	r24, r18
 20a:	93 07       	cpc	r25, r19
 20c:	44 f4       	brge	.+16     	; 0x21e <main+0x64>
 20e:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <ADCResult>
			oldADCResult=ADCResult;
 212:	18 b9       	out	0x08, r17	; 8
			PORTC=oldADCResult;
 214:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADCResultFlag>
			ADCResultFlag=0x00;
 218:	88 81       	ld	r24, Y
			ADCSRA |= _BV(ADSC);
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	88 83       	st	Y, r24
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADC_RESET>
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
 222:	88 23       	and	r24, r24
 224:	21 f0       	breq	.+8      	; 0x22e <main+0x74>
 226:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ADC_RESET>
			oldADCResult=0x00;
			ADC_RESET=0x00;
			PORTC=0x00;
 22a:	18 b8       	out	0x08, r1	; 8
			ADCResultFlag=0x00;
			ADCSRA |= _BV(ADSC);
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
			oldADCResult=0x00;
 22c:	10 e0       	ldi	r17, 0x00	; 0
			ADC_RESET=0x00;
			PORTC=0x00;
		}
		mTimer2(5); //delay as if in rest of normal while loop
 22e:	85 e0       	ldi	r24, 0x05	; 5
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	a5 df       	rcall	.-182    	; 0x17e <mTimer2>
 234:	df cf       	rjmp	.-66     	; 0x1f4 <main+0x3a>

00000236 <__vector_3>:
	}
 236:	1f 92       	push	r1
	}
	TCCR2B&=0b11111000; //disable timer 2
}
/**********INTERRUPT SERVICE ROUTINES**********/
/*sensor 3: 2nt Optical Inductive, Active HIGH starts AD conversion*/
ISR(INT2_vect){ //unused --ODA
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0b b6       	in	r0, 0x3b	; 59
 242:	0f 92       	push	r0
 244:	8f 93       	push	r24
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	ADCSRA |= _BV(ADSC);
 24a:	ea e7       	ldi	r30, 0x7A	; 122
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0b be       	out	0x3b, r0	; 59
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_29>:
ISR(ADC_vect){ //ADCResult is left-adjusted (i.e. the upper most byte is taken; 2 LSB' are discarded)
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	8f 93       	push	r24
	ADCResult = ADCH;
 274:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 278:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADCResult>
	ADCResultFlag = 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCResultFlag>
}
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_7>:
ISR(INT6_vect){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	int i;
	ADC_RESET=1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADC_RESET>
 2a2:	88 ee       	ldi	r24, 0xE8	; 232
 2a4:	93 e0       	ldi	r25, 0x03	; 3
 2a6:	01 97       	sbiw	r24, 0x01	; 1
	//bad practice, but good for demonstration purposes
	for(i=0;i<1000;i++){}//arbitrary delay (allow button to settle)
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <__vector_7+0x18>
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <__vector_7+0x26>
 2ac:	88 ee       	ldi	r24, 0xE8	; 232
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	01 97       	sbiw	r24, 0x01	; 1
	//mTimer(25);
	while((PINE & 0b01000000)==0b01000000){ //while switch is still pressed
		for(i=0;i<1000;i++){}//arbitrary delay
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <__vector_7+0x22>
	int i;
	ADC_RESET=1;
	//bad practice, but good for demonstration purposes
	for(i=0;i<1000;i++){}//arbitrary delay (allow button to settle)
	//mTimer(25);
	while((PINE & 0b01000000)==0b01000000){ //while switch is still pressed
 2b4:	66 99       	sbic	0x0c, 6	; 12
 2b6:	fa cf       	rjmp	.-12     	; 0x2ac <__vector_7+0x1e>
		for(i=0;i<1000;i++){}//arbitrary delay
	}
}
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__fixunssfsi>:
 2c6:	70 d0       	rcall	.+224    	; 0x3a8 <__fp_splitA>
 2c8:	88 f0       	brcs	.+34     	; 0x2ec <__fixunssfsi+0x26>
 2ca:	9f 57       	subi	r25, 0x7F	; 127
 2cc:	90 f0       	brcs	.+36     	; 0x2f2 <__fixunssfsi+0x2c>
 2ce:	b9 2f       	mov	r27, r25
 2d0:	99 27       	eor	r25, r25
 2d2:	b7 51       	subi	r27, 0x17	; 23
 2d4:	a0 f0       	brcs	.+40     	; 0x2fe <__fixunssfsi+0x38>
 2d6:	d1 f0       	breq	.+52     	; 0x30c <__fixunssfsi+0x46>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a f0       	brmi	.+6      	; 0x2e8 <__fixunssfsi+0x22>
 2e2:	ba 95       	dec	r27
 2e4:	c9 f7       	brne	.-14     	; 0x2d8 <__fixunssfsi+0x12>
 2e6:	12 c0       	rjmp	.+36     	; 0x30c <__fixunssfsi+0x46>
 2e8:	b1 30       	cpi	r27, 0x01	; 1
 2ea:	81 f0       	breq	.+32     	; 0x30c <__fixunssfsi+0x46>
 2ec:	77 d0       	rcall	.+238    	; 0x3dc <__fp_zero>
 2ee:	b1 e0       	ldi	r27, 0x01	; 1
 2f0:	08 95       	ret
 2f2:	74 c0       	rjmp	.+232    	; 0x3dc <__fp_zero>
 2f4:	67 2f       	mov	r22, r23
 2f6:	78 2f       	mov	r23, r24
 2f8:	88 27       	eor	r24, r24
 2fa:	b8 5f       	subi	r27, 0xF8	; 248
 2fc:	39 f0       	breq	.+14     	; 0x30c <__fixunssfsi+0x46>
 2fe:	b9 3f       	cpi	r27, 0xF9	; 249
 300:	cc f3       	brlt	.-14     	; 0x2f4 <__fixunssfsi+0x2e>
 302:	86 95       	lsr	r24
 304:	77 95       	ror	r23
 306:	67 95       	ror	r22
 308:	b3 95       	inc	r27
 30a:	d9 f7       	brne	.-10     	; 0x302 <__fixunssfsi+0x3c>
 30c:	3e f4       	brtc	.+14     	; 0x31c <__fixunssfsi+0x56>
 30e:	90 95       	com	r25
 310:	80 95       	com	r24
 312:	70 95       	com	r23
 314:	61 95       	neg	r22
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	8f 4f       	sbci	r24, 0xFF	; 255
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__floatunsisf>:
 31e:	e8 94       	clt
 320:	09 c0       	rjmp	.+18     	; 0x334 <__floatsisf+0x12>

00000322 <__floatsisf>:
 322:	97 fb       	bst	r25, 7
 324:	3e f4       	brtc	.+14     	; 0x334 <__floatsisf+0x12>
 326:	90 95       	com	r25
 328:	80 95       	com	r24
 32a:	70 95       	com	r23
 32c:	61 95       	neg	r22
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
 330:	8f 4f       	sbci	r24, 0xFF	; 255
 332:	9f 4f       	sbci	r25, 0xFF	; 255
 334:	99 23       	and	r25, r25
 336:	a9 f0       	breq	.+42     	; 0x362 <__floatsisf+0x40>
 338:	f9 2f       	mov	r31, r25
 33a:	96 e9       	ldi	r25, 0x96	; 150
 33c:	bb 27       	eor	r27, r27
 33e:	93 95       	inc	r25
 340:	f6 95       	lsr	r31
 342:	87 95       	ror	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	b7 95       	ror	r27
 34a:	f1 11       	cpse	r31, r1
 34c:	f8 cf       	rjmp	.-16     	; 0x33e <__floatsisf+0x1c>
 34e:	fa f4       	brpl	.+62     	; 0x38e <__floatsisf+0x6c>
 350:	bb 0f       	add	r27, r27
 352:	11 f4       	brne	.+4      	; 0x358 <__floatsisf+0x36>
 354:	60 ff       	sbrs	r22, 0
 356:	1b c0       	rjmp	.+54     	; 0x38e <__floatsisf+0x6c>
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	16 c0       	rjmp	.+44     	; 0x38e <__floatsisf+0x6c>
 362:	88 23       	and	r24, r24
 364:	11 f0       	breq	.+4      	; 0x36a <__floatsisf+0x48>
 366:	96 e9       	ldi	r25, 0x96	; 150
 368:	11 c0       	rjmp	.+34     	; 0x38c <__floatsisf+0x6a>
 36a:	77 23       	and	r23, r23
 36c:	21 f0       	breq	.+8      	; 0x376 <__floatsisf+0x54>
 36e:	9e e8       	ldi	r25, 0x8E	; 142
 370:	87 2f       	mov	r24, r23
 372:	76 2f       	mov	r23, r22
 374:	05 c0       	rjmp	.+10     	; 0x380 <__floatsisf+0x5e>
 376:	66 23       	and	r22, r22
 378:	71 f0       	breq	.+28     	; 0x396 <__floatsisf+0x74>
 37a:	96 e8       	ldi	r25, 0x86	; 134
 37c:	86 2f       	mov	r24, r22
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	2a f0       	brmi	.+10     	; 0x38e <__floatsisf+0x6c>
 384:	9a 95       	dec	r25
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	88 1f       	adc	r24, r24
 38c:	da f7       	brpl	.-10     	; 0x384 <__floatsisf+0x62>
 38e:	88 0f       	add	r24, r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	97 f9       	bld	r25, 7
 396:	08 95       	ret

00000398 <__fp_split3>:
 398:	57 fd       	sbrc	r21, 7
 39a:	90 58       	subi	r25, 0x80	; 128
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <__fp_splitA+0x10>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	71 f0       	breq	.+28     	; 0x3c2 <__fp_splitA+0x1a>
 3a6:	47 95       	ror	r20

000003a8 <__fp_splitA>:
 3a8:	88 0f       	add	r24, r24
 3aa:	97 fb       	bst	r25, 7
 3ac:	99 1f       	adc	r25, r25
 3ae:	61 f0       	breq	.+24     	; 0x3c8 <__fp_splitA+0x20>
 3b0:	9f 3f       	cpi	r25, 0xFF	; 255
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <__fp_splitA+0x2a>
 3b4:	87 95       	ror	r24
 3b6:	08 95       	ret
 3b8:	12 16       	cp	r1, r18
 3ba:	13 06       	cpc	r1, r19
 3bc:	14 06       	cpc	r1, r20
 3be:	55 1f       	adc	r21, r21
 3c0:	f2 cf       	rjmp	.-28     	; 0x3a6 <__fp_split3+0xe>
 3c2:	46 95       	lsr	r20
 3c4:	f1 df       	rcall	.-30     	; 0x3a8 <__fp_splitA>
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <__fp_splitA+0x30>
 3c8:	16 16       	cp	r1, r22
 3ca:	17 06       	cpc	r1, r23
 3cc:	18 06       	cpc	r1, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	f1 cf       	rjmp	.-30     	; 0x3b4 <__fp_splitA+0xc>
 3d2:	86 95       	lsr	r24
 3d4:	71 05       	cpc	r23, r1
 3d6:	61 05       	cpc	r22, r1
 3d8:	08 94       	sec
 3da:	08 95       	ret

000003dc <__fp_zero>:
 3dc:	e8 94       	clt

000003de <__fp_szero>:
 3de:	bb 27       	eor	r27, r27
 3e0:	66 27       	eor	r22, r22
 3e2:	77 27       	eor	r23, r23
 3e4:	cb 01       	movw	r24, r22
 3e6:	97 f9       	bld	r25, 7
 3e8:	08 95       	ret

000003ea <__mulsf3>:
 3ea:	0b d0       	rcall	.+22     	; 0x402 <__mulsf3x>
 3ec:	78 c0       	rjmp	.+240    	; 0x4de <__fp_round>
 3ee:	69 d0       	rcall	.+210    	; 0x4c2 <__fp_pscA>
 3f0:	28 f0       	brcs	.+10     	; 0x3fc <__mulsf3+0x12>
 3f2:	6e d0       	rcall	.+220    	; 0x4d0 <__fp_pscB>
 3f4:	18 f0       	brcs	.+6      	; 0x3fc <__mulsf3+0x12>
 3f6:	95 23       	and	r25, r21
 3f8:	09 f0       	breq	.+2      	; 0x3fc <__mulsf3+0x12>
 3fa:	5a c0       	rjmp	.+180    	; 0x4b0 <__fp_inf>
 3fc:	5f c0       	rjmp	.+190    	; 0x4bc <__fp_nan>
 3fe:	11 24       	eor	r1, r1
 400:	ee cf       	rjmp	.-36     	; 0x3de <__fp_szero>

00000402 <__mulsf3x>:
 402:	ca df       	rcall	.-108    	; 0x398 <__fp_split3>
 404:	a0 f3       	brcs	.-24     	; 0x3ee <__mulsf3+0x4>

00000406 <__mulsf3_pse>:
 406:	95 9f       	mul	r25, r21
 408:	d1 f3       	breq	.-12     	; 0x3fe <__mulsf3+0x14>
 40a:	95 0f       	add	r25, r21
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	55 1f       	adc	r21, r21
 410:	62 9f       	mul	r22, r18
 412:	f0 01       	movw	r30, r0
 414:	72 9f       	mul	r23, r18
 416:	bb 27       	eor	r27, r27
 418:	f0 0d       	add	r31, r0
 41a:	b1 1d       	adc	r27, r1
 41c:	63 9f       	mul	r22, r19
 41e:	aa 27       	eor	r26, r26
 420:	f0 0d       	add	r31, r0
 422:	b1 1d       	adc	r27, r1
 424:	aa 1f       	adc	r26, r26
 426:	64 9f       	mul	r22, r20
 428:	66 27       	eor	r22, r22
 42a:	b0 0d       	add	r27, r0
 42c:	a1 1d       	adc	r26, r1
 42e:	66 1f       	adc	r22, r22
 430:	82 9f       	mul	r24, r18
 432:	22 27       	eor	r18, r18
 434:	b0 0d       	add	r27, r0
 436:	a1 1d       	adc	r26, r1
 438:	62 1f       	adc	r22, r18
 43a:	73 9f       	mul	r23, r19
 43c:	b0 0d       	add	r27, r0
 43e:	a1 1d       	adc	r26, r1
 440:	62 1f       	adc	r22, r18
 442:	83 9f       	mul	r24, r19
 444:	a0 0d       	add	r26, r0
 446:	61 1d       	adc	r22, r1
 448:	22 1f       	adc	r18, r18
 44a:	74 9f       	mul	r23, r20
 44c:	33 27       	eor	r19, r19
 44e:	a0 0d       	add	r26, r0
 450:	61 1d       	adc	r22, r1
 452:	23 1f       	adc	r18, r19
 454:	84 9f       	mul	r24, r20
 456:	60 0d       	add	r22, r0
 458:	21 1d       	adc	r18, r1
 45a:	82 2f       	mov	r24, r18
 45c:	76 2f       	mov	r23, r22
 45e:	6a 2f       	mov	r22, r26
 460:	11 24       	eor	r1, r1
 462:	9f 57       	subi	r25, 0x7F	; 127
 464:	50 40       	sbci	r21, 0x00	; 0
 466:	8a f0       	brmi	.+34     	; 0x48a <__mulsf3_pse+0x84>
 468:	e1 f0       	breq	.+56     	; 0x4a2 <__mulsf3_pse+0x9c>
 46a:	88 23       	and	r24, r24
 46c:	4a f0       	brmi	.+18     	; 0x480 <__mulsf3_pse+0x7a>
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	bb 1f       	adc	r27, r27
 474:	66 1f       	adc	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	50 40       	sbci	r21, 0x00	; 0
 47e:	a9 f7       	brne	.-22     	; 0x46a <__mulsf3_pse+0x64>
 480:	9e 3f       	cpi	r25, 0xFE	; 254
 482:	51 05       	cpc	r21, r1
 484:	70 f0       	brcs	.+28     	; 0x4a2 <__mulsf3_pse+0x9c>
 486:	14 c0       	rjmp	.+40     	; 0x4b0 <__fp_inf>
 488:	aa cf       	rjmp	.-172    	; 0x3de <__fp_szero>
 48a:	5f 3f       	cpi	r21, 0xFF	; 255
 48c:	ec f3       	brlt	.-6      	; 0x488 <__mulsf3_pse+0x82>
 48e:	98 3e       	cpi	r25, 0xE8	; 232
 490:	dc f3       	brlt	.-10     	; 0x488 <__mulsf3_pse+0x82>
 492:	86 95       	lsr	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b7 95       	ror	r27
 49a:	f7 95       	ror	r31
 49c:	e7 95       	ror	r30
 49e:	9f 5f       	subi	r25, 0xFF	; 255
 4a0:	c1 f7       	brne	.-16     	; 0x492 <__mulsf3_pse+0x8c>
 4a2:	fe 2b       	or	r31, r30
 4a4:	88 0f       	add	r24, r24
 4a6:	91 1d       	adc	r25, r1
 4a8:	96 95       	lsr	r25
 4aa:	87 95       	ror	r24
 4ac:	97 f9       	bld	r25, 7
 4ae:	08 95       	ret

000004b0 <__fp_inf>:
 4b0:	97 f9       	bld	r25, 7
 4b2:	9f 67       	ori	r25, 0x7F	; 127
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	08 95       	ret

000004bc <__fp_nan>:
 4bc:	9f ef       	ldi	r25, 0xFF	; 255
 4be:	80 ec       	ldi	r24, 0xC0	; 192
 4c0:	08 95       	ret

000004c2 <__fp_pscA>:
 4c2:	00 24       	eor	r0, r0
 4c4:	0a 94       	dec	r0
 4c6:	16 16       	cp	r1, r22
 4c8:	17 06       	cpc	r1, r23
 4ca:	18 06       	cpc	r1, r24
 4cc:	09 06       	cpc	r0, r25
 4ce:	08 95       	ret

000004d0 <__fp_pscB>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	12 16       	cp	r1, r18
 4d6:	13 06       	cpc	r1, r19
 4d8:	14 06       	cpc	r1, r20
 4da:	05 06       	cpc	r0, r21
 4dc:	08 95       	ret

000004de <__fp_round>:
 4de:	09 2e       	mov	r0, r25
 4e0:	03 94       	inc	r0
 4e2:	00 0c       	add	r0, r0
 4e4:	11 f4       	brne	.+4      	; 0x4ea <__fp_round+0xc>
 4e6:	88 23       	and	r24, r24
 4e8:	52 f0       	brmi	.+20     	; 0x4fe <__fp_round+0x20>
 4ea:	bb 0f       	add	r27, r27
 4ec:	40 f4       	brcc	.+16     	; 0x4fe <__fp_round+0x20>
 4ee:	bf 2b       	or	r27, r31
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__fp_round+0x18>
 4f2:	60 ff       	sbrs	r22, 0
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__fp_round+0x20>
 4f6:	6f 5f       	subi	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <_exit>:
 500:	f8 94       	cli

00000502 <__stop_program>:
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stop_program>
