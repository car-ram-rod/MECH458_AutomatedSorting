
REFLECTIVITIES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f1b  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4c  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00002333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  00002a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cb  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000342f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
   6:	00 00       	nop
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	00 00       	nop
   c:	a3 c1       	rjmp	.+838    	; 0x354 <__vector_3>
   e:	00 00       	nop
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d6 c1       	rjmp	.+940    	; 0x3ca <__vector_7>
  1e:	00 00       	nop
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
  26:	00 00       	nop
  28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
  36:	00 00       	nop
  38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
  42:	00 00       	nop
  44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
  46:	00 00       	nop
  48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
  52:	00 00       	nop
  54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
  56:	00 00       	nop
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
  66:	00 00       	nop
  68:	27 c0       	rjmp	.+78     	; 0xb8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	25 c0       	rjmp	.+74     	; 0xb8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	23 c0       	rjmp	.+70     	; 0xb8 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c1       	rjmp	.+764    	; 0x372 <__vector_29>
  76:	00 00       	nop
  78:	1f c0       	rjmp	.+62     	; 0xb8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1d c0       	rjmp	.+58     	; 0xb8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1b c0       	rjmp	.+54     	; 0xb8 <__bad_interrupt>
  82:	00 00       	nop
  84:	19 c0       	rjmp	.+50     	; 0xb8 <__bad_interrupt>
  86:	00 00       	nop
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	13 c0       	rjmp	.+38     	; 0xb8 <__bad_interrupt>
  92:	00 00       	nop
  94:	11 c0       	rjmp	.+34     	; 0xb8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a6 30       	cpi	r26, 0x06	; 6
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	89 d0       	rcall	.+274    	; 0x1c8 <main>
  b6:	d9 c2       	rjmp	.+1458   	; 0x66a <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <setupPWM>:
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
  ba:	bc 01       	movw	r22, r24
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 68       	ori	r24, 0x83	; 131
  c0:	84 bd       	out	0x24, r24	; 36
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	07 2e       	mov	r0, r23
  ca:	00 0c       	add	r0, r0
  cc:	88 0b       	sbc	r24, r24
  ce:	99 0b       	sbc	r25, r25
  d0:	dd d1       	rcall	.+954    	; 0x48c <__floatsisf>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	33 e3       	ldi	r19, 0x33	; 51
  d6:	43 e2       	ldi	r20, 0x23	; 35
  d8:	50 e4       	ldi	r21, 0x40	; 64
  da:	3c d2       	rcall	.+1144   	; 0x554 <__mulsf3>
  dc:	a9 d1       	rcall	.+850    	; 0x430 <__fixunssfsi>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <setupISR>:
  e8:	8d b3       	in	r24, 0x1d	; 29
  ea:	84 64       	ori	r24, 0x44	; 68
  ec:	8d bb       	out	0x1d, r24	; 29
  ee:	e9 e6       	ldi	r30, 0x69	; 105
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 63       	ori	r24, 0x30	; 48
  f6:	80 83       	st	Z, r24
  f8:	ea e6       	ldi	r30, 0x6A	; 106
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <setupADC>:
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8d 68       	ori	r24, 0x8D	; 141
 10c:	80 83       	st	Z, r24
 10e:	ec e7       	ldi	r30, 0x7C	; 124
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 64       	ori	r24, 0x41	; 65
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	81 7e       	andi	r24, 0xE1	; 225
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <motorControl>:
 120:	26 2f       	mov	r18, r22
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 128:	43 70       	andi	r20, 0x03	; 3
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	42 17       	cp	r20, r18
 12e:	53 07       	cpc	r21, r19
 130:	81 f0       	breq	.+32     	; 0x152 <motorControl+0x32>
 132:	45 b1       	in	r20, 0x05	; 5
 134:	40 7f       	andi	r20, 0xF0	; 240
 136:	45 b9       	out	0x05, r20	; 5
 138:	45 b1       	in	r20, 0x05	; 5
 13a:	20 95       	com	r18
 13c:	30 95       	com	r19
 13e:	23 70       	andi	r18, 0x03	; 3
 140:	33 27       	eor	r19, r19
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	24 2b       	or	r18, r20
 14c:	25 b9       	out	0x05, r18	; 5
 14e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 152:	bc 01       	movw	r22, r24
 154:	99 0f       	add	r25, r25
 156:	88 0b       	sbc	r24, r24
 158:	99 0b       	sbc	r25, r25
 15a:	98 d1       	rcall	.+816    	; 0x48c <__floatsisf>
 15c:	23 e3       	ldi	r18, 0x33	; 51
 15e:	33 e3       	ldi	r19, 0x33	; 51
 160:	43 e2       	ldi	r20, 0x23	; 35
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	f7 d1       	rcall	.+1006   	; 0x554 <__mulsf3>
 166:	64 d1       	rcall	.+712    	; 0x430 <__fixunssfsi>
 168:	67 bd       	out	0x27, r22	; 39
 16a:	08 95       	ret

0000016c <initTimer1>:
 16c:	e1 e8       	ldi	r30, 0x81	; 129
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	88 ee       	ldi	r24, 0xE8	; 232
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 17e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 18a:	08 95       	ret

0000018c <mTimer2>:
	return;
} //mTimer
void mTimer2(int count){
 18c:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 18e:	e1 eb       	ldi	r30, 0xB1	; 177
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	93 60       	ori	r25, 0x03	; 3
 196:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
 198:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 19c:	b8 99       	sbic	0x17, 0	; 23
 19e:	b8 9a       	sbi	0x17, 0	; 23
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
	return;
} //mTimer
void mTimer2(int count){
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 1a6:	b8 9b       	sbis	0x17, 0	; 23
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 1aa:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 1ac:	2f 5f       	subi	r18, 0xFF	; 255
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 1b0:	24 17       	cp	r18, r20
 1b2:	35 07       	cpc	r19, r21
 1b4:	1c f4       	brge	.+6      	; 0x1bc <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 1b6:	b8 9b       	sbis	0x17, 0	; 23
 1b8:	f6 cf       	rjmp	.-20     	; 0x1a6 <mTimer2+0x1a>
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 1bc:	e1 eb       	ldi	r30, 0xB1	; 177
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 7f       	andi	r24, 0xF8	; 248
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <main>:
volatile unsigned char ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete
volatile unsigned char ADC_RESET;
volatile unsigned char OPT2FLAG;

/*Beginning of main program*/
int main(void){
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	60 97       	sbiw	r28, 0x10	; 16
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 1dc:	e1 e6       	ldi	r30, 0x61	; 97
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	80 83       	st	Z, r24
	CLKPR = 0;
 1e4:	10 82       	st	Z, r1
	int i=0;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
 1e6:	fe 01       	movw	r30, r28
 1e8:	31 96       	adiw	r30, 0x01	; 1
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	df 01       	movw	r26, r30
 1ee:	1d 92       	st	X+, r1
 1f0:	8a 95       	dec	r24
 1f2:	e9 f7       	brne	.-6      	; 0x1ee <main+0x26>
	uint16_t oldADCResult=0x03FF;
	uint8_t ADCFilterCount = 0x00;
	cli(); //disable all interrupts
 1f4:	f8 94       	cli
	initTimer1();
 1f6:	ba df       	rcall	.-140    	; 0x16c <initTimer1>
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM
 1f8:	8e e1       	ldi	r24, 0x1E	; 30
 1fa:	90 e0       	ldi	r25, 0x00	; 0
	setupISR(); //interrupt initializations
 1fc:	5e df       	rcall	.-324    	; 0xba <setupPWM>
 1fe:	74 df       	rcall	.-280    	; 0xe8 <setupISR>
	setupADC(); //ADC initializations
 200:	81 df       	rcall	.-254    	; 0x104 <setupADC>
 202:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 204:	84 b9       	out	0x04, r24	; 4
 206:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xFF; //LEDs Debugging
 208:	80 ef       	ldi	r24, 0xF0	; 240
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 20a:	8a b9       	out	0x0a, r24	; 10
 20c:	10 ba       	out	0x10, r1	; 16
	DDRF = 0x00; /*PF1=ADC1 pin*/
 20e:	78 94       	sei
	sei(); //enable all interrupts
 210:	85 b1       	in	r24, 0x05	; 5
	PORTB &= 0b11110000; //apply brake to Vcc
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	85 b9       	out	0x05, r24	; 5
 216:	8a ea       	ldi	r24, 0xAA	; 170
	PORTC=0b10101010;
 218:	88 b9       	out	0x08, r24	; 8
	mTimer2(2000);
 21a:	80 ed       	ldi	r24, 0xD0	; 208
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	b6 df       	rcall	.-148    	; 0x18c <mTimer2>
	PORTC=0b00000000;
 220:	18 b8       	out	0x08, r1	; 8
	mTimer2(2000);
 222:	80 ed       	ldi	r24, 0xD0	; 208
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	b2 df       	rcall	.-156    	; 0x18c <mTimer2>
	motorControl(40,DC_FORWARD); //start conveyor towards stepper
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	78 df       	rcall	.-272    	; 0x120 <motorControl>
 230:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ADC_RESET>
	ADC_RESET=0;
 234:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OPT2FLAG>
	OPT2FLAG=0;
 238:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADCResultFlag>
	ADCResultFlag=0;
 23c:	10 e0       	ldi	r17, 0x00	; 0
	CLKPR = 0;
	int i=0;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint16_t oldADCResult=0x03FF;
	uint8_t ADCFilterCount = 0x00;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
	CLKPR = 0;
	int i=0;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint16_t oldADCResult=0x03FF;
 240:	93 e0       	ldi	r25, 0x03	; 3
 242:	0f 2e       	mov	r0, r31
				mTimer2(20001);
				PORTC=0x00;
				PORTD&=0x0F;
			}
			ADCResultFlag=0x00;
			ADCSRA |= _BV(ADSC);	
 244:	fa e7       	ldi	r31, 0x7A	; 122
 246:	ef 2e       	mov	r14, r31
 248:	f1 2c       	mov	r15, r1
 24a:	f0 2d       	mov	r31, r0
 24c:	dd 24       	eor	r13, r13
				oldADCResultArray[ADCFilterCount]=oldADCResult; //store biggest result and seven previous for averaging
				ADCFilterCount+=1;
				ADCFilterCount&=0b00000111; //modulus of 8;

			} else if (ADCResult>(oldADCResult+50)){
				oldADCResult=0xFFFF;
 24e:	da 94       	dec	r13
 250:	0f ef       	ldi	r16, 0xFF	; 255
 252:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ADCResultFlag>
	ADC_RESET=0;
	OPT2FLAG=0;
	ADCResultFlag=0;

	while (1){
		if (ADCResultFlag){
 256:	22 23       	and	r18, r18
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x94>
 25a:	64 c0       	rjmp	.+200    	; 0x324 <main+0x15c>
 25c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>
			if (ADCResult<(oldADCResult)){
 260:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 264:	28 17       	cp	r18, r24
 266:	39 07       	cpc	r19, r25
 268:	98 f4       	brcc	.+38     	; 0x290 <main+0xc8>
 26a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADCResult>
				oldADCResult=ADCResult;
 26e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADCResult+0x1>
 272:	e1 2f       	mov	r30, r17
				oldADCResultArray[ADCFilterCount]=oldADCResult; //store biggest result and seven previous for averaging
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	2c 0f       	add	r18, r28
 280:	3d 1f       	adc	r19, r29
 282:	e2 0f       	add	r30, r18
 284:	f3 1f       	adc	r31, r19
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
 28a:	1f 5f       	subi	r17, 0xFF	; 255
				ADCFilterCount+=1;
 28c:	17 70       	andi	r17, 0x07	; 7
				ADCFilterCount&=0b00000111; //modulus of 8;
 28e:	44 c0       	rjmp	.+136    	; 0x318 <main+0x150>
 290:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>

			} else if (ADCResult>(oldADCResult+50)){
 294:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 298:	ac 01       	movw	r20, r24
 29a:	4e 5c       	subi	r20, 0xCE	; 206
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	42 17       	cp	r20, r18
 2a0:	53 07       	cpc	r21, r19
 2a2:	d0 f5       	brcc	.+116    	; 0x318 <main+0x150>
 2a4:	28 e0       	ldi	r18, 0x08	; 8
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	e1 2f       	mov	r30, r17
				oldADCResult=0xFFFF;
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
					aveADCResult+=oldADCResultArray[ADCFilterCount];
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	4c 0f       	add	r20, r28
 2ba:	5d 1f       	adc	r21, r29
 2bc:	e4 0f       	add	r30, r20
 2be:	f5 1f       	adc	r31, r21
 2c0:	40 81       	ld	r20, Z
 2c2:	51 81       	ldd	r21, Z+1	; 0x01
 2c4:	84 0f       	add	r24, r20
 2c6:	95 1f       	adc	r25, r21
 2c8:	1f 5f       	subi	r17, 0xFF	; 255
					ADCFilterCount+=1;
 2ca:	17 70       	andi	r17, 0x07	; 7
					ADCFilterCount&=0b00000111; //modulus of 8;
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	31 09       	sbc	r19, r1
 2d0:	69 f7       	brne	.-38     	; 0x2ac <main+0xe4>
				ADCFilterCount&=0b00000111; //modulus of 8;

			} else if (ADCResult>(oldADCResult+50)){
				oldADCResult=0xFFFF;
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
 2d2:	96 95       	lsr	r25
					aveADCResult+=oldADCResultArray[ADCFilterCount];
					ADCFilterCount+=1;
					ADCFilterCount&=0b00000111; //modulus of 8;
				}
				aveADCResult=aveADCResult/8;
 2d4:	87 95       	ror	r24
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	88 b9       	out	0x08, r24	; 8
				/*set LEDs to show averaged value*/
				PORTC=(aveADCResult & 0x00FF); //bits 7:0
 2e0:	9c 01       	movw	r18, r24
				PORTD=((aveADCResult & 0x0100) >> 3); //D2=GREEN when set (8th bit of ADC value)
 2e2:	22 27       	eor	r18, r18
 2e4:	31 70       	andi	r19, 0x01	; 1
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	36 95       	lsr	r19
 2ec:	27 95       	ror	r18
 2ee:	36 95       	lsr	r19
 2f0:	27 95       	ror	r18
 2f2:	2b b9       	out	0x0b, r18	; 11
 2f4:	2b b1       	in	r18, 0x0b	; 11
				PORTD|=((aveADCResult & 0x0200) >> 2); //D5=RED when set (9th bit of ADC value)
 2f6:	88 27       	eor	r24, r24
 2f8:	92 70       	andi	r25, 0x02	; 2
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	82 2b       	or	r24, r18
 304:	8b b9       	out	0x0b, r24	; 11
				mTimer2(20001);
 306:	81 e2       	ldi	r24, 0x21	; 33
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	40 df       	rcall	.-384    	; 0x18c <mTimer2>
 30c:	18 b8       	out	0x08, r1	; 8
				PORTC=0x00;
 30e:	8b b1       	in	r24, 0x0b	; 11
				PORTD&=0x0F;
 310:	8f 70       	andi	r24, 0x0F	; 15
 312:	8b b9       	out	0x0b, r24	; 11
 314:	8d 2d       	mov	r24, r13
				oldADCResultArray[ADCFilterCount]=oldADCResult; //store biggest result and seven previous for averaging
				ADCFilterCount+=1;
				ADCFilterCount&=0b00000111; //modulus of 8;

			} else if (ADCResult>(oldADCResult+50)){
				oldADCResult=0xFFFF;
 316:	90 2f       	mov	r25, r16
 318:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <ADCResultFlag>
				PORTD|=((aveADCResult & 0x0200) >> 2); //D5=RED when set (9th bit of ADC value)
				mTimer2(20001);
				PORTC=0x00;
				PORTD&=0x0F;
			}
			ADCResultFlag=0x00;
 31c:	d7 01       	movw	r26, r14
			ADCSRA |= _BV(ADSC);	
 31e:	2c 91       	ld	r18, X
 320:	20 64       	ori	r18, 0x40	; 64
 322:	2c 93       	st	X, r18
 324:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <OPT2FLAG>
			PORTD = 0b10010000; //D5=Red; D2=Red
			mTimer(1000);	
			PORTD = 0b01100000; //D5=Green; D2=Green
			mTimer(1000);*/
		}
		if (OPT2FLAG){
 328:	22 23       	and	r18, r18
 32a:	31 f0       	breq	.+12     	; 0x338 <main+0x170>
 32c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <OPT2FLAG>
			OPT2FLAG=0x00;
 330:	f7 01       	movw	r30, r14
			ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
 332:	20 81       	ld	r18, Z
 334:	20 64       	ori	r18, 0x40	; 64
 336:	20 83       	st	Z, r18
 338:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ADC_RESET>
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
 33c:	22 23       	and	r18, r18
 33e:	09 f4       	brne	.+2      	; 0x342 <main+0x17a>
 340:	88 cf       	rjmp	.-240    	; 0x252 <main+0x8a>
 342:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ADC_RESET>
			oldADCResult=0xFFFF;
			ADC_RESET=0x00;
 346:	18 b8       	out	0x08, r1	; 8
			PORTC=0x00;
 348:	8b b1       	in	r24, 0x0b	; 11
			PORTD&=0x0F;
 34a:	8f 70       	andi	r24, 0x0F	; 15
 34c:	8b b9       	out	0x0b, r24	; 11
 34e:	8d 2d       	mov	r24, r13
			OPT2FLAG=0x00;
			ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
		}
		//mTimer(10) //--ODA Edit;Does mTimer break with other interrupts engaged?
		if (ADC_RESET){
			oldADCResult=0xFFFF;
 350:	90 2f       	mov	r25, r16
 352:	7f cf       	rjmp	.-258    	; 0x252 <main+0x8a>

00000354 <__vector_3>:
 354:	1f 92       	push	r1
	}
	TCCR2B&=0b11111000; //disable timer 2
}
/**********INTERRUPT SERVICE ROUTINES**********/
/*sensor 3: 2nt Optical Reflective, Active HIGH starts AD conversion*/
ISR(INT2_vect){ //unused --ODA
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	OPT2FLAG=0x01;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <OPT2FLAG>
}
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_29>:
ISR(ADC_vect){ //ADCResult is left-adjusted (i.e. the upper most byte is taken; 2 LSB' are discarded)
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
	ADCResult = ADCL;
 384:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCResult+0x1>
 38e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResult>
	ADCResult += ADCH << 8;
 392:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 396:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ADCResult>
 39a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ADCResult+0x1>
 39e:	89 2f       	mov	r24, r25
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	98 2f       	mov	r25, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADCResult+0x1>
 3ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADCResult>
	ADCResultFlag = 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCResultFlag>
}
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	3f 91       	pop	r19
 3be:	2f 91       	pop	r18
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_7>:
ISR(INT6_vect){
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	0f 92       	push	r0
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	ADC_RESET=1;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ADC_RESET>
	mTimer2(25); //debounce period
 3f6:	89 e1       	ldi	r24, 0x19	; 25
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	c8 de       	rcall	.-624    	; 0x18c <mTimer2>
	while((PINE & 0b01000000)==0b01000000)mTimer2(25); //while switch is still pressed
 3fc:	66 9b       	sbis	0x0c, 6	; 12
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 400:	89 e1       	ldi	r24, 0x19	; 25
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	c3 de       	rcall	.-634    	; 0x18c <mTimer2>
 406:	66 99       	sbic	0x0c, 6	; 12
 408:	fb cf       	rjmp	.-10     	; 0x400 <__LOCK_REGION_LENGTH__>
}
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0b be       	out	0x3b, r0	; 59
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__fixunssfsi>:
 430:	70 d0       	rcall	.+224    	; 0x512 <__fp_splitA>
 432:	88 f0       	brcs	.+34     	; 0x456 <__fixunssfsi+0x26>
 434:	9f 57       	subi	r25, 0x7F	; 127
 436:	90 f0       	brcs	.+36     	; 0x45c <__fixunssfsi+0x2c>
 438:	b9 2f       	mov	r27, r25
 43a:	99 27       	eor	r25, r25
 43c:	b7 51       	subi	r27, 0x17	; 23
 43e:	a0 f0       	brcs	.+40     	; 0x468 <__fixunssfsi+0x38>
 440:	d1 f0       	breq	.+52     	; 0x476 <__fixunssfsi+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	1a f0       	brmi	.+6      	; 0x452 <__fixunssfsi+0x22>
 44c:	ba 95       	dec	r27
 44e:	c9 f7       	brne	.-14     	; 0x442 <__fixunssfsi+0x12>
 450:	12 c0       	rjmp	.+36     	; 0x476 <__fixunssfsi+0x46>
 452:	b1 30       	cpi	r27, 0x01	; 1
 454:	81 f0       	breq	.+32     	; 0x476 <__fixunssfsi+0x46>
 456:	77 d0       	rcall	.+238    	; 0x546 <__fp_zero>
 458:	b1 e0       	ldi	r27, 0x01	; 1
 45a:	08 95       	ret
 45c:	74 c0       	rjmp	.+232    	; 0x546 <__fp_zero>
 45e:	67 2f       	mov	r22, r23
 460:	78 2f       	mov	r23, r24
 462:	88 27       	eor	r24, r24
 464:	b8 5f       	subi	r27, 0xF8	; 248
 466:	39 f0       	breq	.+14     	; 0x476 <__fixunssfsi+0x46>
 468:	b9 3f       	cpi	r27, 0xF9	; 249
 46a:	cc f3       	brlt	.-14     	; 0x45e <__fixunssfsi+0x2e>
 46c:	86 95       	lsr	r24
 46e:	77 95       	ror	r23
 470:	67 95       	ror	r22
 472:	b3 95       	inc	r27
 474:	d9 f7       	brne	.-10     	; 0x46c <__fixunssfsi+0x3c>
 476:	3e f4       	brtc	.+14     	; 0x486 <__fixunssfsi+0x56>
 478:	90 95       	com	r25
 47a:	80 95       	com	r24
 47c:	70 95       	com	r23
 47e:	61 95       	neg	r22
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__floatunsisf>:
 488:	e8 94       	clt
 48a:	09 c0       	rjmp	.+18     	; 0x49e <__floatsisf+0x12>

0000048c <__floatsisf>:
 48c:	97 fb       	bst	r25, 7
 48e:	3e f4       	brtc	.+14     	; 0x49e <__floatsisf+0x12>
 490:	90 95       	com	r25
 492:	80 95       	com	r24
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	99 23       	and	r25, r25
 4a0:	a9 f0       	breq	.+42     	; 0x4cc <__floatsisf+0x40>
 4a2:	f9 2f       	mov	r31, r25
 4a4:	96 e9       	ldi	r25, 0x96	; 150
 4a6:	bb 27       	eor	r27, r27
 4a8:	93 95       	inc	r25
 4aa:	f6 95       	lsr	r31
 4ac:	87 95       	ror	r24
 4ae:	77 95       	ror	r23
 4b0:	67 95       	ror	r22
 4b2:	b7 95       	ror	r27
 4b4:	f1 11       	cpse	r31, r1
 4b6:	f8 cf       	rjmp	.-16     	; 0x4a8 <__floatsisf+0x1c>
 4b8:	fa f4       	brpl	.+62     	; 0x4f8 <__floatsisf+0x6c>
 4ba:	bb 0f       	add	r27, r27
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__floatsisf+0x36>
 4be:	60 ff       	sbrs	r22, 0
 4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <__floatsisf+0x6c>
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	8f 4f       	sbci	r24, 0xFF	; 255
 4c8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <__floatsisf+0x6c>
 4cc:	88 23       	and	r24, r24
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <__floatsisf+0x48>
 4d0:	96 e9       	ldi	r25, 0x96	; 150
 4d2:	11 c0       	rjmp	.+34     	; 0x4f6 <__floatsisf+0x6a>
 4d4:	77 23       	and	r23, r23
 4d6:	21 f0       	breq	.+8      	; 0x4e0 <__floatsisf+0x54>
 4d8:	9e e8       	ldi	r25, 0x8E	; 142
 4da:	87 2f       	mov	r24, r23
 4dc:	76 2f       	mov	r23, r22
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <__floatsisf+0x5e>
 4e0:	66 23       	and	r22, r22
 4e2:	71 f0       	breq	.+28     	; 0x500 <__floatsisf+0x74>
 4e4:	96 e8       	ldi	r25, 0x86	; 134
 4e6:	86 2f       	mov	r24, r22
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	2a f0       	brmi	.+10     	; 0x4f8 <__floatsisf+0x6c>
 4ee:	9a 95       	dec	r25
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	da f7       	brpl	.-10     	; 0x4ee <__floatsisf+0x62>
 4f8:	88 0f       	add	r24, r24
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	97 f9       	bld	r25, 7
 500:	08 95       	ret

00000502 <__fp_split3>:
 502:	57 fd       	sbrc	r21, 7
 504:	90 58       	subi	r25, 0x80	; 128
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	59 f0       	breq	.+22     	; 0x522 <__fp_splitA+0x10>
 50c:	5f 3f       	cpi	r21, 0xFF	; 255
 50e:	71 f0       	breq	.+28     	; 0x52c <__fp_splitA+0x1a>
 510:	47 95       	ror	r20

00000512 <__fp_splitA>:
 512:	88 0f       	add	r24, r24
 514:	97 fb       	bst	r25, 7
 516:	99 1f       	adc	r25, r25
 518:	61 f0       	breq	.+24     	; 0x532 <__fp_splitA+0x20>
 51a:	9f 3f       	cpi	r25, 0xFF	; 255
 51c:	79 f0       	breq	.+30     	; 0x53c <__fp_splitA+0x2a>
 51e:	87 95       	ror	r24
 520:	08 95       	ret
 522:	12 16       	cp	r1, r18
 524:	13 06       	cpc	r1, r19
 526:	14 06       	cpc	r1, r20
 528:	55 1f       	adc	r21, r21
 52a:	f2 cf       	rjmp	.-28     	; 0x510 <__fp_split3+0xe>
 52c:	46 95       	lsr	r20
 52e:	f1 df       	rcall	.-30     	; 0x512 <__fp_splitA>
 530:	08 c0       	rjmp	.+16     	; 0x542 <__fp_splitA+0x30>
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	99 1f       	adc	r25, r25
 53a:	f1 cf       	rjmp	.-30     	; 0x51e <__fp_splitA+0xc>
 53c:	86 95       	lsr	r24
 53e:	71 05       	cpc	r23, r1
 540:	61 05       	cpc	r22, r1
 542:	08 94       	sec
 544:	08 95       	ret

00000546 <__fp_zero>:
 546:	e8 94       	clt

00000548 <__fp_szero>:
 548:	bb 27       	eor	r27, r27
 54a:	66 27       	eor	r22, r22
 54c:	77 27       	eor	r23, r23
 54e:	cb 01       	movw	r24, r22
 550:	97 f9       	bld	r25, 7
 552:	08 95       	ret

00000554 <__mulsf3>:
 554:	0b d0       	rcall	.+22     	; 0x56c <__mulsf3x>
 556:	78 c0       	rjmp	.+240    	; 0x648 <__fp_round>
 558:	69 d0       	rcall	.+210    	; 0x62c <__fp_pscA>
 55a:	28 f0       	brcs	.+10     	; 0x566 <__mulsf3+0x12>
 55c:	6e d0       	rcall	.+220    	; 0x63a <__fp_pscB>
 55e:	18 f0       	brcs	.+6      	; 0x566 <__mulsf3+0x12>
 560:	95 23       	and	r25, r21
 562:	09 f0       	breq	.+2      	; 0x566 <__mulsf3+0x12>
 564:	5a c0       	rjmp	.+180    	; 0x61a <__fp_inf>
 566:	5f c0       	rjmp	.+190    	; 0x626 <__fp_nan>
 568:	11 24       	eor	r1, r1
 56a:	ee cf       	rjmp	.-36     	; 0x548 <__fp_szero>

0000056c <__mulsf3x>:
 56c:	ca df       	rcall	.-108    	; 0x502 <__fp_split3>
 56e:	a0 f3       	brcs	.-24     	; 0x558 <__mulsf3+0x4>

00000570 <__mulsf3_pse>:
 570:	95 9f       	mul	r25, r21
 572:	d1 f3       	breq	.-12     	; 0x568 <__mulsf3+0x14>
 574:	95 0f       	add	r25, r21
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	55 1f       	adc	r21, r21
 57a:	62 9f       	mul	r22, r18
 57c:	f0 01       	movw	r30, r0
 57e:	72 9f       	mul	r23, r18
 580:	bb 27       	eor	r27, r27
 582:	f0 0d       	add	r31, r0
 584:	b1 1d       	adc	r27, r1
 586:	63 9f       	mul	r22, r19
 588:	aa 27       	eor	r26, r26
 58a:	f0 0d       	add	r31, r0
 58c:	b1 1d       	adc	r27, r1
 58e:	aa 1f       	adc	r26, r26
 590:	64 9f       	mul	r22, r20
 592:	66 27       	eor	r22, r22
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	66 1f       	adc	r22, r22
 59a:	82 9f       	mul	r24, r18
 59c:	22 27       	eor	r18, r18
 59e:	b0 0d       	add	r27, r0
 5a0:	a1 1d       	adc	r26, r1
 5a2:	62 1f       	adc	r22, r18
 5a4:	73 9f       	mul	r23, r19
 5a6:	b0 0d       	add	r27, r0
 5a8:	a1 1d       	adc	r26, r1
 5aa:	62 1f       	adc	r22, r18
 5ac:	83 9f       	mul	r24, r19
 5ae:	a0 0d       	add	r26, r0
 5b0:	61 1d       	adc	r22, r1
 5b2:	22 1f       	adc	r18, r18
 5b4:	74 9f       	mul	r23, r20
 5b6:	33 27       	eor	r19, r19
 5b8:	a0 0d       	add	r26, r0
 5ba:	61 1d       	adc	r22, r1
 5bc:	23 1f       	adc	r18, r19
 5be:	84 9f       	mul	r24, r20
 5c0:	60 0d       	add	r22, r0
 5c2:	21 1d       	adc	r18, r1
 5c4:	82 2f       	mov	r24, r18
 5c6:	76 2f       	mov	r23, r22
 5c8:	6a 2f       	mov	r22, r26
 5ca:	11 24       	eor	r1, r1
 5cc:	9f 57       	subi	r25, 0x7F	; 127
 5ce:	50 40       	sbci	r21, 0x00	; 0
 5d0:	8a f0       	brmi	.+34     	; 0x5f4 <__mulsf3_pse+0x84>
 5d2:	e1 f0       	breq	.+56     	; 0x60c <__mulsf3_pse+0x9c>
 5d4:	88 23       	and	r24, r24
 5d6:	4a f0       	brmi	.+18     	; 0x5ea <__mulsf3_pse+0x7a>
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	bb 1f       	adc	r27, r27
 5de:	66 1f       	adc	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	88 1f       	adc	r24, r24
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <__mulsf3_pse+0x64>
 5ea:	9e 3f       	cpi	r25, 0xFE	; 254
 5ec:	51 05       	cpc	r21, r1
 5ee:	70 f0       	brcs	.+28     	; 0x60c <__mulsf3_pse+0x9c>
 5f0:	14 c0       	rjmp	.+40     	; 0x61a <__fp_inf>
 5f2:	aa cf       	rjmp	.-172    	; 0x548 <__fp_szero>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	ec f3       	brlt	.-6      	; 0x5f2 <__mulsf3_pse+0x82>
 5f8:	98 3e       	cpi	r25, 0xE8	; 232
 5fa:	dc f3       	brlt	.-10     	; 0x5f2 <__mulsf3_pse+0x82>
 5fc:	86 95       	lsr	r24
 5fe:	77 95       	ror	r23
 600:	67 95       	ror	r22
 602:	b7 95       	ror	r27
 604:	f7 95       	ror	r31
 606:	e7 95       	ror	r30
 608:	9f 5f       	subi	r25, 0xFF	; 255
 60a:	c1 f7       	brne	.-16     	; 0x5fc <__mulsf3_pse+0x8c>
 60c:	fe 2b       	or	r31, r30
 60e:	88 0f       	add	r24, r24
 610:	91 1d       	adc	r25, r1
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret

0000061a <__fp_inf>:
 61a:	97 f9       	bld	r25, 7
 61c:	9f 67       	ori	r25, 0x7F	; 127
 61e:	80 e8       	ldi	r24, 0x80	; 128
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	08 95       	ret

00000626 <__fp_nan>:
 626:	9f ef       	ldi	r25, 0xFF	; 255
 628:	80 ec       	ldi	r24, 0xC0	; 192
 62a:	08 95       	ret

0000062c <__fp_pscA>:
 62c:	00 24       	eor	r0, r0
 62e:	0a 94       	dec	r0
 630:	16 16       	cp	r1, r22
 632:	17 06       	cpc	r1, r23
 634:	18 06       	cpc	r1, r24
 636:	09 06       	cpc	r0, r25
 638:	08 95       	ret

0000063a <__fp_pscB>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	12 16       	cp	r1, r18
 640:	13 06       	cpc	r1, r19
 642:	14 06       	cpc	r1, r20
 644:	05 06       	cpc	r0, r21
 646:	08 95       	ret

00000648 <__fp_round>:
 648:	09 2e       	mov	r0, r25
 64a:	03 94       	inc	r0
 64c:	00 0c       	add	r0, r0
 64e:	11 f4       	brne	.+4      	; 0x654 <__fp_round+0xc>
 650:	88 23       	and	r24, r24
 652:	52 f0       	brmi	.+20     	; 0x668 <__fp_round+0x20>
 654:	bb 0f       	add	r27, r27
 656:	40 f4       	brcc	.+16     	; 0x668 <__fp_round+0x20>
 658:	bf 2b       	or	r27, r31
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0x18>
 65c:	60 ff       	sbrs	r22, 0
 65e:	04 c0       	rjmp	.+8      	; 0x668 <__fp_round+0x20>
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
