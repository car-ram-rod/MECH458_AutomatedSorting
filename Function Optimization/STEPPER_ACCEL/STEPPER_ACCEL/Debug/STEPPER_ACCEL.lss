
STEPPER_ACCEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000560  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  000005fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001328  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0c  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  00003646  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	69 c2       	rjmp	.+1234   	; 0x4f0 <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e6       	ldi	r30, 0x60	; 96
  ac:	f5 e0       	ldi	r31, 0x05	; 5
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 30       	cpi	r26, 0x0C	; 12
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	61 d1       	rcall	.+706    	; 0x392 <main>
  d0:	45 c2       	rjmp	.+1162   	; 0x55c <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initTimer1>:
#include "interrupt.h"
void initTimer1 (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	/*set Waveform Generation mode to Clear Timer*/
	/*set WGM bits to 0100*/
	/*note WGM is spread over two registers*/
	TCCR1B |= _BV(WGM12);
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	/*set Output Compare Register for 1000 cycles (1ms)*/
	OCR1A = 0x03E8;
  de:	88 ee       	ldi	r24, 0xE8	; 232
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f2:	08 95       	ret

000000f4 <mTimer>:
	return;
}
void mTimer(int count){ // delay microsecond
  f4:	ac 01       	movw	r20, r24
	int i = 0; //initialize loop counter
	/*Enable the output compare interrupt enable*/
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: becomes
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	93 60       	ori	r25, 0x03	; 3
  fe:	90 83       	st	Z, r25
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
 100:	b1 9a       	sbi	0x16, 1	; 22
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
	return;
}
void mTimer(int count){ // delay microsecond
	int i = 0; //initialize loop counter
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 106:	05 c0       	rjmp	.+10     	; 0x112 <mTimer+0x1e>
		if ((TIFR1 & 0x02) == 0x02){
 108:	b1 9b       	sbis	0x16, 1	; 22
 10a:	fe cf       	rjmp	.-4      	; 0x108 <mTimer+0x14>
			//clear interrupt flag by WRITING a ONE to the bit
			TIFR1 |= _BV(OCF1A);
 10c:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop counter
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 112:	24 17       	cp	r18, r20
 114:	35 07       	cpc	r19, r21
 116:	1c f4       	brge	.+6      	; 0x11e <mTimer+0x2a>
		if ((TIFR1 & 0x02) == 0x02){
 118:	b1 9b       	sbis	0x16, 1	; 22
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <mTimer+0x14>
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <mTimer+0x18>
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <timer2Init>:
	return;
} //mTimer
/*at a clock frequency of 8MHz this is a 1.024ms timer for each while loop cycle*/
/*e.g. (32/8MHz)x(0xFF=256)=0.001024s=1.024ms*/
void timer2Init(void){
	TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
 12a:	e0 e7       	ldi	r30, 0x70	; 112
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	81 60       	ori	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
 134:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	//TOP=0xFF; Update is immediate
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 138:	e1 eb       	ldi	r30, 0xB1	; 177
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <mTimer2>:
}
void mTimer2(int count){
	int i=0;
	TCNT2=0x00; //set timer equal to zero
 144:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 148:	b8 99       	sbic	0x17, 0	; 23
 14a:	b8 9a       	sbi	0x17, 0	; 23
	TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
	//TOP=0xFF; Update is immediate
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
}
void mTimer2(int count){
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	05 c0       	rjmp	.+10     	; 0x15c <mTimer2+0x18>
	int i=0;
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 152:	b8 9b       	sbis	0x17, 0	; 23
 154:	fe cf       	rjmp	.-4      	; 0x152 <mTimer2+0xe>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 156:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
}
void mTimer2(int count){
	int i=0;
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 15c:	28 17       	cp	r18, r24
 15e:	39 07       	cpc	r19, r25
 160:	1c f4       	brge	.+6      	; 0x168 <mTimer2+0x24>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 162:	b8 9b       	sbis	0x17, 0	; 23
 164:	f6 cf       	rjmp	.-20     	; 0x152 <mTimer2+0xe>
 166:	f7 cf       	rjmp	.-18     	; 0x156 <mTimer2+0x12>
 168:	08 95       	ret

0000016a <stepperControl>:
	if(((PINB & 0b00001100) >> 2) != d){ //if current direction doesn't match new direction
		PORTB &= 0b11110011; //stop motor
		PORTB |= 0b0011 | ((d & 0b11) << 2); //start motor in specified direction
	}
	dutyCycle = s*2.55;
	OCR0A = dutyCycle;//set duty cycle
 16a:	2f 92       	push	r2
 16c:	3f 92       	push	r3
 16e:	4f 92       	push	r4
 170:	5f 92       	push	r5
 172:	6f 92       	push	r6
 174:	7f 92       	push	r7
 176:	8f 92       	push	r8
 178:	9f 92       	push	r9
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	00 d0       	rcall	.+0      	; 0x190 <stepperControl+0x26>
 190:	00 d0       	rcall	.+0      	; 0x192 <stepperControl+0x28>
 192:	00 d0       	rcall	.+0      	; 0x194 <stepperControl+0x2a>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	2c 01       	movw	r4, r24
 19a:	7a 83       	std	Y+2, r23	; 0x02
 19c:	69 83       	std	Y+1, r22	; 0x01
 19e:	5c 83       	std	Y+4, r21	; 0x04
 1a0:	4b 83       	std	Y+3, r20	; 0x03
 1a2:	fa 01       	movw	r30, r20
 1a4:	01 90       	ld	r0, Z+
 1a6:	f0 81       	ld	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	fe 83       	std	Y+6, r31	; 0x06
 1ac:	ed 83       	std	Y+5, r30	; 0x05
 1ae:	99 23       	and	r25, r25
 1b0:	24 f4       	brge	.+8      	; 0x1ba <stepperControl+0x50>
 1b2:	88 27       	eor	r24, r24
 1b4:	99 27       	eor	r25, r25
 1b6:	84 19       	sub	r24, r4
 1b8:	95 09       	sbc	r25, r5
 1ba:	7c 01       	movw	r14, r24
 1bc:	80 31       	cpi	r24, 0x10	; 16
 1be:	91 05       	cpc	r25, r1
 1c0:	38 f4       	brcc	.+14     	; 0x1d0 <stepperControl+0x66>
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	28 2f       	mov	r18, r24
 1c8:	94 e1       	ldi	r25, 0x14	; 20
 1ca:	29 2e       	mov	r2, r25
 1cc:	28 1a       	sub	r2, r24
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <stepperControl+0x70>
 1d0:	28 e0       	ldi	r18, 0x08	; 8
 1d2:	0f 2e       	mov	r0, r31
 1d4:	fc e0       	ldi	r31, 0x0C	; 12
 1d6:	2f 2e       	mov	r2, r31
 1d8:	f0 2d       	mov	r31, r0
 1da:	55 20       	and	r5, r5
 1dc:	1c f4       	brge	.+6      	; 0x1e4 <stepperControl+0x7a>
 1de:	9f ef       	ldi	r25, 0xFF	; 255
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <stepperControl+0x7e>
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	e1 14       	cp	r14, r1
 1ea:	f1 04       	cpc	r15, r1
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <stepperControl+0x86>
 1ee:	49 c0       	rjmp	.+146    	; 0x282 <stepperControl+0x118>
 1f0:	69 2e       	mov	r6, r25
 1f2:	78 2e       	mov	r7, r24
 1f4:	89 2e       	mov	r8, r25
 1f6:	98 2e       	mov	r9, r24
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f4 e1       	ldi	r31, 0x14	; 20
 1fc:	3f 2e       	mov	r3, r31
 1fe:	f0 2d       	mov	r31, r0
 200:	01 e0       	ldi	r16, 0x01	; 1
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	57 01       	movw	r10, r14
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	a8 1a       	sub	r10, r24
 20a:	b1 08       	sbc	r11, r1
 20c:	c2 2e       	mov	r12, r18
 20e:	d1 2c       	mov	r13, r1
 210:	c5 01       	movw	r24, r10
 212:	80 1b       	sub	r24, r16
 214:	91 0b       	sbc	r25, r17
 216:	c8 16       	cp	r12, r24
 218:	d9 06       	cpc	r13, r25
 21a:	20 f4       	brcc	.+8      	; 0x224 <stepperControl+0xba>
 21c:	23 14       	cp	r2, r3
 21e:	38 f4       	brcc	.+14     	; 0x22e <stepperControl+0xc4>
 220:	3a 94       	dec	r3
 222:	0b c0       	rjmp	.+22     	; 0x23a <stepperControl+0xd0>
 224:	93 e1       	ldi	r25, 0x13	; 19
 226:	93 15       	cp	r25, r3
 228:	20 f0       	brcs	.+8      	; 0x232 <stepperControl+0xc8>
 22a:	33 94       	inc	r3
 22c:	06 c0       	rjmp	.+12     	; 0x23a <stepperControl+0xd0>
 22e:	32 2c       	mov	r3, r2
 230:	04 c0       	rjmp	.+8      	; 0x23a <stepperControl+0xd0>
 232:	0f 2e       	mov	r0, r31
 234:	f4 e1       	ldi	r31, 0x14	; 20
 236:	3f 2e       	mov	r3, r31
 238:	f0 2d       	mov	r31, r0
 23a:	ed 81       	ldd	r30, Y+5	; 0x05
 23c:	fe 81       	ldd	r31, Y+6	; 0x06
 23e:	e8 0d       	add	r30, r8
 240:	f9 1d       	adc	r31, r9
 242:	fe 83       	std	Y+6, r31	; 0x06
 244:	ed 83       	std	Y+5, r30	; 0x05
 246:	e4 30       	cpi	r30, 0x04	; 4
 248:	f1 05       	cpc	r31, r1
 24a:	39 f0       	breq	.+14     	; 0x25a <stepperControl+0xf0>
 24c:	31 96       	adiw	r30, 0x01	; 1
 24e:	39 f4       	brne	.+14     	; 0x25e <stepperControl+0xf4>
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9e 83       	std	Y+6, r25	; 0x06
 256:	8d 83       	std	Y+5, r24	; 0x05
 258:	02 c0       	rjmp	.+4      	; 0x25e <stepperControl+0xf4>
 25a:	1e 82       	std	Y+6, r1	; 0x06
 25c:	1d 82       	std	Y+5, r1	; 0x05
 25e:	ed 81       	ldd	r30, Y+5	; 0x05
 260:	fe 81       	ldd	r31, Y+6	; 0x06
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e0 50       	subi	r30, 0x00	; 0
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 81       	ld	r24, Z
 26c:	82 b9       	out	0x02, r24	; 2
 26e:	83 2d       	mov	r24, r3
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	68 df       	rcall	.-304    	; 0x144 <mTimer2>
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
 278:	86 0c       	add	r8, r6
 27a:	97 1c       	adc	r9, r7
 27c:	e0 16       	cp	r14, r16
 27e:	f1 06       	cpc	r15, r17
 280:	38 f6       	brcc	.-114    	; 0x210 <stepperControl+0xa6>
 282:	8d 81       	ldd	r24, Y+5	; 0x05
 284:	9e 81       	ldd	r25, Y+6	; 0x06
 286:	eb 81       	ldd	r30, Y+3	; 0x03
 288:	fc 81       	ldd	r31, Y+4	; 0x04
 28a:	91 83       	std	Z+1, r25	; 0x01
 28c:	80 83       	st	Z, r24
 28e:	e9 81       	ldd	r30, Y+1	; 0x01
 290:	fa 81       	ldd	r31, Y+2	; 0x02
 292:	80 81       	ld	r24, Z
 294:	91 81       	ldd	r25, Z+1	; 0x01
 296:	84 0d       	add	r24, r4
 298:	95 1d       	adc	r25, r5
 29a:	68 ec       	ldi	r22, 0xC8	; 200
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	37 d1       	rcall	.+622    	; 0x50e <__divmodhi4>
 2a0:	91 83       	std	Z+1, r25	; 0x01
 2a2:	80 83       	st	Z, r24
 2a4:	26 96       	adiw	r28, 0x06	; 6
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	7f 90       	pop	r7
 2ca:	6f 90       	pop	r6
 2cc:	5f 90       	pop	r5
 2ce:	4f 90       	pop	r4
 2d0:	3f 90       	pop	r3
 2d2:	2f 90       	pop	r2
 2d4:	08 95       	ret

000002d6 <stepperHome>:
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	8c 01       	movw	r16, r24
 2e8:	7b 01       	movw	r14, r22
 2ea:	12 b8       	out	0x02, r1	; 2
 2ec:	c0 e0       	ldi	r28, 0x00	; 0
 2ee:	d0 e0       	ldi	r29, 0x00	; 0
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <stepperHome+0x3c>
 2f2:	fe 01       	movw	r30, r28
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e0 50       	subi	r30, 0x00	; 0
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	82 b9       	out	0x02, r24	; 2
 300:	84 e1       	ldi	r24, 0x14	; 20
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	f7 de       	rcall	.-530    	; 0xf4 <mTimer>
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	c4 30       	cpi	r28, 0x04	; 4
 30a:	d1 05       	cpc	r29, r1
 30c:	11 f4       	brne	.+4      	; 0x312 <stepperHome+0x3c>
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <HallEffect>
 316:	88 23       	and	r24, r24
 318:	61 f3       	breq	.-40     	; 0x2f2 <stepperHome+0x1c>
 31a:	ee 98       	cbi	0x1d, 6	; 29
 31c:	68 94       	set
 31e:	cc 24       	eor	r12, r12
 320:	c3 f8       	bld	r12, 3
 322:	d1 2c       	mov	r13, r1
 324:	21 96       	adiw	r28, 0x01	; 1
 326:	c4 30       	cpi	r28, 0x04	; 4
 328:	d1 05       	cpc	r29, r1
 32a:	39 f0       	breq	.+14     	; 0x33a <stepperHome+0x64>
 32c:	cf 3f       	cpi	r28, 0xFF	; 255
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	d8 07       	cpc	r29, r24
 332:	29 f4       	brne	.+10     	; 0x33e <stepperHome+0x68>
 334:	c3 e0       	ldi	r28, 0x03	; 3
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <stepperHome+0x68>
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	fe 01       	movw	r30, r28
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e0 50       	subi	r30, 0x00	; 0
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	80 81       	ld	r24, Z
 34a:	82 b9       	out	0x02, r24	; 2
 34c:	84 e1       	ldi	r24, 0x14	; 20
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	d1 de       	rcall	.-606    	; 0xf4 <mTimer>
 352:	e1 e0       	ldi	r30, 0x01	; 1
 354:	ce 1a       	sub	r12, r30
 356:	d1 08       	sbc	r13, r1
 358:	29 f7       	brne	.-54     	; 0x324 <stepperHome+0x4e>
 35a:	f7 01       	movw	r30, r14
 35c:	d1 83       	std	Z+1, r29	; 0x01
 35e:	c0 83       	st	Z, r28
 360:	cc 0f       	add	r28, r28
 362:	dd 1f       	adc	r29, r29
 364:	c0 50       	subi	r28, 0x00	; 0
 366:	df 4f       	sbci	r29, 0xFF	; 255
 368:	88 81       	ld	r24, Y
 36a:	82 b9       	out	0x02, r24	; 2
 36c:	f8 01       	movw	r30, r16
 36e:	11 82       	std	Z+1, r1	; 0x01
 370:	10 82       	st	Z, r1
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <setupISR>:
 384:	ee 9a       	sbi	0x1d, 6	; 29
 386:	ea e6       	ldi	r30, 0x6A	; 106
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	80 83       	st	Z, r24
 390:	08 95       	ret

00000392 <main>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	00 d0       	rcall	.+0      	; 0x398 <main+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <main+0x8>
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	1a 82       	std	Y+2, r1	; 0x02
 3a0:	19 82       	std	Y+1, r1	; 0x01
 3a2:	1c 82       	std	Y+4, r1	; 0x04
 3a4:	1b 82       	std	Y+3, r1	; 0x03
 3a6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <HallEffect>
 3aa:	f8 94       	cli
 3ac:	eb df       	rcall	.-42     	; 0x384 <setupISR>
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	81 b9       	out	0x01, r24	; 1
 3b2:	87 b9       	out	0x07, r24	; 7
 3b4:	1d b8       	out	0x0d, r1	; 13
 3b6:	10 ba       	out	0x10, r1	; 16
 3b8:	8d de       	rcall	.-742    	; 0xd4 <initTimer1>
 3ba:	b7 de       	rcall	.-658    	; 0x12a <timer2Init>
 3bc:	78 94       	sei
 3be:	88 ee       	ldi	r24, 0xE8	; 232
 3c0:	93 e0       	ldi	r25, 0x03	; 3
 3c2:	98 de       	rcall	.-720    	; 0xf4 <mTimer>
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	88 ee       	ldi	r24, 0xE8	; 232
 3ca:	93 e0       	ldi	r25, 0x03	; 3
 3cc:	93 de       	rcall	.-730    	; 0xf4 <mTimer>
 3ce:	eb 81       	ldd	r30, Y+3	; 0x03
 3d0:	fc 81       	ldd	r31, Y+4	; 0x04
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	e0 50       	subi	r30, 0x00	; 0
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	80 81       	ld	r24, Z
 3dc:	88 b9       	out	0x08, r24	; 8
 3de:	88 ee       	ldi	r24, 0xE8	; 232
 3e0:	93 e0       	ldi	r25, 0x03	; 3
 3e2:	88 de       	rcall	.-752    	; 0xf4 <mTimer>
 3e4:	ee 24       	eor	r14, r14
 3e6:	e3 94       	inc	r14
 3e8:	f1 2c       	mov	r15, r1
 3ea:	ee 9a       	sbi	0x1d, 6	; 29
 3ec:	00 e0       	ldi	r16, 0x00	; 0
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	c7 01       	movw	r24, r14
 3f2:	00 2e       	mov	r0, r16
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <main+0x68>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <main+0x64>
 3fe:	88 b9       	out	0x08, r24	; 8
 400:	88 ec       	ldi	r24, 0xC8	; 200
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	77 de       	rcall	.-786    	; 0xf4 <mTimer>
 406:	0f 5f       	subi	r16, 0xFF	; 255
 408:	1f 4f       	sbci	r17, 0xFF	; 255
 40a:	08 30       	cpi	r16, 0x08	; 8
 40c:	11 05       	cpc	r17, r1
 40e:	81 f7       	brne	.-32     	; 0x3f0 <main+0x5e>
 410:	06 e0       	ldi	r16, 0x06	; 6
 412:	10 e0       	ldi	r17, 0x00	; 0
 414:	c7 01       	movw	r24, r14
 416:	00 2e       	mov	r0, r16
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	88 b9       	out	0x08, r24	; 8
 424:	88 ec       	ldi	r24, 0xC8	; 200
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	65 de       	rcall	.-822    	; 0xf4 <mTimer>
 42a:	01 50       	subi	r16, 0x01	; 1
 42c:	11 09       	sbc	r17, r1
 42e:	90 f7       	brcc	.-28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 430:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <HallEffect>
 434:	be 01       	movw	r22, r28
 436:	6d 5f       	subi	r22, 0xFD	; 253
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	4b df       	rcall	.-362    	; 0x2d6 <stepperHome>
 440:	80 ed       	ldi	r24, 0xD0	; 208
 442:	97 e0       	ldi	r25, 0x07	; 7
 444:	57 de       	rcall	.-850    	; 0xf4 <mTimer>
 446:	ae 01       	movw	r20, r28
 448:	4d 5f       	subi	r20, 0xFD	; 253
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	81 e1       	ldi	r24, 0x11	; 17
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	89 de       	rcall	.-750    	; 0x16a <stepperControl>
 458:	80 ed       	ldi	r24, 0xD0	; 208
 45a:	97 e0       	ldi	r25, 0x07	; 7
 45c:	4b de       	rcall	.-874    	; 0xf4 <mTimer>
 45e:	ae 01       	movw	r20, r28
 460:	4d 5f       	subi	r20, 0xFD	; 253
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	be 01       	movw	r22, r28
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	81 e2       	ldi	r24, 0x21	; 33
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	7d de       	rcall	.-774    	; 0x16a <stepperControl>
 470:	80 ed       	ldi	r24, 0xD0	; 208
 472:	97 e0       	ldi	r25, 0x07	; 7
 474:	3f de       	rcall	.-898    	; 0xf4 <mTimer>
 476:	ae 01       	movw	r20, r28
 478:	4d 5f       	subi	r20, 0xFD	; 253
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	be 01       	movw	r22, r28
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	84 e6       	ldi	r24, 0x64	; 100
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	71 de       	rcall	.-798    	; 0x16a <stepperControl>
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	97 e0       	ldi	r25, 0x07	; 7
 48c:	33 de       	rcall	.-922    	; 0xf4 <mTimer>
 48e:	ae 01       	movw	r20, r28
 490:	4d 5f       	subi	r20, 0xFD	; 253
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	be 01       	movw	r22, r28
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8c e9       	ldi	r24, 0x9C	; 156
 49c:	9f ef       	ldi	r25, 0xFF	; 255
 49e:	65 de       	rcall	.-822    	; 0x16a <stepperControl>
 4a0:	80 ed       	ldi	r24, 0xD0	; 208
 4a2:	97 e0       	ldi	r25, 0x07	; 7
 4a4:	27 de       	rcall	.-946    	; 0xf4 <mTimer>
 4a6:	ae 01       	movw	r20, r28
 4a8:	4d 5f       	subi	r20, 0xFD	; 253
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f ed       	ldi	r24, 0xDF	; 223
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	59 de       	rcall	.-846    	; 0x16a <stepperControl>
 4b8:	80 ed       	ldi	r24, 0xD0	; 208
 4ba:	97 e0       	ldi	r25, 0x07	; 7
 4bc:	1b de       	rcall	.-970    	; 0xf4 <mTimer>
 4be:	ae 01       	movw	r20, r28
 4c0:	4d 5f       	subi	r20, 0xFD	; 253
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	be 01       	movw	r22, r28
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f ed       	ldi	r24, 0xDF	; 223
 4cc:	9f ef       	ldi	r25, 0xFF	; 255
 4ce:	4d de       	rcall	.-870    	; 0x16a <stepperControl>
 4d0:	80 ed       	ldi	r24, 0xD0	; 208
 4d2:	97 e0       	ldi	r25, 0x07	; 7
 4d4:	0f de       	rcall	.-994    	; 0xf4 <mTimer>
 4d6:	ae 01       	movw	r20, r28
 4d8:	4d 5f       	subi	r20, 0xFD	; 253
 4da:	5f 4f       	sbci	r21, 0xFF	; 255
 4dc:	be 01       	movw	r22, r28
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8c e9       	ldi	r24, 0x9C	; 156
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	41 de       	rcall	.-894    	; 0x16a <stepperControl>
 4e8:	80 ed       	ldi	r24, 0xD0	; 208
 4ea:	97 e0       	ldi	r25, 0x07	; 7
 4ec:	03 de       	rcall	.-1018   	; 0xf4 <mTimer>
 4ee:	7d cf       	rjmp	.-262    	; 0x3ea <main+0x58>

000004f0 <__vector_7>:
ISR(INT2_vect){
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	ADCSRA |= _BV(ADSC);
}
*/
ISR(INT6_vect){ //Active low for hall effect sensor on PE4
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	8f 93       	push	r24
	HallEffect=0x01;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <HallEffect>
}
 502:	8f 91       	pop	r24
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__divmodhi4>:
 50e:	97 fb       	bst	r25, 7
 510:	07 2e       	mov	r0, r23
 512:	16 f4       	brtc	.+4      	; 0x518 <__divmodhi4+0xa>
 514:	00 94       	com	r0
 516:	06 d0       	rcall	.+12     	; 0x524 <__divmodhi4_neg1>
 518:	77 fd       	sbrc	r23, 7
 51a:	08 d0       	rcall	.+16     	; 0x52c <__divmodhi4_neg2>
 51c:	0b d0       	rcall	.+22     	; 0x534 <__udivmodhi4>
 51e:	07 fc       	sbrc	r0, 7
 520:	05 d0       	rcall	.+10     	; 0x52c <__divmodhi4_neg2>
 522:	3e f4       	brtc	.+14     	; 0x532 <__divmodhi4_exit>

00000524 <__divmodhi4_neg1>:
 524:	90 95       	com	r25
 526:	81 95       	neg	r24
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__divmodhi4_neg2>:
 52c:	70 95       	com	r23
 52e:	61 95       	neg	r22
 530:	7f 4f       	sbci	r23, 0xFF	; 255

00000532 <__divmodhi4_exit>:
 532:	08 95       	ret

00000534 <__udivmodhi4>:
 534:	aa 1b       	sub	r26, r26
 536:	bb 1b       	sub	r27, r27
 538:	51 e1       	ldi	r21, 0x11	; 17
 53a:	07 c0       	rjmp	.+14     	; 0x54a <__udivmodhi4_ep>

0000053c <__udivmodhi4_loop>:
 53c:	aa 1f       	adc	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	a6 17       	cp	r26, r22
 542:	b7 07       	cpc	r27, r23
 544:	10 f0       	brcs	.+4      	; 0x54a <__udivmodhi4_ep>
 546:	a6 1b       	sub	r26, r22
 548:	b7 0b       	sbc	r27, r23

0000054a <__udivmodhi4_ep>:
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	5a 95       	dec	r21
 550:	a9 f7       	brne	.-22     	; 0x53c <__udivmodhi4_loop>
 552:	80 95       	com	r24
 554:	90 95       	com	r25
 556:	bc 01       	movw	r22, r24
 558:	cd 01       	movw	r24, r26
 55a:	08 95       	ret

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
