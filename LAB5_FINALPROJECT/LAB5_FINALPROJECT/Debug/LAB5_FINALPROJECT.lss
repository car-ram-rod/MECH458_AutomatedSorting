
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000572  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000572  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800108  00800108  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103f  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ec  00000000  00000000  0000243b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077e  00000000  00000000  000032c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	34 c1       	rjmp	.+616    	; 0x26e <__vector_1>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	3f c1       	rjmp	.+638    	; 0x28c <__vector_3>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c1       	rjmp	.+672    	; 0x2be <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c1       	rjmp	.+614    	; 0x2dc <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e7       	ldi	r30, 0x72	; 114
  ac:	f5 e0       	ldi	r31, 0x05	; 5
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 30       	cpi	r26, 0x0C	; 12
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	8b d0       	rcall	.+278    	; 0x1e6 <main>
  d0:	4e c2       	rjmp	.+1180   	; 0x56e <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <mTimer>:
#include "interrupt.h"

void mTimer(int count){ // delay microsecond
  d4:	ac 01       	movw	r20, r24
	int i = 0; //initialize loop counter
	/*set Waveform Generation mode to Clear Timer*/
	/*set WGM bits to 0100*/
	/*note WGM is spread over two registers*/
	TCCR1B |= _BV(WGM12);
  d6:	e1 e8       	ldi	r30, 0x81	; 129
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	98 60       	ori	r25, 0x08	; 8
  de:	90 83       	st	Z, r25
	/*set Output Compare Register for 1000 cycles (1ms)*/
	OCR1A = 0x03E8;
  e0:	88 ee       	ldi	r24, 0xE8	; 232
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
  ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	/*Enable the output compare interrupt enable*/
	TIMSK1 = TIMSK1 | 0b00000010;
  f4:	ef e6       	ldi	r30, 0x6F	; 111
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	92 60       	ori	r25, 0x02	; 2
  fc:	90 83       	st	Z, r25
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
  fe:	b1 9a       	sbi	0x16, 1	; 22
#include "interrupt.h"

void mTimer(int count){ // delay microsecond
	int i = 0; //initialize loop counter
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
	/*Enable the output compare interrupt enable*/
	TIMSK1 = TIMSK1 | 0b00000010;
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 104:	05 c0       	rjmp	.+10     	; 0x110 <mTimer+0x3c>
		if ((TIFR1 & 0x02) == 0x02){
 106:	b1 9b       	sbis	0x16, 1	; 22
 108:	fe cf       	rjmp	.-4      	; 0x106 <mTimer+0x32>
			//clear interrupt flag by WRITING a ONE to the bit
			TIFR1 |= _BV(OCF1A);
 10a:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop counter
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	3f 4f       	sbci	r19, 0xFF	; 255
	/*Enable the output compare interrupt enable*/
	TIMSK1 = TIMSK1 | 0b00000010;
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 110:	24 17       	cp	r18, r20
 112:	35 07       	cpc	r19, r21
 114:	1c f4       	brge	.+6      	; 0x11c <mTimer+0x48>
		if ((TIFR1 & 0x02) == 0x02){
 116:	b1 9b       	sbis	0x16, 1	; 22
 118:	f6 cf       	rjmp	.-20     	; 0x106 <mTimer+0x32>
 11a:	f7 cf       	rjmp	.-18     	; 0x10a <mTimer+0x36>
 11c:	08 95       	ret

0000011e <stepperHome>:
	if(((PINB & 0b00001100) >> 2) != d){ //if current direction doesn't match new direction
		PORTB &= 0b11110000; //apply Vcc Brake
		PORTB |= 0b0011 | ((d & 0b11) << 2); //start motor in specified direction
	}
	dutyCycle = s*2.55;
	OCR0A = dutyCycle;//set duty cycle
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
 12c:	eb 01       	movw	r28, r22
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
 132:	c7 01       	movw	r24, r14
 134:	83 70       	andi	r24, 0x03	; 3
 136:	90 78       	andi	r25, 0x80	; 128
 138:	99 23       	and	r25, r25
 13a:	24 f4       	brge	.+8      	; 0x144 <stepperHome+0x26>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	8c 6f       	ori	r24, 0xFC	; 252
 140:	9f 6f       	ori	r25, 0xFF	; 255
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	fc 01       	movw	r30, r24
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	88 b9       	out	0x08, r24	; 8
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	be df       	rcall	.-132    	; 0xd4 <mTimer>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	e8 1a       	sub	r14, r24
 15c:	f8 0a       	sbc	r15, r24
 15e:	e5 e6       	ldi	r30, 0x65	; 101
 160:	ee 16       	cp	r14, r30
 162:	f1 04       	cpc	r15, r1
 164:	31 f7       	brne	.-52     	; 0x132 <stepperHome+0x14>
 166:	f8 01       	movw	r30, r16
 168:	11 82       	std	Z+1, r1	; 0x01
 16a:	10 82       	st	Z, r1
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 174:	99 83       	std	Y+1, r25	; 0x01
 176:	88 83       	st	Y, r24
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <setupPWM>:
 186:	bc 01       	movw	r22, r24
 188:	84 b5       	in	r24, 0x24	; 36
 18a:	83 68       	ori	r24, 0x83	; 131
 18c:	84 bd       	out	0x24, r24	; 36
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	82 60       	ori	r24, 0x02	; 2
 192:	85 bd       	out	0x25, r24	; 37
 194:	07 2e       	mov	r0, r23
 196:	00 0c       	add	r0, r0
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	f9 d0       	rcall	.+498    	; 0x390 <__floatsisf>
 19e:	23 e3       	ldi	r18, 0x33	; 51
 1a0:	33 e3       	ldi	r19, 0x33	; 51
 1a2:	43 e2       	ldi	r20, 0x23	; 35
 1a4:	50 e4       	ldi	r21, 0x40	; 64
 1a6:	58 d1       	rcall	.+688    	; 0x458 <__mulsf3>
 1a8:	c5 d0       	rcall	.+394    	; 0x334 <__fixunssfsi>
 1aa:	67 bd       	out	0x27, r22	; 39
 1ac:	08 95       	ret

000001ae <setupISR>:
 1ae:	8d b3       	in	r24, 0x1d	; 29
 1b0:	85 64       	ori	r24, 0x45	; 69
 1b2:	8d bb       	out	0x1d, r24	; 29
 1b4:	e9 e6       	ldi	r30, 0x69	; 105
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	83 63       	ori	r24, 0x33	; 51
 1bc:	80 83       	st	Z, r24
 1be:	ea e6       	ldi	r30, 0x6A	; 106
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <setupADC>:
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8d 68       	ori	r24, 0x8D	; 141
 1d2:	80 83       	st	Z, r24
 1d4:	ec e7       	ldi	r30, 0x7C	; 124
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	81 64       	ori	r24, 0x41	; 65
 1dc:	80 83       	st	Z, r24
 1de:	80 81       	ld	r24, Z
 1e0:	81 7e       	andi	r24, 0xE1	; 225
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <main>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <main+0x6>
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <main+0x8>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	1a 82       	std	Y+2, r1	; 0x02
 1f4:	19 82       	std	Y+1, r1	; 0x01
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9c 83       	std	Y+4, r25	; 0x04
 1fc:	8b 83       	std	Y+3, r24	; 0x03
 1fe:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <HallEffect>
 202:	f8 94       	cli
 204:	8e e1       	ldi	r24, 0x1E	; 30
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	be df       	rcall	.-132    	; 0x186 <setupPWM>
 20a:	d1 df       	rcall	.-94     	; 0x1ae <setupISR>
 20c:	de df       	rcall	.-68     	; 0x1ca <setupADC>
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	81 b9       	out	0x01, r24	; 1
 212:	84 b9       	out	0x04, r24	; 4
 214:	87 b9       	out	0x07, r24	; 7
 216:	80 ef       	ldi	r24, 0xF0	; 240
 218:	8a b9       	out	0x0a, r24	; 10
 21a:	1d b8       	out	0x0d, r1	; 13
 21c:	10 ba       	out	0x10, r1	; 16
 21e:	78 94       	sei
 220:	e1 e8       	ldi	r30, 0x81	; 129
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24
 22a:	ea e7       	ldi	r30, 0x7A	; 122
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
 234:	be 01       	movw	r22, r28
 236:	6d 5f       	subi	r22, 0xFD	; 253
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	6f df       	rcall	.-290    	; 0x11e <stepperHome>
 240:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <HallEffect>
 244:	ea e7       	ldi	r30, 0x7A	; 122
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 24c:	88 23       	and	r24, r24
 24e:	e1 f3       	breq	.-8      	; 0x248 <main+0x62>
 250:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ADCResult>
 254:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ADCResult+0x1>
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	88 b9       	out	0x08, r24	; 8
 262:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 266:	80 81       	ld	r24, Z
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	80 83       	st	Z, r24
 26c:	ed cf       	rjmp	.-38     	; 0x248 <main+0x62>

0000026e <__vector_1>:
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/

ISR(INT0_vect){ // on PD0; KILL SWITCH
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
	PORTB &= 0b11110011; //stop motor
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	83 7f       	andi	r24, 0xF3	; 243
 27e:	85 b9       	out	0x05, r24	; 5
	
}
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__vector_3>:

/*sensor 3: 2nt Optical Inductive, Active HIGH starts AD conversion*/
ISR(INT2_vect){
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	0b b6       	in	r0, 0x3b	; 59
 298:	0f 92       	push	r0
 29a:	8f 93       	push	r24
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	ADCSRA |= _BV(ADSC);
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 64       	ori	r24, 0x40	; 64
 2a8:	80 83       	st	Z, r24
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_7>:

ISR(INT6_vect){ //Active low for hall effect sensor on PE4
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8f 93       	push	r24
	//when there is a rising edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	HallEffect=0x01;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <HallEffect>
}
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_29>:

/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
	ADCResult = ADCL;
 2ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADCResult+0x1>
 2f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADCResult>
	ADCResult += ADCH << 8;
 2fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 300:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <ADCResult>
 304:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <ADCResult+0x1>
 308:	89 2f       	mov	r24, r25
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	98 2f       	mov	r25, r24
 30e:	88 27       	eor	r24, r24
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
 314:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADCResult+0x1>
 318:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADCResult>
	ADCResultFlag = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
}
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__fixunssfsi>:
 334:	70 d0       	rcall	.+224    	; 0x416 <__fp_splitA>
 336:	88 f0       	brcs	.+34     	; 0x35a <__fixunssfsi+0x26>
 338:	9f 57       	subi	r25, 0x7F	; 127
 33a:	90 f0       	brcs	.+36     	; 0x360 <__fixunssfsi+0x2c>
 33c:	b9 2f       	mov	r27, r25
 33e:	99 27       	eor	r25, r25
 340:	b7 51       	subi	r27, 0x17	; 23
 342:	a0 f0       	brcs	.+40     	; 0x36c <__fixunssfsi+0x38>
 344:	d1 f0       	breq	.+52     	; 0x37a <__fixunssfsi+0x46>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a f0       	brmi	.+6      	; 0x356 <__fixunssfsi+0x22>
 350:	ba 95       	dec	r27
 352:	c9 f7       	brne	.-14     	; 0x346 <__fixunssfsi+0x12>
 354:	12 c0       	rjmp	.+36     	; 0x37a <__fixunssfsi+0x46>
 356:	b1 30       	cpi	r27, 0x01	; 1
 358:	81 f0       	breq	.+32     	; 0x37a <__fixunssfsi+0x46>
 35a:	77 d0       	rcall	.+238    	; 0x44a <__fp_zero>
 35c:	b1 e0       	ldi	r27, 0x01	; 1
 35e:	08 95       	ret
 360:	74 c0       	rjmp	.+232    	; 0x44a <__fp_zero>
 362:	67 2f       	mov	r22, r23
 364:	78 2f       	mov	r23, r24
 366:	88 27       	eor	r24, r24
 368:	b8 5f       	subi	r27, 0xF8	; 248
 36a:	39 f0       	breq	.+14     	; 0x37a <__fixunssfsi+0x46>
 36c:	b9 3f       	cpi	r27, 0xF9	; 249
 36e:	cc f3       	brlt	.-14     	; 0x362 <__fixunssfsi+0x2e>
 370:	86 95       	lsr	r24
 372:	77 95       	ror	r23
 374:	67 95       	ror	r22
 376:	b3 95       	inc	r27
 378:	d9 f7       	brne	.-10     	; 0x370 <__fixunssfsi+0x3c>
 37a:	3e f4       	brtc	.+14     	; 0x38a <__fixunssfsi+0x56>
 37c:	90 95       	com	r25
 37e:	80 95       	com	r24
 380:	70 95       	com	r23
 382:	61 95       	neg	r22
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	8f 4f       	sbci	r24, 0xFF	; 255
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	08 95       	ret

0000038c <__floatunsisf>:
 38c:	e8 94       	clt
 38e:	09 c0       	rjmp	.+18     	; 0x3a2 <__floatsisf+0x12>

00000390 <__floatsisf>:
 390:	97 fb       	bst	r25, 7
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__floatsisf+0x12>
 394:	90 95       	com	r25
 396:	80 95       	com	r24
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	8f 4f       	sbci	r24, 0xFF	; 255
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	99 23       	and	r25, r25
 3a4:	a9 f0       	breq	.+42     	; 0x3d0 <__floatsisf+0x40>
 3a6:	f9 2f       	mov	r31, r25
 3a8:	96 e9       	ldi	r25, 0x96	; 150
 3aa:	bb 27       	eor	r27, r27
 3ac:	93 95       	inc	r25
 3ae:	f6 95       	lsr	r31
 3b0:	87 95       	ror	r24
 3b2:	77 95       	ror	r23
 3b4:	67 95       	ror	r22
 3b6:	b7 95       	ror	r27
 3b8:	f1 11       	cpse	r31, r1
 3ba:	f8 cf       	rjmp	.-16     	; 0x3ac <__floatsisf+0x1c>
 3bc:	fa f4       	brpl	.+62     	; 0x3fc <__floatsisf+0x6c>
 3be:	bb 0f       	add	r27, r27
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__floatsisf+0x36>
 3c2:	60 ff       	sbrs	r22, 0
 3c4:	1b c0       	rjmp	.+54     	; 0x3fc <__floatsisf+0x6c>
 3c6:	6f 5f       	subi	r22, 0xFF	; 255
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	8f 4f       	sbci	r24, 0xFF	; 255
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <__floatsisf+0x6c>
 3d0:	88 23       	and	r24, r24
 3d2:	11 f0       	breq	.+4      	; 0x3d8 <__floatsisf+0x48>
 3d4:	96 e9       	ldi	r25, 0x96	; 150
 3d6:	11 c0       	rjmp	.+34     	; 0x3fa <__floatsisf+0x6a>
 3d8:	77 23       	and	r23, r23
 3da:	21 f0       	breq	.+8      	; 0x3e4 <__floatsisf+0x54>
 3dc:	9e e8       	ldi	r25, 0x8E	; 142
 3de:	87 2f       	mov	r24, r23
 3e0:	76 2f       	mov	r23, r22
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <__floatsisf+0x5e>
 3e4:	66 23       	and	r22, r22
 3e6:	71 f0       	breq	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	96 e8       	ldi	r25, 0x86	; 134
 3ea:	86 2f       	mov	r24, r22
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	2a f0       	brmi	.+10     	; 0x3fc <__floatsisf+0x6c>
 3f2:	9a 95       	dec	r25
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	da f7       	brpl	.-10     	; 0x3f2 <__floatsisf+0x62>
 3fc:	88 0f       	add	r24, r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret

00000406 <__fp_split3>:
 406:	57 fd       	sbrc	r21, 7
 408:	90 58       	subi	r25, 0x80	; 128
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	59 f0       	breq	.+22     	; 0x426 <__fp_splitA+0x10>
 410:	5f 3f       	cpi	r21, 0xFF	; 255
 412:	71 f0       	breq	.+28     	; 0x430 <__fp_splitA+0x1a>
 414:	47 95       	ror	r20

00000416 <__fp_splitA>:
 416:	88 0f       	add	r24, r24
 418:	97 fb       	bst	r25, 7
 41a:	99 1f       	adc	r25, r25
 41c:	61 f0       	breq	.+24     	; 0x436 <__fp_splitA+0x20>
 41e:	9f 3f       	cpi	r25, 0xFF	; 255
 420:	79 f0       	breq	.+30     	; 0x440 <__fp_splitA+0x2a>
 422:	87 95       	ror	r24
 424:	08 95       	ret
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	14 06       	cpc	r1, r20
 42c:	55 1f       	adc	r21, r21
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <__fp_split3+0xe>
 430:	46 95       	lsr	r20
 432:	f1 df       	rcall	.-30     	; 0x416 <__fp_splitA>
 434:	08 c0       	rjmp	.+16     	; 0x446 <__fp_splitA+0x30>
 436:	16 16       	cp	r1, r22
 438:	17 06       	cpc	r1, r23
 43a:	18 06       	cpc	r1, r24
 43c:	99 1f       	adc	r25, r25
 43e:	f1 cf       	rjmp	.-30     	; 0x422 <__fp_splitA+0xc>
 440:	86 95       	lsr	r24
 442:	71 05       	cpc	r23, r1
 444:	61 05       	cpc	r22, r1
 446:	08 94       	sec
 448:	08 95       	ret

0000044a <__fp_zero>:
 44a:	e8 94       	clt

0000044c <__fp_szero>:
 44c:	bb 27       	eor	r27, r27
 44e:	66 27       	eor	r22, r22
 450:	77 27       	eor	r23, r23
 452:	cb 01       	movw	r24, r22
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__mulsf3>:
 458:	0b d0       	rcall	.+22     	; 0x470 <__mulsf3x>
 45a:	78 c0       	rjmp	.+240    	; 0x54c <__fp_round>
 45c:	69 d0       	rcall	.+210    	; 0x530 <__fp_pscA>
 45e:	28 f0       	brcs	.+10     	; 0x46a <__mulsf3+0x12>
 460:	6e d0       	rcall	.+220    	; 0x53e <__fp_pscB>
 462:	18 f0       	brcs	.+6      	; 0x46a <__mulsf3+0x12>
 464:	95 23       	and	r25, r21
 466:	09 f0       	breq	.+2      	; 0x46a <__mulsf3+0x12>
 468:	5a c0       	rjmp	.+180    	; 0x51e <__fp_inf>
 46a:	5f c0       	rjmp	.+190    	; 0x52a <__fp_nan>
 46c:	11 24       	eor	r1, r1
 46e:	ee cf       	rjmp	.-36     	; 0x44c <__fp_szero>

00000470 <__mulsf3x>:
 470:	ca df       	rcall	.-108    	; 0x406 <__fp_split3>
 472:	a0 f3       	brcs	.-24     	; 0x45c <__mulsf3+0x4>

00000474 <__mulsf3_pse>:
 474:	95 9f       	mul	r25, r21
 476:	d1 f3       	breq	.-12     	; 0x46c <__mulsf3+0x14>
 478:	95 0f       	add	r25, r21
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	55 1f       	adc	r21, r21
 47e:	62 9f       	mul	r22, r18
 480:	f0 01       	movw	r30, r0
 482:	72 9f       	mul	r23, r18
 484:	bb 27       	eor	r27, r27
 486:	f0 0d       	add	r31, r0
 488:	b1 1d       	adc	r27, r1
 48a:	63 9f       	mul	r22, r19
 48c:	aa 27       	eor	r26, r26
 48e:	f0 0d       	add	r31, r0
 490:	b1 1d       	adc	r27, r1
 492:	aa 1f       	adc	r26, r26
 494:	64 9f       	mul	r22, r20
 496:	66 27       	eor	r22, r22
 498:	b0 0d       	add	r27, r0
 49a:	a1 1d       	adc	r26, r1
 49c:	66 1f       	adc	r22, r22
 49e:	82 9f       	mul	r24, r18
 4a0:	22 27       	eor	r18, r18
 4a2:	b0 0d       	add	r27, r0
 4a4:	a1 1d       	adc	r26, r1
 4a6:	62 1f       	adc	r22, r18
 4a8:	73 9f       	mul	r23, r19
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	62 1f       	adc	r22, r18
 4b0:	83 9f       	mul	r24, r19
 4b2:	a0 0d       	add	r26, r0
 4b4:	61 1d       	adc	r22, r1
 4b6:	22 1f       	adc	r18, r18
 4b8:	74 9f       	mul	r23, r20
 4ba:	33 27       	eor	r19, r19
 4bc:	a0 0d       	add	r26, r0
 4be:	61 1d       	adc	r22, r1
 4c0:	23 1f       	adc	r18, r19
 4c2:	84 9f       	mul	r24, r20
 4c4:	60 0d       	add	r22, r0
 4c6:	21 1d       	adc	r18, r1
 4c8:	82 2f       	mov	r24, r18
 4ca:	76 2f       	mov	r23, r22
 4cc:	6a 2f       	mov	r22, r26
 4ce:	11 24       	eor	r1, r1
 4d0:	9f 57       	subi	r25, 0x7F	; 127
 4d2:	50 40       	sbci	r21, 0x00	; 0
 4d4:	8a f0       	brmi	.+34     	; 0x4f8 <__mulsf3_pse+0x84>
 4d6:	e1 f0       	breq	.+56     	; 0x510 <__mulsf3_pse+0x9c>
 4d8:	88 23       	and	r24, r24
 4da:	4a f0       	brmi	.+18     	; 0x4ee <__mulsf3_pse+0x7a>
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	bb 1f       	adc	r27, r27
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	88 1f       	adc	r24, r24
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	a9 f7       	brne	.-22     	; 0x4d8 <__mulsf3_pse+0x64>
 4ee:	9e 3f       	cpi	r25, 0xFE	; 254
 4f0:	51 05       	cpc	r21, r1
 4f2:	70 f0       	brcs	.+28     	; 0x510 <__mulsf3_pse+0x9c>
 4f4:	14 c0       	rjmp	.+40     	; 0x51e <__fp_inf>
 4f6:	aa cf       	rjmp	.-172    	; 0x44c <__fp_szero>
 4f8:	5f 3f       	cpi	r21, 0xFF	; 255
 4fa:	ec f3       	brlt	.-6      	; 0x4f6 <__mulsf3_pse+0x82>
 4fc:	98 3e       	cpi	r25, 0xE8	; 232
 4fe:	dc f3       	brlt	.-10     	; 0x4f6 <__mulsf3_pse+0x82>
 500:	86 95       	lsr	r24
 502:	77 95       	ror	r23
 504:	67 95       	ror	r22
 506:	b7 95       	ror	r27
 508:	f7 95       	ror	r31
 50a:	e7 95       	ror	r30
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	c1 f7       	brne	.-16     	; 0x500 <__mulsf3_pse+0x8c>
 510:	fe 2b       	or	r31, r30
 512:	88 0f       	add	r24, r24
 514:	91 1d       	adc	r25, r1
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret

0000051e <__fp_inf>:
 51e:	97 f9       	bld	r25, 7
 520:	9f 67       	ori	r25, 0x7F	; 127
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	08 95       	ret

0000052a <__fp_nan>:
 52a:	9f ef       	ldi	r25, 0xFF	; 255
 52c:	80 ec       	ldi	r24, 0xC0	; 192
 52e:	08 95       	ret

00000530 <__fp_pscA>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	16 16       	cp	r1, r22
 536:	17 06       	cpc	r1, r23
 538:	18 06       	cpc	r1, r24
 53a:	09 06       	cpc	r0, r25
 53c:	08 95       	ret

0000053e <__fp_pscB>:
 53e:	00 24       	eor	r0, r0
 540:	0a 94       	dec	r0
 542:	12 16       	cp	r1, r18
 544:	13 06       	cpc	r1, r19
 546:	14 06       	cpc	r1, r20
 548:	05 06       	cpc	r0, r21
 54a:	08 95       	ret

0000054c <__fp_round>:
 54c:	09 2e       	mov	r0, r25
 54e:	03 94       	inc	r0
 550:	00 0c       	add	r0, r0
 552:	11 f4       	brne	.+4      	; 0x558 <__fp_round+0xc>
 554:	88 23       	and	r24, r24
 556:	52 f0       	brmi	.+20     	; 0x56c <__fp_round+0x20>
 558:	bb 0f       	add	r27, r27
 55a:	40 f4       	brcc	.+16     	; 0x56c <__fp_round+0x20>
 55c:	bf 2b       	or	r27, r31
 55e:	11 f4       	brne	.+4      	; 0x564 <__fp_round+0x18>
 560:	60 ff       	sbrs	r22, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <__fp_round+0x20>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	08 95       	ret

0000056e <_exit>:
 56e:	f8 94       	cli

00000570 <__stop_program>:
 570:	ff cf       	rjmp	.-2      	; 0x570 <__stop_program>
