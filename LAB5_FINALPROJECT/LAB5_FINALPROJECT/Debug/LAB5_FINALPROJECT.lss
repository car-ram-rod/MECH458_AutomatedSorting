
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800108  00800108  00000ad8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000123c  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d51  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dc  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a8  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a84  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000047e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	33 c3       	rjmp	.+1638   	; 0x66c <__vector_1>
   6:	00 00       	nop
   8:	40 c3       	rjmp	.+1664   	; 0x68a <__vector_2>
   a:	00 00       	nop
   c:	52 c3       	rjmp	.+1700   	; 0x6b2 <__vector_3>
   e:	00 00       	nop
  10:	64 c3       	rjmp	.+1736   	; 0x6da <__vector_4>
  12:	00 00       	nop
  14:	76 c3       	rjmp	.+1772   	; 0x702 <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	86 c3       	rjmp	.+1804   	; 0x72a <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	6e c3       	rjmp	.+1756   	; 0x752 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e3       	ldi	r30, 0x3C	; 60
  ac:	fa e0       	ldi	r31, 0x0A	; 10
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a7 31       	cpi	r26, 0x17	; 23
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	88 d1       	rcall	.+784    	; 0x3e0 <main>
  d0:	b3 c4       	rjmp	.+2406   	; 0xa38 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initTimer1>:
#include "interrupt.h"
void initTimer1 (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	/*set Waveform Generation mode to Clear Timer*/
	/*set WGM bits to 0100*/
	/*note WGM is spread over two registers*/
	TCCR1B |= _BV(WGM12);
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	/*set Output Compare Register for 1000 cycles (1ms)*/
	OCR1A = 0x03E8;
  de:	88 ee       	ldi	r24, 0xE8	; 232
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f2:	08 95       	ret

000000f4 <mTimer>:
	return;
}
void mTimer(int count){ // delay microsecond
  f4:	ac 01       	movw	r20, r24
	int i = 0; //initialize loop counter
	/*Enable the output compare interrupt enable*/
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: becomes
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	93 60       	ori	r25, 0x03	; 3
  fe:	90 83       	st	Z, r25
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
 100:	b1 9a       	sbi	0x16, 1	; 22
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
	return;
}
void mTimer(int count){ // delay microsecond
	int i = 0; //initialize loop counter
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 106:	05 c0       	rjmp	.+10     	; 0x112 <mTimer+0x1e>
		if ((TIFR1 & 0x02) == 0x02){
 108:	b1 9b       	sbis	0x16, 1	; 22
 10a:	fe cf       	rjmp	.-4      	; 0x108 <mTimer+0x14>
			//clear interrupt flag by WRITING a ONE to the bit
			TIFR1 |= _BV(OCF1A);
 10c:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop counter
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 112:	24 17       	cp	r18, r20
 114:	35 07       	cpc	r19, r21
 116:	1c f4       	brge	.+6      	; 0x11e <mTimer+0x2a>
		if ((TIFR1 & 0x02) == 0x02){
 118:	b1 9b       	sbis	0x16, 1	; 22
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <mTimer+0x14>
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <mTimer+0x18>
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
 12a:	2f 92       	push	r2
 12c:	3f 92       	push	r3
 12e:	4f 92       	push	r4
 130:	5f 92       	push	r5
 132:	6f 92       	push	r6
 134:	7f 92       	push	r7
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	00 d0       	rcall	.+0      	; 0x150 <stepperControl+0x26>
 150:	00 d0       	rcall	.+0      	; 0x152 <stepperControl+0x28>
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	3c 01       	movw	r6, r24
 158:	7a 83       	std	Y+2, r23	; 0x02
 15a:	69 83       	std	Y+1, r22	; 0x01
 15c:	2a 01       	movw	r4, r20
	int i=0;
	uint8_t maxDelay = 20; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 12; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
 15e:	fa 01       	movw	r30, r20
 160:	01 90       	ld	r0, Z+
 162:	f0 81       	ld	r31, Z
 164:	e0 2d       	mov	r30, r0
 166:	fc 83       	std	Y+4, r31	; 0x04
 168:	eb 83       	std	Y+3, r30	; 0x03
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
 16a:	99 23       	and	r25, r25
 16c:	24 f4       	brge	.+8      	; 0x176 <stepperControl+0x4c>
 16e:	88 27       	eor	r24, r24
 170:	99 27       	eor	r25, r25
 172:	86 19       	sub	r24, r6
 174:	97 09       	sbc	r25, r7
 176:	8c 01       	movw	r16, r24
	if(absSteps<(differential*2)){
 178:	80 31       	cpi	r24, 0x10	; 16
 17a:	91 05       	cpc	r25, r1
 17c:	38 f4       	brcc	.+14     	; 0x18c <stepperControl+0x62>
		minDelay=maxDelay-absSteps/2;
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	98 2f       	mov	r25, r24
 184:	24 e1       	ldi	r18, 0x14	; 20
 186:	22 2e       	mov	r2, r18
 188:	28 1a       	sub	r2, r24
 18a:	05 c0       	rjmp	.+10     	; 0x196 <stepperControl+0x6c>
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0;
	uint8_t maxDelay = 20; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 12; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
 18c:	98 e0       	ldi	r25, 0x08	; 8
/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0;
	uint8_t maxDelay = 20; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 12; //5ms corresponds to 200 steps per second; or 1 revolution per second
 18e:	0f 2e       	mov	r0, r31
 190:	fc e0       	ldi	r31, 0x0C	; 12
 192:	2f 2e       	mov	r2, r31
 194:	f0 2d       	mov	r31, r0
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise
 196:	77 20       	and	r7, r7
 198:	24 f4       	brge	.+8      	; 0x1a2 <stepperControl+0x78>
 19a:	cc 24       	eor	r12, r12
 19c:	ca 94       	dec	r12
 19e:	dc 2c       	mov	r13, r12
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <stepperControl+0x7e>
	uint8_t maxDelay = 20; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 12; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
 1a2:	cc 24       	eor	r12, r12
 1a4:	c3 94       	inc	r12
 1a6:	d1 2c       	mov	r13, r1
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise
	
	//CURRENT_ITERATION = offset + DIRECTION;//saves some math later during "for" loop
	
	for(i=1;i<=absSteps;i++){
 1a8:	01 15       	cp	r16, r1
 1aa:	11 05       	cpc	r17, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <stepperControl+0x86>
 1ae:	45 c0       	rjmp	.+138    	; 0x23a <stepperControl+0x110>
 1b0:	0f 2e       	mov	r0, r31
 1b2:	f4 e1       	ldi	r31, 0x14	; 20
 1b4:	3f 2e       	mov	r3, r31
 1b6:	f0 2d       	mov	r31, r0
 1b8:	88 24       	eor	r8, r8
 1ba:	83 94       	inc	r8
 1bc:	91 2c       	mov	r9, r1
		//ramp up
		if((absSteps-i-1) > differential){ //the "added" negative one causes it to slow down one step early
 1be:	e9 2e       	mov	r14, r25
 1c0:	f1 2c       	mov	r15, r1
 1c2:	58 01       	movw	r10, r16
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	af 1a       	sub	r10, r31
 1c8:	b1 08       	sbc	r11, r1
 1ca:	c5 01       	movw	r24, r10
 1cc:	88 19       	sub	r24, r8
 1ce:	99 09       	sbc	r25, r9
 1d0:	e8 16       	cp	r14, r24
 1d2:	f9 06       	cpc	r15, r25
 1d4:	20 f4       	brcc	.+8      	; 0x1de <stepperControl+0xb4>
			if(delay>minDelay)delay -= 1;
 1d6:	23 14       	cp	r2, r3
 1d8:	38 f4       	brcc	.+14     	; 0x1e8 <stepperControl+0xbe>
 1da:	3a 94       	dec	r3
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <stepperControl+0xca>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
 1de:	23 e1       	ldi	r18, 0x13	; 19
 1e0:	23 15       	cp	r18, r3
 1e2:	20 f0       	brcs	.+8      	; 0x1ec <stepperControl+0xc2>
 1e4:	33 94       	inc	r3
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <stepperControl+0xca>
	
	for(i=1;i<=absSteps;i++){
		//ramp up
		if((absSteps-i-1) > differential){ //the "added" negative one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
 1e8:	32 2c       	mov	r3, r2
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <stepperControl+0xca>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f4 e1       	ldi	r31, 0x14	; 20
 1f0:	3f 2e       	mov	r3, r31
 1f2:	f0 2d       	mov	r31, r0
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	8c 0d       	add	r24, r12
 1fa:	9d 1d       	adc	r25, r13
 1fc:	9c 83       	std	Y+4, r25	; 0x04
 1fe:	8b 83       	std	Y+3, r24	; 0x03
		if(PORTAREGSet==4)PORTAREGSet=0;
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	91 05       	cpc	r25, r1
 204:	39 f0       	breq	.+14     	; 0x214 <stepperControl+0xea>
		if(PORTAREGSet==-1)PORTAREGSet=3;
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	39 f4       	brne	.+14     	; 0x218 <stepperControl+0xee>
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9c 83       	std	Y+4, r25	; 0x04
 210:	8b 83       	std	Y+3, r24	; 0x03
 212:	02 c0       	rjmp	.+4      	; 0x218 <stepperControl+0xee>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
 214:	1c 82       	std	Y+4, r1	; 0x04
 216:	1b 82       	std	Y+3, r1	; 0x03
		if(PORTAREGSet==-1)PORTAREGSet=3;
		//PORTAREGSet = ((stepperIteration+DIRECTION*i)%4);
		PORTA = stepperSigOrd[PORTAREGSet];
 218:	eb 81       	ldd	r30, Y+3	; 0x03
 21a:	fc 81       	ldd	r31, Y+4	; 0x04
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 228:	83 2d       	mov	r24, r3
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	63 df       	rcall	.-314    	; 0xf4 <mTimer>
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise
	
	//CURRENT_ITERATION = offset + DIRECTION;//saves some math later during "for" loop
	
	for(i=1;i<=absSteps;i++){
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	89 1a       	sub	r8, r25
 232:	99 0a       	sbc	r9, r25
 234:	08 15       	cp	r16, r8
 236:	19 05       	cpc	r17, r9
 238:	40 f6       	brcc	.-112    	; 0x1ca <stepperControl+0xa0>
		if(PORTAREGSet==-1)PORTAREGSet=3;
		//PORTAREGSet = ((stepperIteration+DIRECTION*i)%4);
		PORTA = stepperSigOrd[PORTAREGSet];
		mTimer(delay);
	}
	*stepperIt=PORTAREGSet;
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	f2 01       	movw	r30, r4
 240:	91 83       	std	Z+1, r25	; 0x01
 242:	80 83       	st	Z, r24
	//*stepperIt=stepperSigOrd[(CURRENT_ITERATION+DIRECTION*(i-1))%4]; //set value of current iteration to variable address
	*stepperPos += steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
 244:	e9 81       	ldd	r30, Y+1	; 0x01
 246:	fa 81       	ldd	r31, Y+2	; 0x02
 248:	80 81       	ld	r24, Z
 24a:	91 81       	ldd	r25, Z+1	; 0x01
 24c:	86 0d       	add	r24, r6
 24e:	97 1d       	adc	r25, r7
 250:	68 ec       	ldi	r22, 0xC8	; 200
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	ca d3       	rcall	.+1940   	; 0x9ea <__divmodhi4>
 256:	91 83       	std	Z+1, r25	; 0x01
 258:	80 83       	st	Z, r24
	return; //returns nothing
}
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	7f 90       	pop	r7
 27c:	6f 90       	pop	r6
 27e:	5f 90       	pop	r5
 280:	4f 90       	pop	r4
 282:	3f 90       	pop	r3
 284:	2f 90       	pop	r2
 286:	08 95       	ret

00000288 <stepperHome>:
void stepperHome(int *stepperPos, int *stepperIt){
 288:	cf 92       	push	r12
 28a:	df 92       	push	r13
 28c:	ef 92       	push	r14
 28e:	ff 92       	push	r15
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	8c 01       	movw	r16, r24
 29a:	7b 01       	movw	r14, r22
	uint8_t delay = 20; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=8; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
 29c:	12 b8       	out	0x02, r1	; 2
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
	return; //returns nothing
}
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 20; //20ms corresponds to 50 steps per second
	int i=0;
 29e:	c0 e0       	ldi	r28, 0x00	; 0
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=8; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (HallEffect==0){
 2a2:	10 c0       	rjmp	.+32     	; 0x2c4 <stepperHome+0x3c>
		PORTA = stepperSigOrd[i];
 2a4:	fe 01       	movw	r30, r28
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e0 50       	subi	r30, 0x00	; 0
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	80 81       	ld	r24, Z
 2b0:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 2b2:	84 e1       	ldi	r24, 0x14	; 20
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	1e df       	rcall	.-452    	; 0xf4 <mTimer>
		i++;
 2b8:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2ba:	c4 30       	cpi	r28, 0x04	; 4
 2bc:	d1 05       	cpc	r29, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <stepperHome+0x3c>
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=8; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (HallEffect==0){
 2c4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <HallEffect>
 2c8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <HallEffect+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	51 f3       	breq	.-44     	; 0x2a4 <stepperHome+0x1c>
		PORTA = stepperSigOrd[i];
		mTimer(delay);
		i++;
		if (i==4)i=0;
	}
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
 2d0:	ee 98       	cbi	0x1d, 6	; 29
 2d2:	68 94       	set
 2d4:	cc 24       	eor	r12, r12
 2d6:	c3 f8       	bld	r12, 3
 2d8:	d1 2c       	mov	r13, r1
	/*Insert code here to compensate for offset*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 2da:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2dc:	c4 30       	cpi	r28, 0x04	; 4
 2de:	d1 05       	cpc	r29, r1
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <stepperHome+0x68>
		if (i==-1)i=3;
 2e2:	cf 3f       	cpi	r28, 0xFF	; 255
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	d8 07       	cpc	r29, r24
 2e8:	29 f4       	brne	.+10     	; 0x2f4 <stepperHome+0x6c>
 2ea:	c3 e0       	ldi	r28, 0x03	; 3
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <stepperHome+0x6c>
	}
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 2f4:	fe 01       	movw	r30, r28
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	e0 50       	subi	r30, 0x00	; 0
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	80 81       	ld	r24, Z
 300:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	f6 de       	rcall	.-532    	; 0xf4 <mTimer>
 308:	e1 e0       	ldi	r30, 0x01	; 1
 30a:	ce 1a       	sub	r12, r30
 30c:	d1 08       	sbc	r13, r1
		i++;
		if (i==4)i=0;
	}
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset*/
	for (x=0;x<offset;x++){
 30e:	29 f7       	brne	.-54     	; 0x2da <stepperHome+0x52>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
		mTimer(delay);
	}
	//
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
 310:	f7 01       	movw	r30, r14
 312:	d1 83       	std	Z+1, r29	; 0x01
 314:	c0 83       	st	Z, r28
	*stepperPos = 0; //base stepper position (on black)
 316:	f8 01       	movw	r30, r16
 318:	11 82       	std	Z+1, r1	; 0x01
 31a:	10 82       	st	Z, r1
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	08 95       	ret

0000032e <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 32e:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 330:	84 b5       	in	r24, 0x24	; 36
 332:	83 68       	ori	r24, 0x83	; 131
 334:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 336:	85 b5       	in	r24, 0x25	; 37
 338:	83 60       	ori	r24, 0x03	; 3
 33a:	85 bd       	out	0x25, r24	; 37
	//TCCR0B &= 0b11111101;
	dutyCycle = motorDuty*2.55;
 33c:	07 2e       	mov	r0, r23
 33e:	00 0c       	add	r0, r0
 340:	88 0b       	sbc	r24, r24
 342:	99 0b       	sbc	r25, r25
 344:	63 d2       	rcall	.+1222   	; 0x80c <__floatsisf>
 346:	23 e3       	ldi	r18, 0x33	; 51
 348:	33 e3       	ldi	r19, 0x33	; 51
 34a:	43 e2       	ldi	r20, 0x23	; 35
 34c:	50 e4       	ldi	r21, 0x40	; 64
 34e:	c2 d2       	rcall	.+1412   	; 0x8d4 <__mulsf3>
 350:	2f d2       	rcall	.+1118   	; 0x7b0 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 352:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 354:	85 b1       	in	r24, 0x05	; 5
 356:	80 7f       	andi	r24, 0xF0	; 240
 358:	85 b9       	out	0x05, r24	; 5
 35a:	08 95       	ret

0000035c <setupISR>:
}
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//falling edge on INT2: EICRA |= _BV(ISC21);
	EIMSK |=0b01011111; //initialize INT6,4:0
 35c:	8d b3       	in	r24, 0x1d	; 29
 35e:	8f 65       	ori	r24, 0x5F	; 95
 360:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0b10111010; //rising edge on INT2; falling edge detection on INT0
 362:	e9 e6       	ldi	r30, 0x69	; 105
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8a 6b       	ori	r24, 0xBA	; 186
 36a:	80 83       	st	Z, r24
	EICRB |= 0b00100010; //active low for INT6 and INT4
 36c:	ea e6       	ldi	r30, 0x6A	; 106
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	82 62       	ori	r24, 0x22	; 34
 374:	80 83       	st	Z, r24
 376:	08 95       	ret

00000378 <setupADC>:
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 378:	ea e7       	ldi	r30, 0x7A	; 122
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	8d 68       	ori	r24, 0x8D	; 141
 380:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 382:	ec e7       	ldi	r30, 0x7C	; 124
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	81 64       	ori	r24, 0x41	; 65
 38a:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 38c:	80 81       	ld	r24, Z
 38e:	81 7e       	andi	r24, 0xE1	; 225
 390:	80 83       	st	Z, r24
 392:	08 95       	ret

00000394 <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 394:	26 2f       	mov	r18, r22
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 39c:	43 70       	andi	r20, 0x03	; 3
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	42 17       	cp	r20, r18
 3a2:	53 07       	cpc	r21, r19
 3a4:	81 f0       	breq	.+32     	; 0x3c6 <motorControl+0x32>
		PORTB &= 0b11110000; //apply Vcc Brake
 3a6:	45 b1       	in	r20, 0x05	; 5
 3a8:	40 7f       	andi	r20, 0xF0	; 240
 3aa:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 3ac:	45 b1       	in	r20, 0x05	; 5
 3ae:	20 95       	com	r18
 3b0:	30 95       	com	r19
 3b2:	23 70       	andi	r18, 0x03	; 3
 3b4:	33 27       	eor	r19, r19
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	24 2b       	or	r18, r20
 3c0:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 3c2:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 3c6:	bc 01       	movw	r22, r24
 3c8:	99 0f       	add	r25, r25
 3ca:	88 0b       	sbc	r24, r24
 3cc:	99 0b       	sbc	r25, r25
 3ce:	1e d2       	rcall	.+1084   	; 0x80c <__floatsisf>
 3d0:	23 e3       	ldi	r18, 0x33	; 51
 3d2:	33 e3       	ldi	r19, 0x33	; 51
 3d4:	43 e2       	ldi	r20, 0x23	; 35
 3d6:	50 e4       	ldi	r21, 0x40	; 64
 3d8:	7d d2       	rcall	.+1274   	; 0x8d4 <__mulsf3>
 3da:	ea d1       	rcall	.+980    	; 0x7b0 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 3dc:	67 bd       	out	0x27, r22	; 39
 3de:	08 95       	ret

000003e0 <main>:
volatile unsigned int optExitFlag; //object is at end of conveyor
volatile unsigned int inductiveFlag; //an inductive flag is picked up
unsigned int stepperSigOrd[4] = {0b00110110,0b00101110,0b00101101,0b00110101};

/* Main Routine */
int main(int argc, char *argv[]){
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	c4 55       	subi	r28, 0x54	; 84
 3ea:	d1 40       	sbci	r29, 0x01	; 1
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	cd bf       	out	0x3d, r28	; 61
	/*User Variables*/
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 3f6:	1a 82       	std	Y+2, r1	; 0x02
 3f8:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
 3fa:	1c 82       	std	Y+4, r1	; 0x04
 3fc:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t inductive; //states whether object is ferrous or not (0=>non-ferrous;1=>ferrous)
		}material;
	//initialize array of structures for storage	
	struct material materialArray[64];
	/*initializations*/
	cli(); //disable interrupts
 3fe:	f8 94       	cli
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 400:	e1 e6       	ldi	r30, 0x61	; 97
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	80 83       	st	Z, r24
	CLKPR = 0;
 408:	10 82       	st	Z, r1
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
 40a:	8e e1       	ldi	r24, 0x1E	; 30
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	8f df       	rcall	.-226    	; 0x32e <setupPWM>
	setupISR();
 410:	a5 df       	rcall	.-182    	; 0x35c <setupISR>
	setupADC();
 412:	b2 df       	rcall	.-156    	; 0x378 <setupADC>
 414:	5f de       	rcall	.-834    	; 0xd4 <initTimer1>
	initTimer1();
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	81 b9       	out	0x01, r24	; 1
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 41a:	84 b9       	out	0x04, r24	; 4
 41c:	87 b9       	out	0x07, r24	; 7
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 41e:	80 ef       	ldi	r24, 0xF0	; 240
	DDRC = 0xFF; //LEDs Debugging
 420:	8a b9       	out	0x0a, r24	; 10
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 422:	1d b8       	out	0x0d, r1	; 13
 424:	10 ba       	out	0x10, r1	; 16
	DDRE = 0x00; /*PE4=HallEffect for stepper*/
 426:	78 94       	sei
	DDRF = 0x00; /*PF1=ADC1 pin*/	
 428:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <HallEffect+0x1>
	sei(); //enable interrupts
	// PORTB &= 0b1110000; //apply Vcc brake to motor
	//PORTB |=0b1000; //start motor in specified direction
	HallEffect=0x00; //set HallEffect equal to zero so while loop is continuous until break out
 42c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <HallEffect>
 430:	be 01       	movw	r22, r28
 432:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration);
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	26 df       	rcall	.-436    	; 0x288 <stepperHome>
 43c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <opt1Flag+0x1>
	
	/*initialize flags and counters*/
	opt1Flag=0x00;
 440:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <opt1Flag>
 444:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <opt2Flag+0x1>
	opt2Flag=0x00;
 448:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <opt2Flag>
 44c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <inductiveFlag+0x1>
	inductiveFlag=0x00;
 450:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <inductiveFlag>
 454:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <optExitFlag+0x1>
	optExitFlag=0x00;
 458:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <optExitFlag>
 45c:	61 e0       	ldi	r22, 0x01	; 1
	
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 45e:	8e e1       	ldi	r24, 0x1E	; 30
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	98 df       	rcall	.-208    	; 0x394 <motorControl>
 464:	c1 2c       	mov	r12, r1
 466:	d1 2c       	mov	r13, r1
	uint8_t oldADCResult = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
	int EX_Count = 0x00; //count of objects that have hit optical sensor 3 (EX)
	int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
 468:	e1 2c       	mov	r14, r1
 46a:	f1 2c       	mov	r15, r1
	int stepperMovement = 0x00;
	uint8_t oldADCResult = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
	int EX_Count = 0x00; //count of objects that have hit optical sensor 3 (EX)
 46c:	00 e0       	ldi	r16, 0x00	; 0
 46e:	10 e0       	ldi	r17, 0x00	; 0
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	uint8_t oldADCResult = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
 470:	a1 2c       	mov	r10, r1
 472:	b1 2c       	mov	r11, r1
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	uint8_t oldADCResult = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
 474:	71 2c       	mov	r7, r1
 476:	0f 2e       	mov	r0, r31
int main(int argc, char *argv[]){
	/*User Variables*/
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	uint8_t oldADCResult = 0x00;
 478:	fa e7       	ldi	r31, 0x7A	; 122
	
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if(opt1Flag){
			opt1Flag=0x00; //reset flag
			ADCSRA |= _BV(ADSC); //initialize the ADC
 47a:	8f 2e       	mov	r8, r31
 47c:	91 2c       	mov	r9, r1
 47e:	f0 2d       	mov	r31, r0
 480:	61 2c       	mov	r6, r1
 482:	0f 2e       	mov	r0, r31
			if(ADCResult>oldADCResult){ //reflectivity is increasing still
				oldADCResult=ADCResult;
			}else if((ADCResult<0x04) && (ADCResult<oldADCResult)){ //minimal to no reflection AND reflectivities have been reducing	
				tempReflArray[RL_Count]=oldADCResult;//value of oldADCResult is added to a temporary array
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
				oldADCResult=0x00;//reset oldADCResult to 0 for the next objects reflectivites to be measured
 484:	f4 e6       	ldi	r31, 0x64	; 100
					tempType=50;//object is steel
				}
			} else { //object is plastic: white (light), black (dark)
				tempFerrous=0;
				if (tempReflArray[OR_Count]>WH_REFLECTIVITY){
					tempType=100;//object is white plastic
 486:	4f 2e       	mov	r4, r31
 488:	f0 2d       	mov	r31, r0
 48a:	0f 2e       	mov	r0, r31
 48c:	f6 e9       	ldi	r31, 0x96	; 150
			if(inductiveFlag){ //object is metal: aluminum (light), steel (dark)
				inductiveFlag=0x00;
				tempFerrous=1;
				//based on reflectivity, make an objective decision
				if (tempReflArray[OR_Count]>AL_REFLECTIVITY){
					tempType=150;//object is aluminum
 48e:	5f 2e       	mov	r5, r31
 490:	f0 2d       	mov	r31, r0
 492:	0f 2e       	mov	r0, r31
 494:	fe ec       	ldi	r31, 0xCE	; 206
			//if object type matches stepper location; do nothing...
			stepperMovement=stepperPosition-materialArray[EX_Count].type;
			if (stepperMovement!=0){//if object type doesn't match stepper location; stop motor, move stepper, start motor
				PORTB &=0xF0; //Apply Vcc brake to motor
				//stepper rotation logic
				if (stepperMovement==150) stepperMovement=-50;
 496:	2f 2e       	mov	r2, r31
 498:	f0 2d       	mov	r31, r0
 49a:	33 24       	eor	r3, r3
 49c:	3a 94       	dec	r3
 49e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <opt1Flag>
	inductiveFlag=0x00;
	optExitFlag=0x00;
	
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if(opt1Flag){
 4a2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <opt1Flag+0x1>
 4a6:	89 2b       	or	r24, r25
 4a8:	59 f0       	breq	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4aa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <opt1Flag+0x1>
			opt1Flag=0x00; //reset flag
 4ae:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <opt1Flag>
 4b2:	f4 01       	movw	r30, r8
 4b4:	80 81       	ld	r24, Z
			ADCSRA |= _BV(ADSC); //initialize the ADC
 4b6:	80 64       	ori	r24, 0x40	; 64
 4b8:	80 83       	st	Z, r24
 4ba:	ff ef       	ldi	r31, 0xFF	; 255
 4bc:	cf 1a       	sub	r12, r31
			OI_Count+=1; //add one to amount of objects unsorted
			OIOR_Count+=1;
 4be:	df 0a       	sbc	r13, r31
 4c0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCResultFlag>
		} 
		if(ADCResultFlag && OIOR_Count>0){ //if an ADC conversion is complete and there is an object between optical sensors 1 and 2
 4c4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <ADCResultFlag+0x1>
 4c8:	89 2b       	or	r24, r25
 4ca:	c1 f1       	breq	.+112    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4cc:	1c 14       	cp	r1, r12
 4ce:	1d 04       	cpc	r1, r13
 4d0:	ac f5       	brge	.+106    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADCResultFlag+0x1>
			ADCResultFlag=0; //reset flag
 4d6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADCResultFlag>
 4da:	87 2d       	mov	r24, r7
 4dc:	90 e0       	ldi	r25, 0x00	; 0
			if(ADCResult>oldADCResult){ //reflectivity is increasing still
 4de:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <ADCResult>
 4e2:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <ADCResult+0x1>
 4e6:	82 17       	cp	r24, r18
 4e8:	93 07       	cpc	r25, r19
 4ea:	30 f4       	brcc	.+12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4ec:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <ADCResult>
				oldADCResult=ADCResult;
 4f0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <ADCResult+0x1>
 4f4:	78 2e       	mov	r7, r24
 4f6:	1d c0       	rjmp	.+58     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 4f8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <ADCResult>
			}else if((ADCResult<0x04) && (ADCResult<oldADCResult)){ //minimal to no reflection AND reflectivities have been reducing	
 4fc:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <ADCResult+0x1>
 500:	24 30       	cpi	r18, 0x04	; 4
 502:	31 05       	cpc	r19, r1
 504:	b0 f4       	brcc	.+44     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 506:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <ADCResult>
 50a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <ADCResult+0x1>
 50e:	28 17       	cp	r18, r24
 510:	39 07       	cpc	r19, r25
 512:	78 f4       	brcc	.+30     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 514:	f5 01       	movw	r30, r10
 516:	ee 0f       	add	r30, r30
				tempReflArray[RL_Count]=oldADCResult;//value of oldADCResult is added to a temporary array
 518:	ff 1f       	adc	r31, r31
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	2c 0f       	add	r18, r28
 520:	3d 1f       	adc	r19, r29
 522:	e2 0f       	add	r30, r18
 524:	f3 1f       	adc	r31, r19
 526:	95 83       	std	Z+5, r25	; 0x05
 528:	84 83       	std	Z+4, r24	; 0x04
 52a:	3f ef       	ldi	r19, 0xFF	; 255
 52c:	a3 1a       	sub	r10, r19
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
 52e:	b3 0a       	sbc	r11, r19
 530:	76 2c       	mov	r7, r6
 532:	f4 01       	movw	r30, r8
				oldADCResult=0x00;//reset oldADCResult to 0 for the next objects reflectivites to be measured
 534:	80 81       	ld	r24, Z
			}
			ADCSRA |= _BV(ADSC); //re-trigger ADC
 536:	80 64       	ori	r24, 0x40	; 64
 538:	80 83       	st	Z, r24
 53a:	04 c0       	rjmp	.+8      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 53c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADCResultFlag+0x1>
		} else ADCResultFlag=0; //reset flag
 540:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADCResultFlag>
 544:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <opt2Flag>
		if(opt2Flag){
 548:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <opt2Flag+0x1>
 54c:	89 2b       	or	r24, r25
 54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 550:	46 c0       	rjmp	.+140    	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 552:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <opt2Flag+0x1>
			opt2Flag=0x00; //reset flag
 556:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <opt2Flag>
 55a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <inductiveFlag>
			if(inductiveFlag){ //object is metal: aluminum (light), steel (dark)
 55e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <inductiveFlag+0x1>
 562:	89 2b       	or	r24, r25
 564:	a1 f0       	breq	.+40     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 566:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <inductiveFlag+0x1>
				inductiveFlag=0x00;
 56a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <inductiveFlag>
 56e:	f8 01       	movw	r30, r16
 570:	ee 0f       	add	r30, r30
				tempFerrous=1;
				//based on reflectivity, make an objective decision
				if (tempReflArray[OR_Count]>AL_REFLECTIVITY){
 572:	ff 1f       	adc	r31, r31
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	2c 0f       	add	r18, r28
 57a:	3d 1f       	adc	r19, r29
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	84 81       	ldd	r24, Z+4	; 0x04
 582:	95 81       	ldd	r25, Z+5	; 0x05
 584:	81 32       	cpi	r24, 0x21	; 33
 586:	93 40       	sbci	r25, 0x03	; 3
 588:	90 f4       	brcc	.+36     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 58a:	82 e3       	ldi	r24, 0x32	; 50
 58c:	13 c0       	rjmp	.+38     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
					tempType=150;//object is aluminum
					} else {
					tempType=50;//object is steel
 58e:	f8 01       	movw	r30, r16
 590:	ee 0f       	add	r30, r30
				}
			} else { //object is plastic: white (light), black (dark)
				tempFerrous=0;
				if (tempReflArray[OR_Count]>WH_REFLECTIVITY){
 592:	ff 1f       	adc	r31, r31
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	8c 0f       	add	r24, r28
 59a:	9d 1f       	adc	r25, r29
 59c:	e8 0f       	add	r30, r24
 59e:	f9 1f       	adc	r31, r25
 5a0:	84 81       	ldd	r24, Z+4	; 0x04
 5a2:	95 81       	ldd	r25, Z+5	; 0x05
 5a4:	81 32       	cpi	r24, 0x21	; 33
 5a6:	93 40       	sbci	r25, 0x03	; 3
 5a8:	20 f4       	brcc	.+8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5aa:	86 2d       	mov	r24, r6
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
					tempType=100;//object is white plastic
					} else {
					tempType=0;//object is black plastic
 5ae:	85 2d       	mov	r24, r5
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
			if(inductiveFlag){ //object is metal: aluminum (light), steel (dark)
				inductiveFlag=0x00;
				tempFerrous=1;
				//based on reflectivity, make an objective decision
				if (tempReflArray[OR_Count]>AL_REFLECTIVITY){
					tempType=150;//object is aluminum
 5b2:	84 2d       	mov	r24, r4
 5b4:	f8 01       	movw	r30, r16
					tempType=50;//object is steel
				}
			} else { //object is plastic: white (light), black (dark)
				tempFerrous=0;
				if (tempReflArray[OR_Count]>WH_REFLECTIVITY){
					tempType=100;//object is white plastic
 5b6:	ee 0f       	add	r30, r30
				}
			}
			//add reflectivity, object type (black=0;aluminum=50;white=100;steel=150), and ferrousity (made-up word ':)') of object to structure
			materialArray[OR_Count].reflectance=tempReflArray[OR_Count];//unneccesary, but for completeness it exists
			materialArray[OR_Count].inductive=tempFerrous;
			materialArray[OR_Count].type=tempType;
 5b8:	ff 1f       	adc	r31, r31
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	e0 0f       	add	r30, r16
 5c0:	f1 1f       	adc	r31, r17
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	2c 0f       	add	r18, r28
 5c8:	3d 1f       	adc	r19, r29
 5ca:	e2 0f       	add	r30, r18
 5cc:	f3 1f       	adc	r31, r19
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	97 8b       	std	Z+23, r25	; 0x17
 5d2:	86 8b       	std	Z+22, r24	; 0x16
 5d4:	0f 5f       	subi	r16, 0xFF	; 255
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
			OR_Count+=1;
 5d8:	31 e0       	ldi	r19, 0x01	; 1
 5da:	c3 1a       	sub	r12, r19
			OIOR_Count-=1; //decrement count of objects between optical sensors 1 and 2
 5dc:	d1 08       	sbc	r13, r1
 5de:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <optExitFlag>
		}
		if(optExitFlag){ //object has hit sensor at end of conveyor
 5e2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <optExitFlag+0x1>
 5e6:	89 2b       	or	r24, r25
 5e8:	c1 f1       	breq	.+112    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 5ea:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <optExitFlag+0x1>
			optExitFlag=0x00; //reset flag
 5ee:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <optExitFlag>
 5f2:	f7 01       	movw	r30, r14
 5f4:	ee 0f       	add	r30, r30
			//corresponding positions (black=0;aluminum=50;white=100;steel=150)
			//if object type matches stepper location; do nothing...
			stepperMovement=stepperPosition-materialArray[EX_Count].type;
 5f6:	ff 1f       	adc	r31, r31
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	ee 0d       	add	r30, r14
 5fe:	ff 1d       	adc	r31, r15
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	8c 0f       	add	r24, r28
 606:	9d 1f       	adc	r25, r29
 608:	e8 0f       	add	r30, r24
 60a:	f9 1f       	adc	r31, r25
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	9a 81       	ldd	r25, Y+2	; 0x02
 610:	26 89       	ldd	r18, Z+22	; 0x16
 612:	37 89       	ldd	r19, Z+23	; 0x17
 614:	82 1b       	sub	r24, r18
 616:	93 0b       	sbc	r25, r19
 618:	e9 f0       	breq	.+58     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 61a:	25 b1       	in	r18, 0x05	; 5
			if (stepperMovement!=0){//if object type doesn't match stepper location; stop motor, move stepper, start motor
 61c:	20 7f       	andi	r18, 0xF0	; 240
				PORTB &=0xF0; //Apply Vcc brake to motor
 61e:	25 b9       	out	0x05, r18	; 5
 620:	86 39       	cpi	r24, 0x96	; 150
 622:	91 05       	cpc	r25, r1
				//stepper rotation logic
				if (stepperMovement==150) stepperMovement=-50;
 624:	51 f0       	breq	.+20     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 626:	8a 36       	cpi	r24, 0x6A	; 106
 628:	ef ef       	ldi	r30, 0xFF	; 255
				else if (stepperMovement==-150) stepperMovement=50;
 62a:	9e 07       	cpc	r25, r30
 62c:	49 f0       	breq	.+18     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62e:	84 36       	cpi	r24, 0x64	; 100
 630:	91 05       	cpc	r25, r1
				else if (stepperMovement== 100) stepperMovement=-100; //counter-clockwise is more efficient for particular stepper
 632:	41 f4       	brne	.+16     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 634:	8c e9       	ldi	r24, 0x9C	; 156
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	05 c0       	rjmp	.+10     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 63a:	82 2d       	mov	r24, r2
 63c:	93 2d       	mov	r25, r3
			//if object type matches stepper location; do nothing...
			stepperMovement=stepperPosition-materialArray[EX_Count].type;
			if (stepperMovement!=0){//if object type doesn't match stepper location; stop motor, move stepper, start motor
				PORTB &=0xF0; //Apply Vcc brake to motor
				//stepper rotation logic
				if (stepperMovement==150) stepperMovement=-50;
 63e:	02 c0       	rjmp	.+4      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 640:	82 e3       	ldi	r24, 0x32	; 50
 642:	90 e0       	ldi	r25, 0x00	; 0
				else if (stepperMovement==-150) stepperMovement=50;
 644:	ae 01       	movw	r20, r28
 646:	4d 5f       	subi	r20, 0xFD	; 253
				else if (stepperMovement== 100) stepperMovement=-100; //counter-clockwise is more efficient for particular stepper
				stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
 648:	5f 4f       	sbci	r21, 0xFF	; 255
 64a:	be 01       	movw	r22, r28
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	6c dd       	rcall	.-1320   	; 0x12a <stepperControl>
 652:	2b 9a       	sbi	0x05, 3	; 5
 654:	ff ef       	ldi	r31, 0xFF	; 255
				PORTB |=0b00001000; //start motor forwards
 656:	ef 1a       	sub	r14, r31
			}		
			EX_Count+=1;
 658:	ff 0a       	sbc	r15, r31
 65a:	2f e3       	ldi	r18, 0x3F	; 63
 65c:	a2 22       	and	r10, r18
		}
	//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
	OI_Count &= 0b00111111;
	RL_Count &= 0b00111111;
 65e:	bb 24       	eor	r11, r11
 660:	0f 73       	andi	r16, 0x3F	; 63
 662:	11 27       	eor	r17, r17
	OR_Count &= 0b00111111;
 664:	3f e3       	ldi	r19, 0x3F	; 63
 666:	e3 22       	and	r14, r19
	EX_Count &= 0b00111111;
 668:	ff 24       	eor	r15, r15
 66a:	19 cf       	rjmp	.-462    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>

0000066c <__vector_1>:
 66c:	1f 92       	push	r1
	}
 66e:	0f 92       	push	r0
	OCR0A = dutyCycle;//set duty cycle
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/
ISR(INT0_vect){ // on PD0; active low KILL SWITCH
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	8f 93       	push	r24
	PORTB &= 0b11110000; //stop motor by applying Vcc break
 678:	85 b1       	in	r24, 0x05	; 5
 67a:	80 7f       	andi	r24, 0xF0	; 240
 67c:	85 b9       	out	0x05, r24	; 5
}
 67e:	8f 91       	pop	r24
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <__vector_2>:
/*sensor 1: OI: 1st Optical-Inductive-Near Reflective sensor*/
ISR(INT1_vect){ // on PD1; active low
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
	opt1Flag=0x01;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <opt1Flag+0x1>
 6a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <opt1Flag>
}
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__vector_3>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Inductive sensor*/
ISR(INT2_vect){ // on PD2; active high
 6b2:	1f 92       	push	r1
 6b4:	0f 92       	push	r0
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	0f 92       	push	r0
 6ba:	11 24       	eor	r1, r1
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
	opt2Flag=0x01;
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <opt2Flag+0x1>
 6c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <opt2Flag>
}
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__vector_4>:
/*sensor 4: IN: Inductive sensor*/
ISR(INT3_vect){ //on PD3; active low
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	8f 93       	push	r24
 6e6:	9f 93       	push	r25
	inductiveFlag=0x01;
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <inductiveFlag+0x1>
 6f0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <inductiveFlag>
}
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_5>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT4_vect){ //on PE4; active low
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
	optExitFlag=0x01;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <optExitFlag+0x1>
 718:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <optExitFlag>
}
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <__vector_7>:
/*sensor 6: HE: Hall Effect sensor; used for homing stepper*/
ISR(INT6_vect){ //on PE6; Active low for hall effect sensor 
 72a:	1f 92       	push	r1
 72c:	0f 92       	push	r0
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	0f 92       	push	r0
 732:	11 24       	eor	r1, r1
 734:	8f 93       	push	r24
 736:	9f 93       	push	r25
	HallEffect=0x01;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <HallEffect+0x1>
 740:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <HallEffect>
}
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_29>:

/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	8f 93       	push	r24
 762:	9f 93       	push	r25
	ADCResult = ADCL;
 764:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ADCResult+0x1>
 76e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ADCResult>
	ADCResult += ADCH << 8;
 772:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 776:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <ADCResult>
 77a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <ADCResult+0x1>
 77e:	89 2f       	mov	r24, r25
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	98 2f       	mov	r25, r24
 784:	88 27       	eor	r24, r24
 786:	82 0f       	add	r24, r18
 788:	93 1f       	adc	r25, r19
 78a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <ADCResult+0x1>
 78e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <ADCResult>
	ADCResultFlag = 1;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADCResultFlag+0x1>
 79a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADCResultFlag>
}
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	3f 91       	pop	r19
 7a4:	2f 91       	pop	r18
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <__fixunssfsi>:
 7b0:	70 d0       	rcall	.+224    	; 0x892 <__fp_splitA>
 7b2:	88 f0       	brcs	.+34     	; 0x7d6 <__fixunssfsi+0x26>
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	90 f0       	brcs	.+36     	; 0x7dc <__fixunssfsi+0x2c>
 7b8:	b9 2f       	mov	r27, r25
 7ba:	99 27       	eor	r25, r25
 7bc:	b7 51       	subi	r27, 0x17	; 23
 7be:	a0 f0       	brcs	.+40     	; 0x7e8 <__fixunssfsi+0x38>
 7c0:	d1 f0       	breq	.+52     	; 0x7f6 <__fixunssfsi+0x46>
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	1a f0       	brmi	.+6      	; 0x7d2 <__fixunssfsi+0x22>
 7cc:	ba 95       	dec	r27
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__fixunssfsi+0x12>
 7d0:	12 c0       	rjmp	.+36     	; 0x7f6 <__fixunssfsi+0x46>
 7d2:	b1 30       	cpi	r27, 0x01	; 1
 7d4:	81 f0       	breq	.+32     	; 0x7f6 <__fixunssfsi+0x46>
 7d6:	77 d0       	rcall	.+238    	; 0x8c6 <__fp_zero>
 7d8:	b1 e0       	ldi	r27, 0x01	; 1
 7da:	08 95       	ret
 7dc:	74 c0       	rjmp	.+232    	; 0x8c6 <__fp_zero>
 7de:	67 2f       	mov	r22, r23
 7e0:	78 2f       	mov	r23, r24
 7e2:	88 27       	eor	r24, r24
 7e4:	b8 5f       	subi	r27, 0xF8	; 248
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <__fixunssfsi+0x46>
 7e8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ea:	cc f3       	brlt	.-14     	; 0x7de <__fixunssfsi+0x2e>
 7ec:	86 95       	lsr	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b3 95       	inc	r27
 7f4:	d9 f7       	brne	.-10     	; 0x7ec <__fixunssfsi+0x3c>
 7f6:	3e f4       	brtc	.+14     	; 0x806 <__fixunssfsi+0x56>
 7f8:	90 95       	com	r25
 7fa:	80 95       	com	r24
 7fc:	70 95       	com	r23
 7fe:	61 95       	neg	r22
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	08 95       	ret

00000808 <__floatunsisf>:
 808:	e8 94       	clt
 80a:	09 c0       	rjmp	.+18     	; 0x81e <__floatsisf+0x12>

0000080c <__floatsisf>:
 80c:	97 fb       	bst	r25, 7
 80e:	3e f4       	brtc	.+14     	; 0x81e <__floatsisf+0x12>
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	99 23       	and	r25, r25
 820:	a9 f0       	breq	.+42     	; 0x84c <__floatsisf+0x40>
 822:	f9 2f       	mov	r31, r25
 824:	96 e9       	ldi	r25, 0x96	; 150
 826:	bb 27       	eor	r27, r27
 828:	93 95       	inc	r25
 82a:	f6 95       	lsr	r31
 82c:	87 95       	ror	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	f1 11       	cpse	r31, r1
 836:	f8 cf       	rjmp	.-16     	; 0x828 <__floatsisf+0x1c>
 838:	fa f4       	brpl	.+62     	; 0x878 <__floatsisf+0x6c>
 83a:	bb 0f       	add	r27, r27
 83c:	11 f4       	brne	.+4      	; 0x842 <__floatsisf+0x36>
 83e:	60 ff       	sbrs	r22, 0
 840:	1b c0       	rjmp	.+54     	; 0x878 <__floatsisf+0x6c>
 842:	6f 5f       	subi	r22, 0xFF	; 255
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	16 c0       	rjmp	.+44     	; 0x878 <__floatsisf+0x6c>
 84c:	88 23       	and	r24, r24
 84e:	11 f0       	breq	.+4      	; 0x854 <__floatsisf+0x48>
 850:	96 e9       	ldi	r25, 0x96	; 150
 852:	11 c0       	rjmp	.+34     	; 0x876 <__floatsisf+0x6a>
 854:	77 23       	and	r23, r23
 856:	21 f0       	breq	.+8      	; 0x860 <__floatsisf+0x54>
 858:	9e e8       	ldi	r25, 0x8E	; 142
 85a:	87 2f       	mov	r24, r23
 85c:	76 2f       	mov	r23, r22
 85e:	05 c0       	rjmp	.+10     	; 0x86a <__floatsisf+0x5e>
 860:	66 23       	and	r22, r22
 862:	71 f0       	breq	.+28     	; 0x880 <__floatsisf+0x74>
 864:	96 e8       	ldi	r25, 0x86	; 134
 866:	86 2f       	mov	r24, r22
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	2a f0       	brmi	.+10     	; 0x878 <__floatsisf+0x6c>
 86e:	9a 95       	dec	r25
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	da f7       	brpl	.-10     	; 0x86e <__floatsisf+0x62>
 878:	88 0f       	add	r24, r24
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret

00000882 <__fp_split3>:
 882:	57 fd       	sbrc	r21, 7
 884:	90 58       	subi	r25, 0x80	; 128
 886:	44 0f       	add	r20, r20
 888:	55 1f       	adc	r21, r21
 88a:	59 f0       	breq	.+22     	; 0x8a2 <__fp_splitA+0x10>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	71 f0       	breq	.+28     	; 0x8ac <__fp_splitA+0x1a>
 890:	47 95       	ror	r20

00000892 <__fp_splitA>:
 892:	88 0f       	add	r24, r24
 894:	97 fb       	bst	r25, 7
 896:	99 1f       	adc	r25, r25
 898:	61 f0       	breq	.+24     	; 0x8b2 <__fp_splitA+0x20>
 89a:	9f 3f       	cpi	r25, 0xFF	; 255
 89c:	79 f0       	breq	.+30     	; 0x8bc <__fp_splitA+0x2a>
 89e:	87 95       	ror	r24
 8a0:	08 95       	ret
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	f2 cf       	rjmp	.-28     	; 0x890 <__fp_split3+0xe>
 8ac:	46 95       	lsr	r20
 8ae:	f1 df       	rcall	.-30     	; 0x892 <__fp_splitA>
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__fp_splitA+0x30>
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	f1 cf       	rjmp	.-30     	; 0x89e <__fp_splitA+0xc>
 8bc:	86 95       	lsr	r24
 8be:	71 05       	cpc	r23, r1
 8c0:	61 05       	cpc	r22, r1
 8c2:	08 94       	sec
 8c4:	08 95       	ret

000008c6 <__fp_zero>:
 8c6:	e8 94       	clt

000008c8 <__fp_szero>:
 8c8:	bb 27       	eor	r27, r27
 8ca:	66 27       	eor	r22, r22
 8cc:	77 27       	eor	r23, r23
 8ce:	cb 01       	movw	r24, r22
 8d0:	97 f9       	bld	r25, 7
 8d2:	08 95       	ret

000008d4 <__mulsf3>:
 8d4:	0b d0       	rcall	.+22     	; 0x8ec <__mulsf3x>
 8d6:	78 c0       	rjmp	.+240    	; 0x9c8 <__fp_round>
 8d8:	69 d0       	rcall	.+210    	; 0x9ac <__fp_pscA>
 8da:	28 f0       	brcs	.+10     	; 0x8e6 <__mulsf3+0x12>
 8dc:	6e d0       	rcall	.+220    	; 0x9ba <__fp_pscB>
 8de:	18 f0       	brcs	.+6      	; 0x8e6 <__mulsf3+0x12>
 8e0:	95 23       	and	r25, r21
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <__mulsf3+0x12>
 8e4:	5a c0       	rjmp	.+180    	; 0x99a <__fp_inf>
 8e6:	5f c0       	rjmp	.+190    	; 0x9a6 <__fp_nan>
 8e8:	11 24       	eor	r1, r1
 8ea:	ee cf       	rjmp	.-36     	; 0x8c8 <__fp_szero>

000008ec <__mulsf3x>:
 8ec:	ca df       	rcall	.-108    	; 0x882 <__fp_split3>
 8ee:	a0 f3       	brcs	.-24     	; 0x8d8 <__mulsf3+0x4>

000008f0 <__mulsf3_pse>:
 8f0:	95 9f       	mul	r25, r21
 8f2:	d1 f3       	breq	.-12     	; 0x8e8 <__mulsf3+0x14>
 8f4:	95 0f       	add	r25, r21
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	55 1f       	adc	r21, r21
 8fa:	62 9f       	mul	r22, r18
 8fc:	f0 01       	movw	r30, r0
 8fe:	72 9f       	mul	r23, r18
 900:	bb 27       	eor	r27, r27
 902:	f0 0d       	add	r31, r0
 904:	b1 1d       	adc	r27, r1
 906:	63 9f       	mul	r22, r19
 908:	aa 27       	eor	r26, r26
 90a:	f0 0d       	add	r31, r0
 90c:	b1 1d       	adc	r27, r1
 90e:	aa 1f       	adc	r26, r26
 910:	64 9f       	mul	r22, r20
 912:	66 27       	eor	r22, r22
 914:	b0 0d       	add	r27, r0
 916:	a1 1d       	adc	r26, r1
 918:	66 1f       	adc	r22, r22
 91a:	82 9f       	mul	r24, r18
 91c:	22 27       	eor	r18, r18
 91e:	b0 0d       	add	r27, r0
 920:	a1 1d       	adc	r26, r1
 922:	62 1f       	adc	r22, r18
 924:	73 9f       	mul	r23, r19
 926:	b0 0d       	add	r27, r0
 928:	a1 1d       	adc	r26, r1
 92a:	62 1f       	adc	r22, r18
 92c:	83 9f       	mul	r24, r19
 92e:	a0 0d       	add	r26, r0
 930:	61 1d       	adc	r22, r1
 932:	22 1f       	adc	r18, r18
 934:	74 9f       	mul	r23, r20
 936:	33 27       	eor	r19, r19
 938:	a0 0d       	add	r26, r0
 93a:	61 1d       	adc	r22, r1
 93c:	23 1f       	adc	r18, r19
 93e:	84 9f       	mul	r24, r20
 940:	60 0d       	add	r22, r0
 942:	21 1d       	adc	r18, r1
 944:	82 2f       	mov	r24, r18
 946:	76 2f       	mov	r23, r22
 948:	6a 2f       	mov	r22, r26
 94a:	11 24       	eor	r1, r1
 94c:	9f 57       	subi	r25, 0x7F	; 127
 94e:	50 40       	sbci	r21, 0x00	; 0
 950:	8a f0       	brmi	.+34     	; 0x974 <__mulsf3_pse+0x84>
 952:	e1 f0       	breq	.+56     	; 0x98c <__mulsf3_pse+0x9c>
 954:	88 23       	and	r24, r24
 956:	4a f0       	brmi	.+18     	; 0x96a <__mulsf3_pse+0x7a>
 958:	ee 0f       	add	r30, r30
 95a:	ff 1f       	adc	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	91 50       	subi	r25, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	a9 f7       	brne	.-22     	; 0x954 <__mulsf3_pse+0x64>
 96a:	9e 3f       	cpi	r25, 0xFE	; 254
 96c:	51 05       	cpc	r21, r1
 96e:	70 f0       	brcs	.+28     	; 0x98c <__mulsf3_pse+0x9c>
 970:	14 c0       	rjmp	.+40     	; 0x99a <__fp_inf>
 972:	aa cf       	rjmp	.-172    	; 0x8c8 <__fp_szero>
 974:	5f 3f       	cpi	r21, 0xFF	; 255
 976:	ec f3       	brlt	.-6      	; 0x972 <__mulsf3_pse+0x82>
 978:	98 3e       	cpi	r25, 0xE8	; 232
 97a:	dc f3       	brlt	.-10     	; 0x972 <__mulsf3_pse+0x82>
 97c:	86 95       	lsr	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	b7 95       	ror	r27
 984:	f7 95       	ror	r31
 986:	e7 95       	ror	r30
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	c1 f7       	brne	.-16     	; 0x97c <__mulsf3_pse+0x8c>
 98c:	fe 2b       	or	r31, r30
 98e:	88 0f       	add	r24, r24
 990:	91 1d       	adc	r25, r1
 992:	96 95       	lsr	r25
 994:	87 95       	ror	r24
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__fp_inf>:
 99a:	97 f9       	bld	r25, 7
 99c:	9f 67       	ori	r25, 0x7F	; 127
 99e:	80 e8       	ldi	r24, 0x80	; 128
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	08 95       	ret

000009a6 <__fp_nan>:
 9a6:	9f ef       	ldi	r25, 0xFF	; 255
 9a8:	80 ec       	ldi	r24, 0xC0	; 192
 9aa:	08 95       	ret

000009ac <__fp_pscA>:
 9ac:	00 24       	eor	r0, r0
 9ae:	0a 94       	dec	r0
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	09 06       	cpc	r0, r25
 9b8:	08 95       	ret

000009ba <__fp_pscB>:
 9ba:	00 24       	eor	r0, r0
 9bc:	0a 94       	dec	r0
 9be:	12 16       	cp	r1, r18
 9c0:	13 06       	cpc	r1, r19
 9c2:	14 06       	cpc	r1, r20
 9c4:	05 06       	cpc	r0, r21
 9c6:	08 95       	ret

000009c8 <__fp_round>:
 9c8:	09 2e       	mov	r0, r25
 9ca:	03 94       	inc	r0
 9cc:	00 0c       	add	r0, r0
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0xc>
 9d0:	88 23       	and	r24, r24
 9d2:	52 f0       	brmi	.+20     	; 0x9e8 <__fp_round+0x20>
 9d4:	bb 0f       	add	r27, r27
 9d6:	40 f4       	brcc	.+16     	; 0x9e8 <__fp_round+0x20>
 9d8:	bf 2b       	or	r27, r31
 9da:	11 f4       	brne	.+4      	; 0x9e0 <__fp_round+0x18>
 9dc:	60 ff       	sbrs	r22, 0
 9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__fp_round+0x20>
 9e0:	6f 5f       	subi	r22, 0xFF	; 255
 9e2:	7f 4f       	sbci	r23, 0xFF	; 255
 9e4:	8f 4f       	sbci	r24, 0xFF	; 255
 9e6:	9f 4f       	sbci	r25, 0xFF	; 255
 9e8:	08 95       	ret

000009ea <__divmodhi4>:
 9ea:	97 fb       	bst	r25, 7
 9ec:	07 2e       	mov	r0, r23
 9ee:	16 f4       	brtc	.+4      	; 0x9f4 <__divmodhi4+0xa>
 9f0:	00 94       	com	r0
 9f2:	06 d0       	rcall	.+12     	; 0xa00 <__divmodhi4_neg1>
 9f4:	77 fd       	sbrc	r23, 7
 9f6:	08 d0       	rcall	.+16     	; 0xa08 <__divmodhi4_neg2>
 9f8:	0b d0       	rcall	.+22     	; 0xa10 <__udivmodhi4>
 9fa:	07 fc       	sbrc	r0, 7
 9fc:	05 d0       	rcall	.+10     	; 0xa08 <__divmodhi4_neg2>
 9fe:	3e f4       	brtc	.+14     	; 0xa0e <__divmodhi4_exit>

00000a00 <__divmodhi4_neg1>:
 a00:	90 95       	com	r25
 a02:	81 95       	neg	r24
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	08 95       	ret

00000a08 <__divmodhi4_neg2>:
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a0e <__divmodhi4_exit>:
 a0e:	08 95       	ret

00000a10 <__udivmodhi4>:
 a10:	aa 1b       	sub	r26, r26
 a12:	bb 1b       	sub	r27, r27
 a14:	51 e1       	ldi	r21, 0x11	; 17
 a16:	07 c0       	rjmp	.+14     	; 0xa26 <__udivmodhi4_ep>

00000a18 <__udivmodhi4_loop>:
 a18:	aa 1f       	adc	r26, r26
 a1a:	bb 1f       	adc	r27, r27
 a1c:	a6 17       	cp	r26, r22
 a1e:	b7 07       	cpc	r27, r23
 a20:	10 f0       	brcs	.+4      	; 0xa26 <__udivmodhi4_ep>
 a22:	a6 1b       	sub	r26, r22
 a24:	b7 0b       	sbc	r27, r23

00000a26 <__udivmodhi4_ep>:
 a26:	88 1f       	adc	r24, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	5a 95       	dec	r21
 a2c:	a9 f7       	brne	.-22     	; 0xa18 <__udivmodhi4_loop>
 a2e:	80 95       	com	r24
 a30:	90 95       	com	r25
 a32:	bc 01       	movw	r22, r24
 a34:	cd 01       	movw	r24, r26
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
