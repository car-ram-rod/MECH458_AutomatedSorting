
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000e6a  00000efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  00000f06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001411  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d57  00000000  00000000  00002459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b6a  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085f  00000000  00000000  00003f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d28  00000000  00000000  000047fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	23 c5       	rjmp	.+2630   	; 0xa4c <__vector_1>
   6:	00 00       	nop
   8:	30 c5       	rjmp	.+2656   	; 0xa6a <__vector_2>
   a:	00 00       	nop
   c:	45 c5       	rjmp	.+2698   	; 0xa98 <__vector_3>
   e:	00 00       	nop
  10:	5a c5       	rjmp	.+2740   	; 0xac6 <__vector_4>
  12:	00 00       	nop
  14:	6f c5       	rjmp	.+2782   	; 0xaf4 <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b4 c5       	rjmp	.+2920   	; 0xb86 <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c5       	rjmp	.+2908   	; 0xbae <__vector_20>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c5       	rjmp	.+2732   	; 0xb22 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e6       	ldi	r30, 0x6A	; 106
  ac:	fe e0       	ldi	r31, 0x0E	; 14
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 31       	cpi	r26, 0x11	; 17
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	b2 d1       	rcall	.+868    	; 0x434 <main>
  d0:	ca c6       	rjmp	.+3476   	; 0xe66 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <timer1Init>:
#include "interrupt.h"
void timer1Init (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	TCCR1A = 0;
  d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  d8:	08 95       	ret

000000da <timer2Init>:
/*at a clock frequency of 8MHz this is a 1.024ms timer for each while loop cycle*/
/*e.g. (32/8MHz)x(0xFF=256)=0.001024s=1.024ms*/
void timer2Init(void){ //clock is turned on during interval of use and then off when unused
	//sei(); enables all interrupts thus following is unneccessary 
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
  da:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  de:	08 95       	ret

000000e0 <mTimer2>:
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  e0:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
  e2:	e1 eb       	ldi	r30, 0xB1	; 177
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	93 60       	ori	r25, 0x03	; 3
  ea:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
  ec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
  f0:	b8 99       	sbic	0x17, 0	; 23
  f2:	b8 9a       	sbi	0x17, 0	; 23
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	05 c0       	rjmp	.+10     	; 0x104 <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
  fa:	b8 9b       	sbis	0x17, 0	; 23
  fc:	fe cf       	rjmp	.-4      	; 0xfa <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
  fe:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 104:	24 17       	cp	r18, r20
 106:	35 07       	cpc	r19, r21
 108:	1c f4       	brge	.+6      	; 0x110 <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 10a:	b8 9b       	sbis	0x17, 0	; 23
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <mTimer2+0x1a>
 10e:	f7 cf       	rjmp	.-18     	; 0xfe <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 110:	e1 eb       	ldi	r30, 0xB1	; 177
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <timer3Init>:
}
void timer3Init(void){ //clock is turned on during interval of use and then off when unused
	TCCR3A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV3 flag
 11c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 120:	08 95       	ret

00000122 <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	7b 01       	movw	r14, r22
 13c:	5a 01       	movw	r10, r20
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
 13e:	da 01       	movw	r26, r20
 140:	ed 91       	ld	r30, X+
 142:	fc 91       	ld	r31, X
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
 144:	9c 01       	movw	r18, r24
 146:	99 23       	and	r25, r25
 148:	24 f4       	brge	.+8      	; 0x152 <stepperControl+0x30>
 14a:	22 27       	eor	r18, r18
 14c:	33 27       	eor	r19, r19
 14e:	28 1b       	sub	r18, r24
 150:	39 0b       	sbc	r19, r25
 152:	49 01       	movw	r8, r18
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
 154:	20 31       	cpi	r18, 0x10	; 16
 156:	31 05       	cpc	r19, r1
 158:	38 f4       	brcc	.+14     	; 0x168 <stepperControl+0x46>
		minDelay=maxDelay-absSteps/2;
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	02 2f       	mov	r16, r18
 160:	3f e0       	ldi	r19, 0x0F	; 15
 162:	53 2f       	mov	r21, r19
 164:	52 1b       	sub	r21, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <stepperControl+0x4a>
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
 168:	08 e0       	ldi	r16, 0x08	; 8
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
 16a:	57 e0       	ldi	r21, 0x07	; 7
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
 16c:	99 23       	and	r25, r25
 16e:	24 f4       	brge	.+8      	; 0x178 <stepperControl+0x56>
 170:	cc 24       	eor	r12, r12
 172:	ca 94       	dec	r12
 174:	dc 2c       	mov	r13, r12
 176:	03 c0       	rjmp	.+6      	; 0x17e <stepperControl+0x5c>
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
 178:	cc 24       	eor	r12, r12
 17a:	c3 94       	inc	r12
 17c:	d1 2c       	mov	r13, r1
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
 17e:	ec 0d       	add	r30, r12
 180:	fd 1d       	adc	r31, r13
	if(PORTAREGSet==4)PORTAREGSet=0;
 182:	e4 30       	cpi	r30, 0x04	; 4
 184:	f1 05       	cpc	r31, r1
 186:	39 f0       	breq	.+14     	; 0x196 <stepperControl+0x74>
	if(PORTAREGSet==-1)PORTAREGSet=3;
 188:	ef 3f       	cpi	r30, 0xFF	; 255
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	fc 07       	cpc	r31, r28
 18e:	29 f4       	brne	.+10     	; 0x19a <stepperControl+0x78>
 190:	e3 e0       	ldi	r30, 0x03	; 3
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <stepperControl+0x78>
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
	if(PORTAREGSet==4)PORTAREGSet=0;
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f0 e0       	ldi	r31, 0x00	; 0
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR1B &= 0b11111000; //disable timer1; needed due to automated counter in ISR that may cause missed steps
 19a:	a1 e8       	ldi	r26, 0x81	; 129
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	2c 91       	ld	r18, X
 1a0:	28 7f       	andi	r18, 0xF8	; 248
 1a2:	2c 93       	st	X, r18
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 1a4:	a1 eb       	ldi	r26, 0xB1	; 177
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	2c 91       	ld	r18, X
 1aa:	23 60       	ori	r18, 0x03	; 3
 1ac:	2c 93       	st	X, r18
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
 1ae:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
 1b2:	b8 99       	sbic	0x17, 0	; 23
 1b4:	b8 9a       	sbi	0x17, 0	; 23
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
 1b6:	df 01       	movw	r26, r30
 1b8:	aa 0f       	add	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a0 50       	subi	r26, 0x00	; 0
 1be:	bf 4f       	sbci	r27, 0xFF	; 255
 1c0:	2c 91       	ld	r18, X
 1c2:	22 b9       	out	0x02, r18	; 2
	for(i=2;i<=absSteps;i++){	
 1c4:	d2 e0       	ldi	r29, 0x02	; 2
 1c6:	8d 16       	cp	r8, r29
 1c8:	91 04       	cpc	r9, r1
 1ca:	f0 f1       	brcs	.+124    	; 0x248 <stepperControl+0x126>
 1cc:	4f e0       	ldi	r20, 0x0F	; 15
 1ce:	a2 e0       	ldi	r26, 0x02	; 2
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	0f 5f       	subi	r16, 0xFF	; 255
 1d6:	1f 4f       	sbci	r17, 0xFF	; 255
 1d8:	94 01       	movw	r18, r8
 1da:	2a 1b       	sub	r18, r26
 1dc:	3b 0b       	sbc	r19, r27
 1de:	02 17       	cp	r16, r18
 1e0:	13 07       	cpc	r17, r19
 1e2:	20 f4       	brcc	.+8      	; 0x1ec <stepperControl+0xca>
			if(delay>minDelay)delay -= 1;
 1e4:	54 17       	cp	r21, r20
 1e6:	30 f4       	brcc	.+12     	; 0x1f4 <stepperControl+0xd2>
 1e8:	41 50       	subi	r20, 0x01	; 1
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <stepperControl+0xd8>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
 1ec:	4f 30       	cpi	r20, 0x0F	; 15
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <stepperControl+0xd6>
 1f0:	4f 5f       	subi	r20, 0xFF	; 255
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <stepperControl+0xd8>
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
 1f4:	45 2f       	mov	r20, r21
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <stepperControl+0xd8>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
 1f8:	4f e0       	ldi	r20, 0x0F	; 15
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
 1fa:	ec 0d       	add	r30, r12
 1fc:	fd 1d       	adc	r31, r13
		if(PORTAREGSet==4)PORTAREGSet=0;
 1fe:	e4 30       	cpi	r30, 0x04	; 4
 200:	f1 05       	cpc	r31, r1
 202:	39 f0       	breq	.+14     	; 0x212 <stepperControl+0xf0>
		if(PORTAREGSet==-1)PORTAREGSet=3;
 204:	ef 3f       	cpi	r30, 0xFF	; 255
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	f2 07       	cpc	r31, r18
 20a:	29 f4       	brne	.+10     	; 0x216 <stepperControl+0xf4>
 20c:	e3 e0       	ldi	r30, 0x03	; 3
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <stepperControl+0xf4>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
 212:	e0 e0       	ldi	r30, 0x00	; 0
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	64 2f       	mov	r22, r20
 218:	70 e0       	ldi	r23, 0x00	; 0
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
		while (k<delay){ //iterate through given count
 21e:	05 c0       	rjmp	.+10     	; 0x22a <stepperControl+0x108>
			if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 220:	b8 9b       	sbis	0x17, 0	; 23
 222:	03 c0       	rjmp	.+6      	; 0x22a <stepperControl+0x108>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 224:	b8 9a       	sbi	0x17, 0	; 23
				k+=1;
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<delay){ //iterate through given count
 22a:	26 17       	cp	r18, r22
 22c:	37 07       	cpc	r19, r23
 22e:	c1 f7       	brne	.-16     	; 0x220 <stepperControl+0xfe>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
				k+=1;
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
 230:	9f 01       	movw	r18, r30
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	20 50       	subi	r18, 0x00	; 0
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	e9 01       	movw	r28, r18
 23c:	28 81       	ld	r18, Y
 23e:	22 b9       	out	0x02, r18	; 2
	TCCR1B &= 0b11111000; //disable timer1; needed due to automated counter in ISR that may cause missed steps
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	8a 16       	cp	r8, r26
 244:	9b 06       	cpc	r9, r27
 246:	40 f6       	brcc	.-112    	; 0x1d8 <stepperControl+0xb6>
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
	}
	TCCR2B&=0b11111000; //disable timer 2
 248:	a1 eb       	ldi	r26, 0xB1	; 177
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	2c 91       	ld	r18, X
 24e:	28 7f       	andi	r18, 0xF8	; 248
 250:	2c 93       	st	X, r18
	//re-enable timer 1 and re-initialize counter so the next early step doesn't occur until 16ms later, not instantly
	TCCR1B |= _BV(CS10); //clock pre-scalar (clk/1); 8ms per overflow; Starts timer1
 252:	a1 e8       	ldi	r26, 0x81	; 129
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	2c 91       	ld	r18, X
 258:	21 60       	ori	r18, 0x01	; 1
 25a:	2c 93       	st	X, r18
	TCNT1=0x0000; //set timer equal to zero
 25c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 260:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	if ((TIFR1 & 0x01) == 0x01)TIFR1|=0x01; //if TOV1 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 264:	b0 99       	sbic	0x16, 0	; 22
 266:	b0 9a       	sbi	0x16, 0	; 22
	stepEarlyCount =0; //reset counter for timer1
 268:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stepEarlyCount+0x1>
 26c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <stepEarlyCount>
	*stepperIt=PORTAREGSet;
 270:	d5 01       	movw	r26, r10
 272:	ed 93       	st	X+, r30
 274:	fc 93       	st	X, r31
	//*stepperIt=stepperSigOrd[(CURRENT_ITERATION+DIRECTION*(i-1))%4]; //set value of current iteration to variable address
	*stepperPos += steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
 276:	e7 01       	movw	r28, r14
 278:	28 81       	ld	r18, Y
 27a:	39 81       	ldd	r19, Y+1	; 0x01
 27c:	82 0f       	add	r24, r18
 27e:	93 1f       	adc	r25, r19
 280:	68 ec       	ldi	r22, 0xC8	; 200
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	c9 d5       	rcall	.+2962   	; 0xe18 <__divmodhi4>
 286:	99 83       	std	Y+1, r25	; 0x01
 288:	88 83       	st	Y, r24
	return; //returns nothing
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	bf 90       	pop	r11
 29c:	af 90       	pop	r10
 29e:	9f 90       	pop	r9
 2a0:	8f 90       	pop	r8
 2a2:	08 95       	ret

000002a4 <stepperHome>:
void stepperHome(int *stepperPos, int *stepperIt){
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	8c 01       	movw	r16, r24
 2b2:	7b 01       	movw	r14, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
 2b4:	12 b8       	out	0x02, r1	; 2
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
	return; //returns nothing
}
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2ba:	10 c0       	rjmp	.+32     	; 0x2dc <stepperHome+0x38>
		PORTA = stepperSigOrd[i];
 2bc:	fe 01       	movw	r30, r28
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e0 50       	subi	r30, 0x00	; 0
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	80 81       	ld	r24, Z
 2c8:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 2ca:	8e e1       	ldi	r24, 0x1E	; 30
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 df       	rcall	.-496    	; 0xe0 <mTimer2>
		i++;
 2d0:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2d2:	c4 30       	cpi	r28, 0x04	; 4
 2d4:	d1 05       	cpc	r29, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <stepperHome+0x38>
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <HallEffect>
 2e0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <HallEffect+0x1>
 2e4:	89 2b       	or	r24, r25
 2e6:	51 f3       	breq	.-44     	; 0x2bc <stepperHome+0x18>
		mTimer2(delay);
		i++;
		if (i==4)i=0;
	}
	i--;
	HallEffect=0x00;
 2e8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HallEffect+0x1>
 2ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <HallEffect>
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
 2f0:	ee 98       	cbi	0x1d, 6	; 29
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 2f2:	c4 30       	cpi	r28, 0x04	; 4
 2f4:	d1 05       	cpc	r29, r1
 2f6:	a9 f1       	breq	.+106    	; 0x362 <stepperHome+0xbe>
		if (i==-1)i=3;
 2f8:	cf 3f       	cpi	r28, 0xFF	; 255
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	d8 07       	cpc	r29, r24
 2fe:	41 f1       	breq	.+80     	; 0x350 <stepperHome+0xac>
		PORTA = stepperSigOrd[i];
 300:	fe 01       	movw	r30, r28
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	e0 50       	subi	r30, 0x00	; 0
 308:	ff 4f       	sbci	r31, 0xFF	; 255
 30a:	80 81       	ld	r24, Z
 30c:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 30e:	8e e1       	ldi	r24, 0x1E	; 30
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	e6 de       	rcall	.-564    	; 0xe0 <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 314:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 316:	c4 30       	cpi	r28, 0x04	; 4
 318:	d1 05       	cpc	r29, r1
 31a:	39 f0       	breq	.+14     	; 0x32a <stepperHome+0x86>
		if (i==-1)i=3;
 31c:	cf 3f       	cpi	r28, 0xFF	; 255
 31e:	ef ef       	ldi	r30, 0xFF	; 255
 320:	de 07       	cpc	r29, r30
 322:	29 f4       	brne	.+10     	; 0x32e <stepperHome+0x8a>
 324:	c3 e0       	ldi	r28, 0x03	; 3
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <stepperHome+0x8a>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 32a:	c0 e0       	ldi	r28, 0x00	; 0
 32c:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 32e:	fe 01       	movw	r30, r28
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	80 81       	ld	r24, Z
 33a:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 33c:	8e e1       	ldi	r24, 0x1E	; 30
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	cf de       	rcall	.-610    	; 0xe0 <mTimer2>
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
 342:	f7 01       	movw	r30, r14
 344:	d1 83       	std	Z+1, r29	; 0x01
 346:	c0 83       	st	Z, r28
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
 348:	f8 01       	movw	r30, r16
 34a:	11 82       	std	Z+1, r1	; 0x01
 34c:	10 82       	st	Z, r1
}
 34e:	12 c0       	rjmp	.+36     	; 0x374 <stepperHome+0xd0>
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 350:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_start+0x6>
		mTimer2(delay);
 354:	82 b9       	out	0x02, r24	; 2
 356:	8e e1       	ldi	r24, 0x1E	; 30
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	c2 de       	rcall	.-636    	; 0xe0 <mTimer2>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 35c:	c0 e0       	ldi	r28, 0x00	; 0
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	e6 cf       	rjmp	.-52     	; 0x32e <stepperHome+0x8a>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		mTimer2(delay);
 366:	82 b9       	out	0x02, r24	; 2
 368:	8e e1       	ldi	r24, 0x1E	; 30
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	b9 de       	rcall	.-654    	; 0xe0 <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 36e:	c1 e0       	ldi	r28, 0x01	; 1
 370:	d0 e0       	ldi	r29, 0x00	; 0
 372:	dd cf       	rjmp	.-70     	; 0x32e <stepperHome+0x8a>
		mTimer2(delay);
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	08 95       	ret

00000382 <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 382:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 384:	84 b5       	in	r24, 0x24	; 36
 386:	83 68       	ori	r24, 0x83	; 131
 388:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 38a:	85 b5       	in	r24, 0x25	; 37
 38c:	83 60       	ori	r24, 0x03	; 3
 38e:	85 bd       	out	0x25, r24	; 37
	//TCCR0B &= 0b11111101;
	dutyCycle = motorDuty*2.55;
 390:	07 2e       	mov	r0, r23
 392:	00 0c       	add	r0, r0
 394:	88 0b       	sbc	r24, r24
 396:	99 0b       	sbc	r25, r25
 398:	50 d4       	rcall	.+2208   	; 0xc3a <__floatsisf>
 39a:	23 e3       	ldi	r18, 0x33	; 51
 39c:	33 e3       	ldi	r19, 0x33	; 51
 39e:	43 e2       	ldi	r20, 0x23	; 35
 3a0:	50 e4       	ldi	r21, 0x40	; 64
 3a2:	af d4       	rcall	.+2398   	; 0xd02 <__mulsf3>
 3a4:	1c d4       	rcall	.+2104   	; 0xbde <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 3a6:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	80 7f       	andi	r24, 0xF0	; 240
 3ac:	85 b9       	out	0x05, r24	; 5
 3ae:	08 95       	ret

000003b0 <setupISR>:
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//Ex: rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//Ex: falling edge on INT2: EICRA |= _BV(ISC21);
	//see ISR routines for 
	EIMSK |=0b01011111; //initialize INT6,4:0
 3b0:	8d b3       	in	r24, 0x1d	; 29
 3b2:	8f 65       	ori	r24, 0x5F	; 95
 3b4:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0b11101110; //rising edge triggers for INT1 (OI) and INT3 (OR); falling edge detection on INT2 (IN) and INT4 (EX)
 3b6:	e9 e6       	ldi	r30, 0x69	; 105
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	8e 6e       	ori	r24, 0xEE	; 238
 3be:	80 83       	st	Z, r24
	EICRB |= 0b00100010; //active low for INT6 and INT4
 3c0:	ea e6       	ldi	r30, 0x6A	; 106
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	82 62       	ori	r24, 0x22	; 34
 3c8:	80 83       	st	Z, r24
 3ca:	08 95       	ret

000003cc <setupADC>:
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 3cc:	ea e7       	ldi	r30, 0x7A	; 122
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	8d 68       	ori	r24, 0x8D	; 141
 3d4:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 3d6:	ec e7       	ldi	r30, 0x7C	; 124
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	81 64       	ori	r24, 0x41	; 65
 3de:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 3e0:	80 81       	ld	r24, Z
 3e2:	81 7e       	andi	r24, 0xE1	; 225
 3e4:	80 83       	st	Z, r24
 3e6:	08 95       	ret

000003e8 <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 3e8:	26 2f       	mov	r18, r22
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 3f0:	43 70       	andi	r20, 0x03	; 3
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	42 17       	cp	r20, r18
 3f6:	53 07       	cpc	r21, r19
 3f8:	81 f0       	breq	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		PORTB &= 0b11110000; //apply Vcc Brake
 3fa:	45 b1       	in	r20, 0x05	; 5
 3fc:	40 7f       	andi	r20, 0xF0	; 240
 3fe:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 400:	45 b1       	in	r20, 0x05	; 5
 402:	20 95       	com	r18
 404:	30 95       	com	r19
 406:	23 70       	andi	r18, 0x03	; 3
 408:	33 27       	eor	r19, r19
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	24 2b       	or	r18, r20
 414:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 416:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 41a:	bc 01       	movw	r22, r24
 41c:	99 0f       	add	r25, r25
 41e:	88 0b       	sbc	r24, r24
 420:	99 0b       	sbc	r25, r25
 422:	0b d4       	rcall	.+2070   	; 0xc3a <__floatsisf>
 424:	23 e3       	ldi	r18, 0x33	; 51
 426:	33 e3       	ldi	r19, 0x33	; 51
 428:	43 e2       	ldi	r20, 0x23	; 35
 42a:	50 e4       	ldi	r21, 0x40	; 64
 42c:	6a d4       	rcall	.+2260   	; 0xd02 <__mulsf3>
 42e:	d7 d3       	rcall	.+1966   	; 0xbde <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 430:	67 bd       	out	0x27, r22	; 39
 432:	08 95       	ret

00000434 <main>:
//volatile unsigned int ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete
volatile unsigned int HallEffect; //becomes set during stepper homing to know position
unsigned int stepperSigOrd[4] = {0b00110110,0b00101110,0b00101101,0b00110101};

/* Main Routine */
int main(int argc, char *argv[]){
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	ca 59       	subi	r28, 0x9A	; 154
 43e:	d1 40       	sbci	r29, 0x01	; 1
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 44a:	e1 e6       	ldi	r30, 0x61	; 97
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	80 83       	st	Z, r24
	CLKPR = 0;
 452:	10 82       	st	Z, r1
	/*User Variables*/
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 454:	1a 82       	std	Y+2, r1	; 0x02
 456:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
 458:	1c 82       	std	Y+4, r1	; 0x04
 45a:	1b 82       	std	Y+3, r1	; 0x03
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
 45c:	fe 01       	movw	r30, r28
 45e:	35 96       	adiw	r30, 0x05	; 5
 460:	80 e1       	ldi	r24, 0x10	; 16
 462:	df 01       	movw	r26, r30
 464:	1d 92       	st	X+, r1
 466:	8a 95       	dec	r24
 468:	e9 f7       	brne	.-6      	; 0x464 <main+0x30>
	uint8_t ST_Count = 0x00;
	uint8_t AL_Count = 0x00;
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
 46a:	70 96       	adiw	r30, 0x10	; 16
 46c:	80 e4       	ldi	r24, 0x40	; 64
 46e:	df 01       	movw	r26, r30
 470:	1d 92       	st	X+, r1
 472:	8a 95       	dec	r24
 474:	e9 f7       	brne	.-6      	; 0x470 <main+0x3c>
		uint8_t inductive; //states whether object is ferrous or not (0=>non-ferrous;1=>ferrous)
		}material;
	//initialize array of structures for storage	
	struct material materialArray[64];
	/*initializations*/
	cli(); //disable interrupts
 476:	f8 94       	cli
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
 478:	88 e2       	ldi	r24, 0x28	; 40
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	82 df       	rcall	.-252    	; 0x382 <setupPWM>
	setupISR();
 47e:	98 df       	rcall	.-208    	; 0x3b0 <setupISR>
	setupADC();
 480:	a5 df       	rcall	.-182    	; 0x3cc <setupADC>
	timer1Init();
 482:	28 de       	rcall	.-944    	; 0xd4 <timer1Init>
 484:	2a de       	rcall	.-940    	; 0xda <timer2Init>
	timer2Init();
 486:	4a de       	rcall	.-876    	; 0x11c <timer3Init>
 488:	8f ef       	ldi	r24, 0xFF	; 255
	timer3Init();
 48a:	81 b9       	out	0x01, r24	; 1
 48c:	84 b9       	out	0x04, r24	; 4
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 48e:	87 b9       	out	0x07, r24	; 7
 490:	80 ef       	ldi	r24, 0xF0	; 240
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 492:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF; //LEDs Debugging
 494:	1d b8       	out	0x0d, r1	; 13
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 496:	10 ba       	out	0x10, r1	; 16
 498:	78 94       	sei
	DDRE = 0x00; /*PE4=HallEffect for stepper*/
 49a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <systemFlag+0x1>
	DDRF = 0x00; /*PF1=ADC1 pin*/	
	sei(); //enable interrupts
 49e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <systemFlag>
	// PORTB &= 0b1110000; //apply Vcc brake to motor
	//PORTB |=0b1000; //start motor in specified direction
	/*initialize flags and counters*/
	systemFlag=0x0000;
 4a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HallEffect+0x1>
 4a6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <HallEffect>
	//opt1Flag=0x00;
	//opt2Flag=0x00;
	//inductiveFlag=0x00;
	//optExitFlag=0x00;
	//ADCResultFlag=0x00;	
	HallEffect=0x00; 
 4aa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stepEarlyCount+0x1>
 4ae:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <stepEarlyCount>
	stepEarlyCount=0x00;
 4b2:	be 01       	movw	r22, r28
 4b4:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	f3 de       	rcall	.-538    	; 0x2a4 <stepperHome>
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	88 e2       	ldi	r24, 0x28	; 40
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	91 df       	rcall	.-222    	; 0x3e8 <motorControl>
 4c6:	ca 56       	subi	r28, 0x6A	; 106
 4c8:	de 4f       	sbci	r29, 0xFE	; 254
 4ca:	18 82       	st	Y, r1
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
	uint8_t tempFerrous=0;
	uint8_t startMeasureFlag=0x00; //allows the ADC conversions to stop if no object is in front of RL sensor
	uint8_t falseInductFlag=0x00;
 4cc:	c6 59       	subi	r28, 0x96	; 150
 4ce:	d1 40       	sbci	r29, 0x01	; 1
 4d0:	cb 56       	subi	r28, 0x6B	; 107
 4d2:	de 4f       	sbci	r29, 0xFE	; 254
 4d4:	18 82       	st	Y, r1
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
	uint8_t tempFerrous=0;
	uint8_t startMeasureFlag=0x00; //allows the ADC conversions to stop if no object is in front of RL sensor
 4d6:	c5 59       	subi	r28, 0x95	; 149
 4d8:	d1 40       	sbci	r29, 0x01	; 1
 4da:	c1 2c       	mov	r12, r1
 4dc:	d1 2c       	mov	r13, r1
 4de:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t WH_Count = 0x00;
	uint8_t ST_Count = 0x00;
	uint8_t AL_Count = 0x00;
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
 4e0:	10 e0       	ldi	r17, 0x00	; 0
 4e2:	a1 2c       	mov	r10, r1
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
	int EX_Count = 0x00; //count of objects that have hit optical sensor 3 (EX)
 4e4:	b1 2c       	mov	r11, r1
 4e6:	e1 2c       	mov	r14, r1
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
 4e8:	f1 2c       	mov	r15, r1
 4ea:	51 2c       	mov	r5, r1
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
 4ec:	0f 2e       	mov	r0, r31
 4ee:	22 24       	eor	r2, r2
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
 4f0:	2a 94       	dec	r2
	int tempEarlyType = 0;
	int Direction = 1;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
 4f2:	f3 e0       	ldi	r31, 0x03	; 3
 4f4:	3f 2e       	mov	r3, r31
 4f6:	f0 2d       	mov	r31, r0
 4f8:	c7 56       	subi	r28, 0x67	; 103
 4fa:	de 4f       	sbci	r29, 0xFE	; 254
 4fc:	19 82       	std	Y+1, r1	; 0x01
	int stepEarlyMovement =0x00;
	int tempEarlyType = 0;
	int Direction = 1;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
 4fe:	18 82       	st	Y, r1
 500:	c9 59       	subi	r28, 0x99	; 153
 502:	d1 40       	sbci	r29, 0x01	; 1
 504:	c9 56       	subi	r28, 0x69	; 105
 506:	de 4f       	sbci	r29, 0xFE	; 254
 508:	19 82       	std	Y+1, r1	; 0x01
	uint8_t stepEarlyFlag = 0x00;
	int stepEarlyMovement =0x00;
	int tempEarlyType = 0;
	int Direction = 1;
	int tempType = 0;
	int tempOI_Count=0;
 50a:	18 82       	st	Y, r1
 50c:	c7 59       	subi	r28, 0x97	; 151
 50e:	d1 40       	sbci	r29, 0x01	; 1
 510:	41 2c       	mov	r4, r1
 512:	0f 2e       	mov	r0, r31
 514:	fa e7       	ldi	r31, 0x7A	; 122
	/*User Variables*/
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	uint8_t stepEarlyFlag = 0x00;
 516:	8f 2e       	mov	r8, r31
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
			systemFlag&=0xFB; //reset flag
			OR_Count+=1;
			OREX_Count+=1;
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 518:	91 2c       	mov	r9, r1
 51a:	f0 2d       	mov	r31, r0
 51c:	0f 2e       	mov	r0, r31
 51e:	f1 e8       	ldi	r31, 0x81	; 129
 520:	6f 2e       	mov	r6, r31
				stepperPosition+=Direction;
				stepperPosition%=200;
				//move stepper in correct direction
			}
		} else {
			TCCR1B&=0b11111000; //disable timer 1 
 522:	71 2c       	mov	r7, r1
 524:	f0 2d       	mov	r31, r0
 526:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 52a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
	HallEffect=0x00; 
	stepEarlyCount=0x00;
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if(systemFlag&0x01){ //triggered on a rising edge for an active low signal (i.e. when the object has just passed optical sensor 1)
 52e:	80 ff       	sbrs	r24, 0
 530:	0d c0       	rjmp	.+26     	; 0x54c <main+0x118>
 532:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 536:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
			systemFlag&=0xFE; //reset flag
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	99 27       	eor	r25, r25
 53e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 542:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 546:	bf ef       	ldi	r27, 0xFF	; 255
 548:	eb 1a       	sub	r14, r27
 54a:	fb 0a       	sbc	r15, r27
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
 54c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 550:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
 554:	81 ff       	sbrs	r24, 1
 556:	a0 c0       	rjmp	.+320    	; 0x698 <main+0x264>
 558:	ca 56       	subi	r28, 0x6A	; 106
 55a:	de 4f       	sbci	r29, 0xFE	; 254
 55c:	e8 81       	ld	r30, Y
			if (falseInductFlag==0x00){
 55e:	c6 59       	subi	r28, 0x96	; 150
 560:	d1 40       	sbci	r29, 0x01	; 1
 562:	e1 11       	cpse	r30, r1
 564:	4c c0       	rjmp	.+152    	; 0x5fe <main+0x1ca>
 566:	e1 14       	cp	r14, r1
 568:	f1 04       	cpc	r15, r1
 56a:	a1 f0       	breq	.+40     	; 0x594 <main+0x160>
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
 56c:	f7 01       	movw	r30, r14
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	25 e1       	ldi	r18, 0x15	; 21
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	2c 0f       	add	r18, r28
 576:	3d 1f       	adc	r19, r29
 578:	e2 0f       	add	r30, r18
 57a:	f3 1f       	adc	r31, r19
 57c:	80 81       	ld	r24, Z
 57e:	68 2f       	mov	r22, r24
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	c7 56       	subi	r28, 0x67	; 103
 584:	de 4f       	sbci	r29, 0xFE	; 254
 586:	79 83       	std	Y+1, r23	; 0x01
 588:	68 83       	st	Y, r22
 58a:	c9 59       	subi	r28, 0x99	; 153
 58c:	d1 40       	sbci	r29, 0x01	; 1
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 83       	st	Z, r24
 592:	0f c0       	rjmp	.+30     	; 0x5b2 <main+0x17e>
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
 594:	65 96       	adiw	r28, 0x15	; 21
 596:	8f ad       	ldd	r24, Y+63	; 0x3f
 598:	65 97       	sbiw	r28, 0x15	; 21
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
 59a:	a8 2f       	mov	r26, r24
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	c7 56       	subi	r28, 0x67	; 103
 5a0:	de 4f       	sbci	r29, 0xFE	; 254
 5a2:	b9 83       	std	Y+1, r27	; 0x01
 5a4:	a8 83       	st	Y, r26
 5a6:	c9 59       	subi	r28, 0x99	; 153
 5a8:	d1 40       	sbci	r29, 0x01	; 1
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	65 96       	adiw	r28, 0x15	; 21
 5ae:	8f af       	std	Y+63, r24	; 0x3f
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
 5b0:	65 97       	sbiw	r28, 0x15	; 21
 5b2:	e1 e9       	ldi	r30, 0x91	; 145
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
				tempOI_Count=OI_Count;
				falseInductFlag=0x01;
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
 5b8:	81 60       	ori	r24, 0x01	; 1
 5ba:	80 83       	st	Z, r24
 5bc:	a4 e9       	ldi	r26, 0x94	; 148
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	11 96       	adiw	r26, 0x01	; 1
				TCNT3=0x00; //set timer equal to zero
 5c2:	1c 92       	st	X, r1
 5c4:	1e 92       	st	-X, r1
 5c6:	c0 9b       	sbis	0x18, 0	; 24
 5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <main+0x1b2>
 5ca:	c0 9a       	sbi	0x18, 0	; 24
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 5cc:	c9 56       	subi	r28, 0x69	; 105
 5ce:	de 4f       	sbci	r29, 0xFE	; 254
 5d0:	f9 82       	std	Y+1, r15	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 5d2:	e8 82       	st	Y, r14
 5d4:	c7 59       	subi	r28, 0x97	; 151
 5d6:	d1 40       	sbci	r29, 0x01	; 1
 5d8:	b1 e0       	ldi	r27, 0x01	; 1
 5da:	ca 56       	subi	r28, 0x6A	; 106
 5dc:	de 4f       	sbci	r29, 0xFE	; 254
				falseInductFlag=0x01;
 5de:	b8 83       	st	Y, r27
 5e0:	c6 59       	subi	r28, 0x96	; 150
 5e2:	d1 40       	sbci	r29, 0x01	; 1
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <main+0x1ca>
 5e6:	c9 56       	subi	r28, 0x69	; 105
 5e8:	de 4f       	sbci	r29, 0xFE	; 254
 5ea:	f9 82       	std	Y+1, r15	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 5ec:	e8 82       	st	Y, r14
 5ee:	c7 59       	subi	r28, 0x97	; 151
 5f0:	d1 40       	sbci	r29, 0x01	; 1
 5f2:	e1 e0       	ldi	r30, 0x01	; 1
 5f4:	ca 56       	subi	r28, 0x6A	; 106
 5f6:	de 4f       	sbci	r29, 0xFE	; 254
				falseInductFlag=0x01;
 5f8:	e8 83       	st	Y, r30
 5fa:	c6 59       	subi	r28, 0x96	; 150
 5fc:	d1 40       	sbci	r29, 0x01	; 1
 5fe:	c0 9b       	sbis	0x18, 0	; 24
 600:	4b c0       	rjmp	.+150    	; 0x698 <main+0x264>
 602:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
 606:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
 60a:	8d 7f       	andi	r24, 0xFD	; 253
 60c:	99 27       	eor	r25, r25
 60e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 612:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 616:	a1 e9       	ldi	r26, 0x91	; 145
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	8c 91       	ld	r24, X
				TCCR3B&=0b11111000; //disable timer 3
 61c:	88 7f       	andi	r24, 0xF8	; 248
 61e:	8c 93       	st	X, r24
 620:	c9 56       	subi	r28, 0x69	; 105
 622:	de 4f       	sbci	r29, 0xFE	; 254
 624:	e8 81       	ld	r30, Y
				falseInductFlag=0x00; //reset flag
				if (tempOI_Count!=OI_Count){
 626:	f9 81       	ldd	r31, Y+1	; 0x01
 628:	c7 59       	subi	r28, 0x97	; 151
 62a:	d1 40       	sbci	r29, 0x01	; 1
 62c:	ee 15       	cp	r30, r14
 62e:	ff 05       	cpc	r31, r15
 630:	71 f1       	breq	.+92     	; 0x68e <main+0x25a>
 632:	c7 01       	movw	r24, r14
 634:	02 97       	sbiw	r24, 0x02	; 2
 636:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
 638:	90 78       	andi	r25, 0x80	; 128
 63a:	99 23       	and	r25, r25
 63c:	24 f4       	brge	.+8      	; 0x646 <main+0x212>
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	80 6c       	ori	r24, 0xC0	; 192
 642:	9f 6f       	ori	r25, 0xFF	; 255
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	e5 e1       	ldi	r30, 0x15	; 21
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ec 0f       	add	r30, r28
 64c:	fd 1f       	adc	r31, r29
 64e:	e8 0f       	add	r30, r24
 650:	f9 1f       	adc	r31, r25
 652:	c7 56       	subi	r28, 0x67	; 103
 654:	de 4f       	sbci	r29, 0xFE	; 254
 656:	28 81       	ld	r18, Y
 658:	c9 59       	subi	r28, 0x99	; 153
 65a:	d1 40       	sbci	r29, 0x01	; 1
 65c:	20 83       	st	Z, r18
 65e:	c7 01       	movw	r24, r14
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
 664:	90 78       	andi	r25, 0x80	; 128
 666:	99 23       	and	r25, r25
 668:	24 f4       	brge	.+8      	; 0x672 <main+0x23e>
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	80 6c       	ori	r24, 0xC0	; 192
 66e:	9f 6f       	ori	r25, 0xFF	; 255
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	e5 e1       	ldi	r30, 0x15	; 21
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	e8 0f       	add	r30, r24
 67c:	f9 1f       	adc	r31, r25
 67e:	21 e0       	ldi	r18, 0x01	; 1
 680:	20 83       	st	Z, r18
 682:	ca 56       	subi	r28, 0x6A	; 106
 684:	de 4f       	sbci	r29, 0xFE	; 254
 686:	18 82       	st	Y, r1
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
				falseInductFlag=0x00; //reset flag
 688:	c6 59       	subi	r28, 0x96	; 150
 68a:	d1 40       	sbci	r29, 0x01	; 1
 68c:	05 c0       	rjmp	.+10     	; 0x698 <main+0x264>
 68e:	ca 56       	subi	r28, 0x6A	; 106
 690:	de 4f       	sbci	r29, 0xFE	; 254
 692:	18 82       	st	Y, r1
 694:	c6 59       	subi	r28, 0x96	; 150
 696:	d1 40       	sbci	r29, 0x01	; 1
 698:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 69c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
				}	
			}
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
 6a0:	82 ff       	sbrs	r24, 2
 6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <main+0x29e>
 6a4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 6a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
			systemFlag&=0xFB; //reset flag
 6ac:	8b 7f       	andi	r24, 0xFB	; 251
 6ae:	99 27       	eor	r25, r25
 6b0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 6b4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 6b8:	3f ef       	ldi	r19, 0xFF	; 255
 6ba:	c3 1a       	sub	r12, r19
 6bc:	d3 0a       	sbc	r13, r19
			OR_Count+=1;
			OREX_Count+=1;
 6be:	d4 01       	movw	r26, r8
 6c0:	8c 91       	ld	r24, X
 6c2:	80 64       	ori	r24, 0x40	; 64
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 6c4:	8c 93       	st	X, r24
 6c6:	b1 e0       	ldi	r27, 0x01	; 1
 6c8:	cb 56       	subi	r28, 0x6B	; 107
 6ca:	de 4f       	sbci	r29, 0xFE	; 254
			startMeasureFlag=0x01;//allow ADC conversions to continue
 6cc:	b8 83       	st	Y, r27
 6ce:	c5 59       	subi	r28, 0x95	; 149
 6d0:	d1 40       	sbci	r29, 0x01	; 1
 6d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 6d6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
		}
		if(systemFlag&0x08){ //object has hit sensor at end of conveyor
 6da:	83 ff       	sbrs	r24, 3
 6dc:	3f c0       	rjmp	.+126    	; 0x75c <main+0x328>
 6de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 6e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
			systemFlag&=0xF7; //reset flag
 6e6:	87 7f       	andi	r24, 0xF7	; 247
 6e8:	99 27       	eor	r25, r25
 6ea:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 6ee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 6f2:	f8 01       	movw	r30, r16
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
			//corresponding positions (black=0;aluminum=50;white=100;steel=150)
			//if object type matches stepper location; do nothing...
			tempType=materialArray[EX_Count].type;
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	e0 0f       	add	r30, r16
 6fe:	f1 1f       	adc	r31, r17
 700:	25 e5       	ldi	r18, 0x55	; 85
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	2c 0f       	add	r18, r28
 706:	3d 1f       	adc	r19, r29
 708:	e2 0f       	add	r30, r18
 70a:	f3 1f       	adc	r31, r19
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	9a 81       	ldd	r25, Y+2	; 0x02
 710:	22 81       	ldd	r18, Z+2	; 0x02
			stepperMovement=stepperPosition-tempType;
 712:	33 81       	ldd	r19, Z+3	; 0x03
 714:	82 1b       	sub	r24, r18
 716:	93 0b       	sbc	r25, r19
 718:	e1 f0       	breq	.+56     	; 0x752 <main+0x31e>
 71a:	25 b1       	in	r18, 0x05	; 5
 71c:	20 7f       	andi	r18, 0xF0	; 240
			if (stepperMovement){//if object type doesn't match stepper location; stop motor, move stepper, start motor
 71e:	25 b9       	out	0x05, r18	; 5
				PORTB &=0xF0; //Apply Vcc brake to motor
 720:	9c 01       	movw	r18, r24
 722:	99 23       	and	r25, r25
 724:	24 f4       	brge	.+8      	; 0x72e <main+0x2fa>
				//stepper rotation logic
				//if (abs(stepperMovement)<=100) do nothing;
				if (abs(stepperMovement)>100){
 726:	22 27       	eor	r18, r18
 728:	33 27       	eor	r19, r19
 72a:	28 1b       	sub	r18, r24
 72c:	39 0b       	sbc	r19, r25
 72e:	25 36       	cpi	r18, 0x65	; 101
 730:	31 05       	cpc	r19, r1
 732:	3c f0       	brlt	.+14     	; 0x742 <main+0x30e>
 734:	99 23       	and	r25, r25
 736:	1c f4       	brge	.+6      	; 0x73e <main+0x30a>
 738:	88 53       	subi	r24, 0x38	; 56
					if (stepperMovement<0) stepperMovement+=200;
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	02 c0       	rjmp	.+4      	; 0x742 <main+0x30e>
 73e:	88 5c       	subi	r24, 0xC8	; 200
 740:	91 09       	sbc	r25, r1
 742:	ae 01       	movw	r20, r28
					else stepperMovement-=200;
 744:	4d 5f       	subi	r20, 0xFD	; 253
				}
				stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
 746:	5f 4f       	sbci	r21, 0xFF	; 255
 748:	be 01       	movw	r22, r28
 74a:	6f 5f       	subi	r22, 0xFF	; 255
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	e9 dc       	rcall	.-1582   	; 0x122 <stepperControl>
 750:	2b 9a       	sbi	0x05, 3	; 5
 752:	31 e0       	ldi	r19, 0x01	; 1
 754:	c3 1a       	sub	r12, r19
				PORTB |=0b00001000; //start motor forwards
 756:	d1 08       	sbc	r13, r1
			}
			if (tempType==0)BL_Count += 0x01;
			else if (tempType==50)ST_Count += 0x01;
			else if (tempType==100)WH_Count += 0x01;
			else if (tempType==150)AL_Count += 0x01;
			OREX_Count-=1;
 758:	0f 5f       	subi	r16, 0xFF	; 255
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
			EX_Count+=1;
 760:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
		}
		if((systemFlag&0x10) && (startMeasureFlag)){ //if an ADC conversion is complete and the current object has not hits its min (ADC value decreases with higher reflectivity) ADC value
 764:	84 ff       	sbrs	r24, 4
 766:	bf c0       	rjmp	.+382    	; 0x8e6 <main+0x4b2>
 768:	cb 56       	subi	r28, 0x6B	; 107
 76a:	de 4f       	sbci	r29, 0xFE	; 254
 76c:	48 81       	ld	r20, Y
 76e:	c5 59       	subi	r28, 0x95	; 149
 770:	d1 40       	sbci	r29, 0x01	; 1
 772:	44 23       	and	r20, r20
 774:	09 f4       	brne	.+2      	; 0x778 <main+0x344>
 776:	b7 c0       	rjmp	.+366    	; 0x8e6 <main+0x4b2>
 778:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 77c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
			systemFlag&=0xEF; //reset flag to allow interrupt to be triggered right away if necessary
 780:	8f 7e       	andi	r24, 0xEF	; 239
 782:	99 27       	eor	r25, r25
 784:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 788:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 78c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ADCResult>
 790:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ADCResult+0x1>
			if(ADCResult<oldADCResult) {
 794:	82 15       	cp	r24, r2
 796:	93 05       	cpc	r25, r3
 798:	a8 f4       	brcc	.+42     	; 0x7c4 <main+0x390>
 79a:	20 90 0f 01 	lds	r2, 0x010F	; 0x80010f <ADCResult>
 79e:	30 90 10 01 	lds	r3, 0x0110	; 0x800110 <ADCResult+0x1>
				oldADCResult=ADCResult; //reflectivity is increasing still (i.e. a lower ADC voltage is measured)
 7a2:	e4 2d       	mov	r30, r4
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	ee 0f       	add	r30, r30
				oldADCResultArray[ADCFilterCount]=oldADCResult; //store biggest result and seven previous for averaging
 7a8:	ff 1f       	adc	r31, r31
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	6c 0f       	add	r22, r28
 7b0:	7d 1f       	adc	r23, r29
 7b2:	e6 0f       	add	r30, r22
 7b4:	f7 1f       	adc	r31, r23
 7b6:	35 82       	std	Z+5, r3	; 0x05
 7b8:	24 82       	std	Z+4, r2	; 0x04
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	84 0d       	add	r24, r4
 7be:	87 70       	andi	r24, 0x07	; 7
				ADCFilterCount+=1;
 7c0:	48 2e       	mov	r4, r24
 7c2:	8c c0       	rjmp	.+280    	; 0x8dc <main+0x4a8>
				ADCFilterCount&=0b00000111; //modulus of 8;
 7c4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ADCResult>
 7c8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ADCResult+0x1>
			}
			else if(ADCResult>(oldADCResult+0x3B)){ //reflectivities have been reducing and are 59(0x3B) lower than maximum reflectivity reached(buffer)
 7cc:	91 01       	movw	r18, r2
 7ce:	25 5c       	subi	r18, 0xC5	; 197
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	28 17       	cp	r18, r24
 7d4:	39 07       	cpc	r19, r25
 7d6:	08 f0       	brcs	.+2      	; 0x7da <main+0x3a6>
 7d8:	81 c0       	rjmp	.+258    	; 0x8dc <main+0x4a8>
 7da:	88 e0       	ldi	r24, 0x08	; 8
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	44 2d       	mov	r20, r4
 7e4:	e4 2f       	mov	r30, r20
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	ee 0f       	add	r30, r30
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
					aveADCResult+=oldADCResultArray[ADCFilterCount];
 7ea:	ff 1f       	adc	r31, r31
 7ec:	a1 e0       	ldi	r26, 0x01	; 1
 7ee:	b0 e0       	ldi	r27, 0x00	; 0
 7f0:	ac 0f       	add	r26, r28
 7f2:	bd 1f       	adc	r27, r29
 7f4:	ea 0f       	add	r30, r26
 7f6:	fb 1f       	adc	r31, r27
 7f8:	64 81       	ldd	r22, Z+4	; 0x04
 7fa:	75 81       	ldd	r23, Z+5	; 0x05
 7fc:	26 0f       	add	r18, r22
 7fe:	37 1f       	adc	r19, r23
 800:	4f 5f       	subi	r20, 0xFF	; 255
 802:	47 70       	andi	r20, 0x07	; 7
 804:	01 97       	sbiw	r24, 0x01	; 1
					ADCFilterCount+=1;
 806:	71 f7       	brne	.-36     	; 0x7e4 <main+0x3b0>
					ADCFilterCount&=0b00000111; //modulus of 8;
 808:	44 2e       	mov	r4, r20
 80a:	36 95       	lsr	r19
				ADCFilterCount+=1;
				ADCFilterCount&=0b00000111; //modulus of 8;
			}
			else if(ADCResult>(oldADCResult+0x3B)){ //reflectivities have been reducing and are 59(0x3B) lower than maximum reflectivity reached(buffer)
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
 80c:	27 95       	ror	r18
 80e:	36 95       	lsr	r19
					aveADCResult+=oldADCResultArray[ADCFilterCount];
					ADCFilterCount+=1;
					ADCFilterCount&=0b00000111; //modulus of 8;
				}
				aveADCResult=aveADCResult/8;
 810:	27 95       	ror	r18
 812:	36 95       	lsr	r19
 814:	27 95       	ror	r18
 816:	e5 e1       	ldi	r30, 0x15	; 21
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	ec 0f       	add	r30, r28
				materialArray[RL_Count].reflectance=aveADCResult;//value of oldADCResult is now maximum possible reflectivity and is added to struct array
				tempFerrous=tempIndArray[RL_Count]; //store whether object was ferrous or non-ferrous
 81c:	fd 1f       	adc	r31, r29
 81e:	ea 0d       	add	r30, r10
 820:	fb 1d       	adc	r31, r11
 822:	80 81       	ld	r24, Z
 824:	10 82       	st	Z, r1
 826:	88 23       	and	r24, r24
 828:	39 f1       	breq	.+78     	; 0x878 <main+0x444>
				tempIndArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
 82a:	28 3c       	cpi	r18, 0xC8	; 200
				materialArray[RL_Count].inductive=tempFerrous;//inductivity of material stored; 1 for inductive; 0 for non-ferrous
				if(tempFerrous){ //object is metal: aluminum (light), steel (dark)
 82c:	31 05       	cpc	r19, r1
 82e:	90 f4       	brcc	.+36     	; 0x854 <main+0x420>
					if (aveADCResult<AL_REFLECTIVITY) materialArray[RL_Count].type=150;//object is aluminium
 830:	f5 01       	movw	r30, r10
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	ee 0f       	add	r30, r30
 838:	ff 1f       	adc	r31, r31
 83a:	ea 0d       	add	r30, r10
 83c:	fb 1d       	adc	r31, r11
 83e:	25 e5       	ldi	r18, 0x55	; 85
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	2c 0f       	add	r18, r28
 844:	3d 1f       	adc	r19, r29
 846:	e2 0f       	add	r30, r18
 848:	f3 1f       	adc	r31, r19
 84a:	66 e9       	ldi	r22, 0x96	; 150
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	73 83       	std	Z+3, r23	; 0x03
 850:	62 83       	std	Z+2, r22	; 0x02
 852:	36 c0       	rjmp	.+108    	; 0x8c0 <main+0x48c>
 854:	f5 01       	movw	r30, r10
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=50;//object is steel
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	ea 0d       	add	r30, r10
 860:	fb 1d       	adc	r31, r11
 862:	85 e5       	ldi	r24, 0x55	; 85
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	8c 0f       	add	r24, r28
 868:	9d 1f       	adc	r25, r29
 86a:	e8 0f       	add	r30, r24
 86c:	f9 1f       	adc	r31, r25
 86e:	a2 e3       	ldi	r26, 0x32	; 50
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	b3 83       	std	Z+3, r27	; 0x03
 874:	a2 83       	std	Z+2, r26	; 0x02
 876:	24 c0       	rjmp	.+72     	; 0x8c0 <main+0x48c>
 878:	26 3b       	cpi	r18, 0xB6	; 182
 87a:	33 40       	sbci	r19, 0x03	; 3
 87c:	90 f4       	brcc	.+36     	; 0x8a2 <main+0x46e>
					} else { //object is plastic: white (light), black (dark)
					if (aveADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
 87e:	f5 01       	movw	r30, r10
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	ea 0d       	add	r30, r10
 88a:	fb 1d       	adc	r31, r11
 88c:	25 e5       	ldi	r18, 0x55	; 85
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	2c 0f       	add	r18, r28
 892:	3d 1f       	adc	r19, r29
 894:	e2 0f       	add	r30, r18
 896:	f3 1f       	adc	r31, r19
 898:	64 e6       	ldi	r22, 0x64	; 100
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	73 83       	std	Z+3, r23	; 0x03
 89e:	62 83       	std	Z+2, r22	; 0x02
 8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <main+0x48c>
 8a2:	f5 01       	movw	r30, r10
 8a4:	ee 0f       	add	r30, r30
 8a6:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=0;//object is black plastic
 8a8:	ee 0f       	add	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	ea 0d       	add	r30, r10
 8ae:	fb 1d       	adc	r31, r11
 8b0:	85 e5       	ldi	r24, 0x55	; 85
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	8c 0f       	add	r24, r28
 8b6:	9d 1f       	adc	r25, r29
 8b8:	e8 0f       	add	r30, r24
 8ba:	f9 1f       	adc	r31, r25
 8bc:	13 82       	std	Z+3, r1	; 0x03
 8be:	12 82       	std	Z+2, r1	; 0x02
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	a9 1a       	sub	r10, r25
 8c4:	b9 0a       	sbc	r11, r25
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
 8c6:	cb 56       	subi	r28, 0x6B	; 107
 8c8:	de 4f       	sbci	r29, 0xFE	; 254
 8ca:	18 82       	st	Y, r1
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
 8cc:	c5 59       	subi	r28, 0x95	; 149
 8ce:	d1 40       	sbci	r29, 0x01	; 1
 8d0:	22 24       	eor	r2, r2
 8d2:	2a 94       	dec	r2
 8d4:	0f 2e       	mov	r0, r31
					} else { //object is plastic: white (light), black (dark)
					if (aveADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
					else materialArray[RL_Count].type=0;//object is black plastic
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
 8d6:	f3 e0       	ldi	r31, 0x03	; 3
 8d8:	3f 2e       	mov	r3, r31
 8da:	f0 2d       	mov	r31, r0
 8dc:	d4 01       	movw	r26, r8
 8de:	8c 91       	ld	r24, X
 8e0:	80 64       	ori	r24, 0x40	; 64
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
			}
			ADCSRA |= _BV(ADSC); //re-trigger ADC
 8e2:	8c 93       	st	X, r24
 8e4:	0a c0       	rjmp	.+20     	; 0x8fa <main+0x4c6>
 8e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 8ea:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
		} else systemFlag&=0xEF; //reset flag
 8ee:	8f 7e       	andi	r24, 0xEF	; 239
 8f0:	99 27       	eor	r25, r25
 8f2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 8f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
 8fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 8fe:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
		if (systemFlag&0x20){//if PAUSE Button is pressed
 902:	c1 14       	cp	r12, r1
 904:	d1 04       	cpc	r13, r1
 906:	09 f4       	brne	.+2      	; 0x90a <main+0x4d6>
			//print Black, White, Aluminium, and Steel Counts to screen and display how many objects are between optical sensor 2 and 3 (EX)
		}
		if(OREX_Count){//if there are objects between the OR and EX sensor, move steppers towards proper location
 908:	93 c0       	rjmp	.+294    	; 0xa30 <main+0x5fc>
 90a:	f8 01       	movw	r30, r16
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
			tempEarlyType=materialArray[EX_Count].type;
 910:	ee 0f       	add	r30, r30
 912:	ff 1f       	adc	r31, r31
 914:	e0 0f       	add	r30, r16
 916:	f1 1f       	adc	r31, r17
 918:	25 e5       	ldi	r18, 0x55	; 85
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	2c 0f       	add	r18, r28
 91e:	3d 1f       	adc	r19, r29
 920:	e2 0f       	add	r30, r18
 922:	f3 1f       	adc	r31, r19
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	9a 81       	ldd	r25, Y+2	; 0x02
 928:	22 81       	ldd	r18, Z+2	; 0x02
			stepEarlyMovement=stepperPosition-tempEarlyType;
 92a:	33 81       	ldd	r19, Z+3	; 0x03
 92c:	82 1b       	sub	r24, r18
 92e:	93 0b       	sbc	r25, r19
 930:	9c 01       	movw	r18, r24
 932:	22 f4       	brpl	.+8      	; 0x93c <main+0x508>
 934:	22 27       	eor	r18, r18
			if (abs(stepEarlyMovement)>100){
 936:	33 27       	eor	r19, r19
 938:	28 1b       	sub	r18, r24
 93a:	39 0b       	sbc	r19, r25
 93c:	25 36       	cpi	r18, 0x65	; 101
 93e:	31 05       	cpc	r19, r1
 940:	3c f0       	brlt	.+14     	; 0x950 <main+0x51c>
 942:	99 23       	and	r25, r25
 944:	1c f4       	brge	.+6      	; 0x94c <main+0x518>
 946:	88 53       	subi	r24, 0x38	; 56
				if (stepEarlyMovement<0) stepEarlyMovement+=200;
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	02 c0       	rjmp	.+4      	; 0x950 <main+0x51c>
 94c:	88 5c       	subi	r24, 0xC8	; 200
 94e:	91 09       	sbc	r25, r1
 950:	51 10       	cpse	r5, r1
				else stepEarlyMovement-=200;
 952:	38 c0       	rjmp	.+112    	; 0x9c4 <main+0x590>
 954:	d3 01       	movw	r26, r6
			}
			if(stepEarlyFlag==0){
 956:	2c 91       	ld	r18, X
 958:	21 60       	ori	r18, 0x01	; 1
				TCCR1B |= _BV(CS10); //clock pre-scalar (clk/1); 8ms per overflow; Starts timer
 95a:	2c 93       	st	X, r18
 95c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 960:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
				TCNT1=0x00; //set timer equal to zero
 964:	b0 99       	sbic	0x16, 0	; 22
 966:	b0 9a       	sbi	0x16, 0	; 22
 968:	99 23       	and	r25, r25
				if ((TIFR1 & 0x01) == 0x01)TIFR1|=0x01; //if TOV1 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 96a:	1c f0       	brlt	.+6      	; 0x972 <main+0x53e>
 96c:	21 e0       	ldi	r18, 0x01	; 1
				if (stepEarlyMovement<0)Direction=-1;
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <main+0x542>
				else Direction=1;
 972:	2f ef       	ldi	r18, 0xFF	; 255
 974:	3f ef       	ldi	r19, 0xFF	; 255
 976:	4b 81       	ldd	r20, Y+3	; 0x03
			}
			if(stepEarlyFlag==0){
				TCCR1B |= _BV(CS10); //clock pre-scalar (clk/1); 8ms per overflow; Starts timer
				TCNT1=0x00; //set timer equal to zero
				if ((TIFR1 & 0x01) == 0x01)TIFR1|=0x01; //if TOV1 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
				if (stepEarlyMovement<0)Direction=-1;
 978:	5c 81       	ldd	r21, Y+4	; 0x04
 97a:	42 0f       	add	r20, r18
				else Direction=1;
				stepperIteration+=Direction;
 97c:	53 1f       	adc	r21, r19
 97e:	5c 83       	std	Y+4, r21	; 0x04
 980:	4b 83       	std	Y+3, r20	; 0x03
 982:	44 30       	cpi	r20, 0x04	; 4
 984:	51 05       	cpc	r21, r1
 986:	19 f4       	brne	.+6      	; 0x98e <main+0x55a>
				if(stepperIteration==4)stepperIteration=0;
 988:	1c 82       	std	Y+4, r1	; 0x04
 98a:	1b 82       	std	Y+3, r1	; 0x03
 98c:	07 c0       	rjmp	.+14     	; 0x99c <main+0x568>
 98e:	4f 3f       	cpi	r20, 0xFF	; 255
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	21 f4       	brne	.+8      	; 0x99c <main+0x568>
				if(stepperIteration==-1)stepperIteration=3;
 994:	43 e0       	ldi	r20, 0x03	; 3
 996:	50 e0       	ldi	r21, 0x00	; 0
 998:	5c 83       	std	Y+4, r21	; 0x04
 99a:	4b 83       	std	Y+3, r20	; 0x03
 99c:	eb 81       	ldd	r30, Y+3	; 0x03
 99e:	fc 81       	ldd	r31, Y+4	; 0x04
 9a0:	ee 0f       	add	r30, r30
				PORTA=stepperSigOrd[stepperIteration];
 9a2:	ff 1f       	adc	r31, r31
 9a4:	e0 50       	subi	r30, 0x00	; 0
 9a6:	ff 4f       	sbci	r31, 0xFF	; 255
 9a8:	40 81       	ld	r20, Z
 9aa:	42 b9       	out	0x02, r20	; 2
 9ac:	49 81       	ldd	r20, Y+1	; 0x01
 9ae:	5a 81       	ldd	r21, Y+2	; 0x02
 9b0:	24 0f       	add	r18, r20
				stepperPosition+=Direction;
 9b2:	35 1f       	adc	r19, r21
 9b4:	3a 83       	std	Y+2, r19	; 0x02
 9b6:	29 83       	std	Y+1, r18	; 0x01
 9b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stepEarlyCount+0x1>
 9bc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <stepEarlyCount>
				stepEarlyFlag=1;
				stepEarlyCount=0;
 9c0:	55 24       	eor	r5, r5
 9c2:	53 94       	inc	r5
 9c4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <stepEarlyCount>
				stepperIteration+=Direction;
				if(stepperIteration==4)stepperIteration=0;
				if(stepperIteration==-1)stepperIteration=3;
				PORTA=stepperSigOrd[stepperIteration];
				stepperPosition+=Direction;
				stepEarlyFlag=1;
 9c8:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <stepEarlyCount+0x1>
				stepEarlyCount=0;
			}
			if (stepEarlyCount>=2){ //takes >=16ms; Note that stepEarlyCount is updated in ISR
 9cc:	22 30       	cpi	r18, 0x02	; 2
 9ce:	31 05       	cpc	r19, r1
 9d0:	a0 f1       	brcs	.+104    	; 0xa3a <main+0x606>
 9d2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stepEarlyCount+0x1>
 9d6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <stepEarlyCount>
				stepEarlyCount=0;
 9da:	99 23       	and	r25, r25
 9dc:	1c f0       	brlt	.+6      	; 0x9e4 <main+0x5b0>
 9de:	21 e0       	ldi	r18, 0x01	; 1
				if (stepEarlyMovement<0)Direction=-1;
 9e0:	30 e0       	ldi	r19, 0x00	; 0
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <main+0x5b4>
				else Direction=1;
 9e4:	2f ef       	ldi	r18, 0xFF	; 255
 9e6:	3f ef       	ldi	r19, 0xFF	; 255
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
				stepEarlyFlag=1;
				stepEarlyCount=0;
			}
			if (stepEarlyCount>=2){ //takes >=16ms; Note that stepEarlyCount is updated in ISR
				stepEarlyCount=0;
				if (stepEarlyMovement<0)Direction=-1;
 9ea:	9c 81       	ldd	r25, Y+4	; 0x04
 9ec:	82 0f       	add	r24, r18
				else Direction=1;
				stepperIteration+=Direction;
 9ee:	93 1f       	adc	r25, r19
 9f0:	9c 83       	std	Y+4, r25	; 0x04
 9f2:	8b 83       	std	Y+3, r24	; 0x03
 9f4:	84 30       	cpi	r24, 0x04	; 4
 9f6:	91 05       	cpc	r25, r1
 9f8:	19 f4       	brne	.+6      	; 0xa00 <main+0x5cc>
				if(stepperIteration==4)stepperIteration=0;
 9fa:	1c 82       	std	Y+4, r1	; 0x04
 9fc:	1b 82       	std	Y+3, r1	; 0x03
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <main+0x5d8>
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	21 f4       	brne	.+8      	; 0xa0c <main+0x5d8>
 a04:	83 e0       	ldi	r24, 0x03	; 3
				if(stepperIteration==-1)stepperIteration=3;
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	9c 83       	std	Y+4, r25	; 0x04
 a0a:	8b 83       	std	Y+3, r24	; 0x03
 a0c:	eb 81       	ldd	r30, Y+3	; 0x03
 a0e:	fc 81       	ldd	r31, Y+4	; 0x04
 a10:	ee 0f       	add	r30, r30
				PORTA=stepperSigOrd[stepperIteration];
 a12:	ff 1f       	adc	r31, r31
 a14:	e0 50       	subi	r30, 0x00	; 0
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	80 81       	ld	r24, Z
 a1a:	82 b9       	out	0x02, r24	; 2
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	9a 81       	ldd	r25, Y+2	; 0x02
				stepperPosition+=Direction;
				stepperPosition%=200;
 a20:	82 0f       	add	r24, r18
 a22:	93 1f       	adc	r25, r19
 a24:	68 ec       	ldi	r22, 0xC8	; 200
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	f7 d1       	rcall	.+1006   	; 0xe18 <__divmodhi4>
 a2a:	9a 83       	std	Y+2, r25	; 0x02
 a2c:	89 83       	std	Y+1, r24	; 0x01
 a2e:	05 c0       	rjmp	.+10     	; 0xa3a <main+0x606>
 a30:	d3 01       	movw	r26, r6
 a32:	8c 91       	ld	r24, X
 a34:	88 7f       	andi	r24, 0xF8	; 248
				//move stepper in correct direction
			}
		} else {
			TCCR1B&=0b11111000; //disable timer 1 
 a36:	8c 93       	st	X, r24
 a38:	51 2c       	mov	r5, r1
 a3a:	bf e3       	ldi	r27, 0x3F	; 63
 a3c:	eb 22       	and	r14, r27
			stepEarlyFlag=0;
 a3e:	ff 24       	eor	r15, r15
		}
		//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
		OI_Count &= 0b00111111;//modulus of 64
 a40:	ef e3       	ldi	r30, 0x3F	; 63
 a42:	ae 22       	and	r10, r30
 a44:	bb 24       	eor	r11, r11
		RL_Count &= 0b00111111;
 a46:	0f 73       	andi	r16, 0x3F	; 63
 a48:	11 27       	eor	r17, r17
 a4a:	6d cd       	rjmp	.-1318   	; 0x526 <main+0xf2>

00000a4c <__vector_1>:
		OR_Count &= 0b00111111;
		EX_Count &= 0b00111111;
 a4c:	1f 92       	push	r1
 a4e:	0f 92       	push	r0
	}
 a50:	0f b6       	in	r0, 0x3f	; 63
	OCR0A = dutyCycle;//set duty cycle
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/
ISR(INT0_vect){ // on PD0; active low KILL SWITCH
 a52:	0f 92       	push	r0
 a54:	11 24       	eor	r1, r1
 a56:	8f 93       	push	r24
	PORTB &= 0b11110000; //stop motor by applying Vcc break
 a58:	85 b1       	in	r24, 0x05	; 5
 a5a:	80 7f       	andi	r24, 0xF0	; 240
 a5c:	85 b9       	out	0x05, r24	; 5
}
 a5e:	8f 91       	pop	r24
 a60:	0f 90       	pop	r0
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	0f 90       	pop	r0
 a66:	1f 90       	pop	r1
 a68:	18 95       	reti

00000a6a <__vector_2>:
/*sensor 1: OI: 1st Optical-Inductive-Near Inductive sensor*/
ISR(INT1_vect){ // on PD1; active low; triggered on rising-edge
 a6a:	1f 92       	push	r1
 a6c:	0f 92       	push	r0
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	0f 92       	push	r0
 a72:	11 24       	eor	r1, r1
 a74:	8f 93       	push	r24
 a76:	9f 93       	push	r25
	systemFlag|=0x01;//opt1Flag=0x01;
 a78:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 a7c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
 a80:	81 60       	ori	r24, 0x01	; 1
 a82:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 a86:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
}
 a8a:	9f 91       	pop	r25
 a8c:	8f 91       	pop	r24
 a8e:	0f 90       	pop	r0
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	0f 90       	pop	r0
 a94:	1f 90       	pop	r1
 a96:	18 95       	reti

00000a98 <__vector_3>:
/*sensor 2: IN: Inductive sensor*/
ISR(INT2_vect){ //on PD3; active low; triggered on falling-edge
 a98:	1f 92       	push	r1
 a9a:	0f 92       	push	r0
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	0f 92       	push	r0
 aa0:	11 24       	eor	r1, r1
 aa2:	8f 93       	push	r24
 aa4:	9f 93       	push	r25
	systemFlag|=0x02;//inductiveFlag=0x01;
 aa6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 aaa:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
 aae:	82 60       	ori	r24, 0x02	; 2
 ab0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 ab4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
}
 ab8:	9f 91       	pop	r25
 aba:	8f 91       	pop	r24
 abc:	0f 90       	pop	r0
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	0f 90       	pop	r0
 ac2:	1f 90       	pop	r1
 ac4:	18 95       	reti

00000ac6 <__vector_4>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Reflective sensor*/
ISR(INT3_vect){ // on PD2; active high; triggered on rising-edge
 ac6:	1f 92       	push	r1
 ac8:	0f 92       	push	r0
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	0f 92       	push	r0
 ace:	11 24       	eor	r1, r1
 ad0:	8f 93       	push	r24
 ad2:	9f 93       	push	r25
	systemFlag|=0x04;//opt2Flag=0x01;
 ad4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 ad8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
 adc:	84 60       	ori	r24, 0x04	; 4
 ade:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 ae2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
}
 ae6:	9f 91       	pop	r25
 ae8:	8f 91       	pop	r24
 aea:	0f 90       	pop	r0
 aec:	0f be       	out	0x3f, r0	; 63
 aee:	0f 90       	pop	r0
 af0:	1f 90       	pop	r1
 af2:	18 95       	reti

00000af4 <__vector_5>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT4_vect){ //on PE4; active low; triggered on falling-edge
 af4:	1f 92       	push	r1
 af6:	0f 92       	push	r0
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	0f 92       	push	r0
 afc:	11 24       	eor	r1, r1
 afe:	8f 93       	push	r24
 b00:	9f 93       	push	r25
	systemFlag|=0x08;//optExitFlag=0x01;
 b02:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 b06:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
 b0a:	88 60       	ori	r24, 0x08	; 8
 b0c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 b10:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
}
 b14:	9f 91       	pop	r25
 b16:	8f 91       	pop	r24
 b18:	0f 90       	pop	r0
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	0f 90       	pop	r0
 b1e:	1f 90       	pop	r1
 b20:	18 95       	reti

00000b22 <__vector_29>:
/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 b22:	1f 92       	push	r1
 b24:	0f 92       	push	r0
 b26:	0f b6       	in	r0, 0x3f	; 63
 b28:	0f 92       	push	r0
 b2a:	11 24       	eor	r1, r1
 b2c:	2f 93       	push	r18
 b2e:	3f 93       	push	r19
 b30:	8f 93       	push	r24
 b32:	9f 93       	push	r25
	ADCResult = ADCL;
 b34:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADCResult+0x1>
 b3e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADCResult>
	ADCResult += ADCH << 8;
 b42:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 b46:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <ADCResult>
 b4a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <ADCResult+0x1>
 b4e:	89 2f       	mov	r24, r25
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	98 2f       	mov	r25, r24
 b54:	88 27       	eor	r24, r24
 b56:	82 0f       	add	r24, r18
 b58:	93 1f       	adc	r25, r19
 b5a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADCResult+0x1>
 b5e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADCResult>
	systemFlag|=0x10;//ADCResultFlag = 1;
 b62:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <systemFlag>
 b66:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <systemFlag+0x1>
 b6a:	80 61       	ori	r24, 0x10	; 16
 b6c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <systemFlag+0x1>
 b70:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <systemFlag>
}
 b74:	9f 91       	pop	r25
 b76:	8f 91       	pop	r24
 b78:	3f 91       	pop	r19
 b7a:	2f 91       	pop	r18
 b7c:	0f 90       	pop	r0
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	0f 90       	pop	r0
 b82:	1f 90       	pop	r1
 b84:	18 95       	reti

00000b86 <__vector_7>:
/*sensor 6: HE: Hall Effect sensor; used for homing stepper*/
ISR(INT6_vect){ //on PE6; Active low for hall effect sensor 
 b86:	1f 92       	push	r1
 b88:	0f 92       	push	r0
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	0f 92       	push	r0
 b8e:	11 24       	eor	r1, r1
 b90:	8f 93       	push	r24
 b92:	9f 93       	push	r25
	HallEffect=0x01;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <HallEffect+0x1>
 b9c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <HallEffect>
}
 ba0:	9f 91       	pop	r25
 ba2:	8f 91       	pop	r24
 ba4:	0f 90       	pop	r0
 ba6:	0f be       	out	0x3f, r0	; 63
 ba8:	0f 90       	pop	r0
 baa:	1f 90       	pop	r1
 bac:	18 95       	reti

00000bae <__vector_20>:
//timer 1 overflow flag; enabled through sei();
ISR(TIMER1_OVF_vect){
 bae:	1f 92       	push	r1
 bb0:	0f 92       	push	r0
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	0f 92       	push	r0
 bb6:	11 24       	eor	r1, r1
 bb8:	8f 93       	push	r24
 bba:	9f 93       	push	r25
	stepEarlyCount+=1;
 bbc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <stepEarlyCount>
 bc0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <stepEarlyCount+0x1>
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <stepEarlyCount+0x1>
 bca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <stepEarlyCount>
	TIFR1|=0x01;
 bce:	b0 9a       	sbi	0x16, 0	; 22
}
 bd0:	9f 91       	pop	r25
 bd2:	8f 91       	pop	r24
 bd4:	0f 90       	pop	r0
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	0f 90       	pop	r0
 bda:	1f 90       	pop	r1
 bdc:	18 95       	reti

00000bde <__fixunssfsi>:
 bde:	70 d0       	rcall	.+224    	; 0xcc0 <__fp_splitA>
 be0:	88 f0       	brcs	.+34     	; 0xc04 <__fixunssfsi+0x26>
 be2:	9f 57       	subi	r25, 0x7F	; 127
 be4:	90 f0       	brcs	.+36     	; 0xc0a <__fixunssfsi+0x2c>
 be6:	b9 2f       	mov	r27, r25
 be8:	99 27       	eor	r25, r25
 bea:	b7 51       	subi	r27, 0x17	; 23
 bec:	a0 f0       	brcs	.+40     	; 0xc16 <__fixunssfsi+0x38>
 bee:	d1 f0       	breq	.+52     	; 0xc24 <__fixunssfsi+0x46>
 bf0:	66 0f       	add	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	1a f0       	brmi	.+6      	; 0xc00 <__fixunssfsi+0x22>
 bfa:	ba 95       	dec	r27
 bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__fixunssfsi+0x12>
 bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__fixunssfsi+0x46>
 c00:	b1 30       	cpi	r27, 0x01	; 1
 c02:	81 f0       	breq	.+32     	; 0xc24 <__fixunssfsi+0x46>
 c04:	77 d0       	rcall	.+238    	; 0xcf4 <__fp_zero>
 c06:	b1 e0       	ldi	r27, 0x01	; 1
 c08:	08 95       	ret
 c0a:	74 c0       	rjmp	.+232    	; 0xcf4 <__fp_zero>
 c0c:	67 2f       	mov	r22, r23
 c0e:	78 2f       	mov	r23, r24
 c10:	88 27       	eor	r24, r24
 c12:	b8 5f       	subi	r27, 0xF8	; 248
 c14:	39 f0       	breq	.+14     	; 0xc24 <__fixunssfsi+0x46>
 c16:	b9 3f       	cpi	r27, 0xF9	; 249
 c18:	cc f3       	brlt	.-14     	; 0xc0c <__fixunssfsi+0x2e>
 c1a:	86 95       	lsr	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	b3 95       	inc	r27
 c22:	d9 f7       	brne	.-10     	; 0xc1a <__fixunssfsi+0x3c>
 c24:	3e f4       	brtc	.+14     	; 0xc34 <__fixunssfsi+0x56>
 c26:	90 95       	com	r25
 c28:	80 95       	com	r24
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	08 95       	ret

00000c36 <__floatunsisf>:
 c36:	e8 94       	clt
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <__floatsisf+0x12>

00000c3a <__floatsisf>:
 c3a:	97 fb       	bst	r25, 7
 c3c:	3e f4       	brtc	.+14     	; 0xc4c <__floatsisf+0x12>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	99 23       	and	r25, r25
 c4e:	a9 f0       	breq	.+42     	; 0xc7a <__floatsisf+0x40>
 c50:	f9 2f       	mov	r31, r25
 c52:	96 e9       	ldi	r25, 0x96	; 150
 c54:	bb 27       	eor	r27, r27
 c56:	93 95       	inc	r25
 c58:	f6 95       	lsr	r31
 c5a:	87 95       	ror	r24
 c5c:	77 95       	ror	r23
 c5e:	67 95       	ror	r22
 c60:	b7 95       	ror	r27
 c62:	f1 11       	cpse	r31, r1
 c64:	f8 cf       	rjmp	.-16     	; 0xc56 <__floatsisf+0x1c>
 c66:	fa f4       	brpl	.+62     	; 0xca6 <__floatsisf+0x6c>
 c68:	bb 0f       	add	r27, r27
 c6a:	11 f4       	brne	.+4      	; 0xc70 <__floatsisf+0x36>
 c6c:	60 ff       	sbrs	r22, 0
 c6e:	1b c0       	rjmp	.+54     	; 0xca6 <__floatsisf+0x6c>
 c70:	6f 5f       	subi	r22, 0xFF	; 255
 c72:	7f 4f       	sbci	r23, 0xFF	; 255
 c74:	8f 4f       	sbci	r24, 0xFF	; 255
 c76:	9f 4f       	sbci	r25, 0xFF	; 255
 c78:	16 c0       	rjmp	.+44     	; 0xca6 <__floatsisf+0x6c>
 c7a:	88 23       	and	r24, r24
 c7c:	11 f0       	breq	.+4      	; 0xc82 <__floatsisf+0x48>
 c7e:	96 e9       	ldi	r25, 0x96	; 150
 c80:	11 c0       	rjmp	.+34     	; 0xca4 <__floatsisf+0x6a>
 c82:	77 23       	and	r23, r23
 c84:	21 f0       	breq	.+8      	; 0xc8e <__floatsisf+0x54>
 c86:	9e e8       	ldi	r25, 0x8E	; 142
 c88:	87 2f       	mov	r24, r23
 c8a:	76 2f       	mov	r23, r22
 c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__floatsisf+0x5e>
 c8e:	66 23       	and	r22, r22
 c90:	71 f0       	breq	.+28     	; 0xcae <__floatsisf+0x74>
 c92:	96 e8       	ldi	r25, 0x86	; 134
 c94:	86 2f       	mov	r24, r22
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	2a f0       	brmi	.+10     	; 0xca6 <__floatsisf+0x6c>
 c9c:	9a 95       	dec	r25
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	da f7       	brpl	.-10     	; 0xc9c <__floatsisf+0x62>
 ca6:	88 0f       	add	r24, r24
 ca8:	96 95       	lsr	r25
 caa:	87 95       	ror	r24
 cac:	97 f9       	bld	r25, 7
 cae:	08 95       	ret

00000cb0 <__fp_split3>:
 cb0:	57 fd       	sbrc	r21, 7
 cb2:	90 58       	subi	r25, 0x80	; 128
 cb4:	44 0f       	add	r20, r20
 cb6:	55 1f       	adc	r21, r21
 cb8:	59 f0       	breq	.+22     	; 0xcd0 <__fp_splitA+0x10>
 cba:	5f 3f       	cpi	r21, 0xFF	; 255
 cbc:	71 f0       	breq	.+28     	; 0xcda <__fp_splitA+0x1a>
 cbe:	47 95       	ror	r20

00000cc0 <__fp_splitA>:
 cc0:	88 0f       	add	r24, r24
 cc2:	97 fb       	bst	r25, 7
 cc4:	99 1f       	adc	r25, r25
 cc6:	61 f0       	breq	.+24     	; 0xce0 <__fp_splitA+0x20>
 cc8:	9f 3f       	cpi	r25, 0xFF	; 255
 cca:	79 f0       	breq	.+30     	; 0xcea <__fp_splitA+0x2a>
 ccc:	87 95       	ror	r24
 cce:	08 95       	ret
 cd0:	12 16       	cp	r1, r18
 cd2:	13 06       	cpc	r1, r19
 cd4:	14 06       	cpc	r1, r20
 cd6:	55 1f       	adc	r21, r21
 cd8:	f2 cf       	rjmp	.-28     	; 0xcbe <__fp_split3+0xe>
 cda:	46 95       	lsr	r20
 cdc:	f1 df       	rcall	.-30     	; 0xcc0 <__fp_splitA>
 cde:	08 c0       	rjmp	.+16     	; 0xcf0 <__fp_splitA+0x30>
 ce0:	16 16       	cp	r1, r22
 ce2:	17 06       	cpc	r1, r23
 ce4:	18 06       	cpc	r1, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	f1 cf       	rjmp	.-30     	; 0xccc <__fp_splitA+0xc>
 cea:	86 95       	lsr	r24
 cec:	71 05       	cpc	r23, r1
 cee:	61 05       	cpc	r22, r1
 cf0:	08 94       	sec
 cf2:	08 95       	ret

00000cf4 <__fp_zero>:
 cf4:	e8 94       	clt

00000cf6 <__fp_szero>:
 cf6:	bb 27       	eor	r27, r27
 cf8:	66 27       	eor	r22, r22
 cfa:	77 27       	eor	r23, r23
 cfc:	cb 01       	movw	r24, r22
 cfe:	97 f9       	bld	r25, 7
 d00:	08 95       	ret

00000d02 <__mulsf3>:
 d02:	0b d0       	rcall	.+22     	; 0xd1a <__mulsf3x>
 d04:	78 c0       	rjmp	.+240    	; 0xdf6 <__fp_round>
 d06:	69 d0       	rcall	.+210    	; 0xdda <__fp_pscA>
 d08:	28 f0       	brcs	.+10     	; 0xd14 <__mulsf3+0x12>
 d0a:	6e d0       	rcall	.+220    	; 0xde8 <__fp_pscB>
 d0c:	18 f0       	brcs	.+6      	; 0xd14 <__mulsf3+0x12>
 d0e:	95 23       	and	r25, r21
 d10:	09 f0       	breq	.+2      	; 0xd14 <__mulsf3+0x12>
 d12:	5a c0       	rjmp	.+180    	; 0xdc8 <__fp_inf>
 d14:	5f c0       	rjmp	.+190    	; 0xdd4 <__fp_nan>
 d16:	11 24       	eor	r1, r1
 d18:	ee cf       	rjmp	.-36     	; 0xcf6 <__fp_szero>

00000d1a <__mulsf3x>:
 d1a:	ca df       	rcall	.-108    	; 0xcb0 <__fp_split3>
 d1c:	a0 f3       	brcs	.-24     	; 0xd06 <__mulsf3+0x4>

00000d1e <__mulsf3_pse>:
 d1e:	95 9f       	mul	r25, r21
 d20:	d1 f3       	breq	.-12     	; 0xd16 <__mulsf3+0x14>
 d22:	95 0f       	add	r25, r21
 d24:	50 e0       	ldi	r21, 0x00	; 0
 d26:	55 1f       	adc	r21, r21
 d28:	62 9f       	mul	r22, r18
 d2a:	f0 01       	movw	r30, r0
 d2c:	72 9f       	mul	r23, r18
 d2e:	bb 27       	eor	r27, r27
 d30:	f0 0d       	add	r31, r0
 d32:	b1 1d       	adc	r27, r1
 d34:	63 9f       	mul	r22, r19
 d36:	aa 27       	eor	r26, r26
 d38:	f0 0d       	add	r31, r0
 d3a:	b1 1d       	adc	r27, r1
 d3c:	aa 1f       	adc	r26, r26
 d3e:	64 9f       	mul	r22, r20
 d40:	66 27       	eor	r22, r22
 d42:	b0 0d       	add	r27, r0
 d44:	a1 1d       	adc	r26, r1
 d46:	66 1f       	adc	r22, r22
 d48:	82 9f       	mul	r24, r18
 d4a:	22 27       	eor	r18, r18
 d4c:	b0 0d       	add	r27, r0
 d4e:	a1 1d       	adc	r26, r1
 d50:	62 1f       	adc	r22, r18
 d52:	73 9f       	mul	r23, r19
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	62 1f       	adc	r22, r18
 d5a:	83 9f       	mul	r24, r19
 d5c:	a0 0d       	add	r26, r0
 d5e:	61 1d       	adc	r22, r1
 d60:	22 1f       	adc	r18, r18
 d62:	74 9f       	mul	r23, r20
 d64:	33 27       	eor	r19, r19
 d66:	a0 0d       	add	r26, r0
 d68:	61 1d       	adc	r22, r1
 d6a:	23 1f       	adc	r18, r19
 d6c:	84 9f       	mul	r24, r20
 d6e:	60 0d       	add	r22, r0
 d70:	21 1d       	adc	r18, r1
 d72:	82 2f       	mov	r24, r18
 d74:	76 2f       	mov	r23, r22
 d76:	6a 2f       	mov	r22, r26
 d78:	11 24       	eor	r1, r1
 d7a:	9f 57       	subi	r25, 0x7F	; 127
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	8a f0       	brmi	.+34     	; 0xda2 <__mulsf3_pse+0x84>
 d80:	e1 f0       	breq	.+56     	; 0xdba <__mulsf3_pse+0x9c>
 d82:	88 23       	and	r24, r24
 d84:	4a f0       	brmi	.+18     	; 0xd98 <__mulsf3_pse+0x7a>
 d86:	ee 0f       	add	r30, r30
 d88:	ff 1f       	adc	r31, r31
 d8a:	bb 1f       	adc	r27, r27
 d8c:	66 1f       	adc	r22, r22
 d8e:	77 1f       	adc	r23, r23
 d90:	88 1f       	adc	r24, r24
 d92:	91 50       	subi	r25, 0x01	; 1
 d94:	50 40       	sbci	r21, 0x00	; 0
 d96:	a9 f7       	brne	.-22     	; 0xd82 <__mulsf3_pse+0x64>
 d98:	9e 3f       	cpi	r25, 0xFE	; 254
 d9a:	51 05       	cpc	r21, r1
 d9c:	70 f0       	brcs	.+28     	; 0xdba <__mulsf3_pse+0x9c>
 d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <__fp_inf>
 da0:	aa cf       	rjmp	.-172    	; 0xcf6 <__fp_szero>
 da2:	5f 3f       	cpi	r21, 0xFF	; 255
 da4:	ec f3       	brlt	.-6      	; 0xda0 <__mulsf3_pse+0x82>
 da6:	98 3e       	cpi	r25, 0xE8	; 232
 da8:	dc f3       	brlt	.-10     	; 0xda0 <__mulsf3_pse+0x82>
 daa:	86 95       	lsr	r24
 dac:	77 95       	ror	r23
 dae:	67 95       	ror	r22
 db0:	b7 95       	ror	r27
 db2:	f7 95       	ror	r31
 db4:	e7 95       	ror	r30
 db6:	9f 5f       	subi	r25, 0xFF	; 255
 db8:	c1 f7       	brne	.-16     	; 0xdaa <__mulsf3_pse+0x8c>
 dba:	fe 2b       	or	r31, r30
 dbc:	88 0f       	add	r24, r24
 dbe:	91 1d       	adc	r25, r1
 dc0:	96 95       	lsr	r25
 dc2:	87 95       	ror	r24
 dc4:	97 f9       	bld	r25, 7
 dc6:	08 95       	ret

00000dc8 <__fp_inf>:
 dc8:	97 f9       	bld	r25, 7
 dca:	9f 67       	ori	r25, 0x7F	; 127
 dcc:	80 e8       	ldi	r24, 0x80	; 128
 dce:	70 e0       	ldi	r23, 0x00	; 0
 dd0:	60 e0       	ldi	r22, 0x00	; 0
 dd2:	08 95       	ret

00000dd4 <__fp_nan>:
 dd4:	9f ef       	ldi	r25, 0xFF	; 255
 dd6:	80 ec       	ldi	r24, 0xC0	; 192
 dd8:	08 95       	ret

00000dda <__fp_pscA>:
 dda:	00 24       	eor	r0, r0
 ddc:	0a 94       	dec	r0
 dde:	16 16       	cp	r1, r22
 de0:	17 06       	cpc	r1, r23
 de2:	18 06       	cpc	r1, r24
 de4:	09 06       	cpc	r0, r25
 de6:	08 95       	ret

00000de8 <__fp_pscB>:
 de8:	00 24       	eor	r0, r0
 dea:	0a 94       	dec	r0
 dec:	12 16       	cp	r1, r18
 dee:	13 06       	cpc	r1, r19
 df0:	14 06       	cpc	r1, r20
 df2:	05 06       	cpc	r0, r21
 df4:	08 95       	ret

00000df6 <__fp_round>:
 df6:	09 2e       	mov	r0, r25
 df8:	03 94       	inc	r0
 dfa:	00 0c       	add	r0, r0
 dfc:	11 f4       	brne	.+4      	; 0xe02 <__fp_round+0xc>
 dfe:	88 23       	and	r24, r24
 e00:	52 f0       	brmi	.+20     	; 0xe16 <__fp_round+0x20>
 e02:	bb 0f       	add	r27, r27
 e04:	40 f4       	brcc	.+16     	; 0xe16 <__fp_round+0x20>
 e06:	bf 2b       	or	r27, r31
 e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0x18>
 e0a:	60 ff       	sbrs	r22, 0
 e0c:	04 c0       	rjmp	.+8      	; 0xe16 <__fp_round+0x20>
 e0e:	6f 5f       	subi	r22, 0xFF	; 255
 e10:	7f 4f       	sbci	r23, 0xFF	; 255
 e12:	8f 4f       	sbci	r24, 0xFF	; 255
 e14:	9f 4f       	sbci	r25, 0xFF	; 255
 e16:	08 95       	ret

00000e18 <__divmodhi4>:
 e18:	97 fb       	bst	r25, 7
 e1a:	07 2e       	mov	r0, r23
 e1c:	16 f4       	brtc	.+4      	; 0xe22 <__divmodhi4+0xa>
 e1e:	00 94       	com	r0
 e20:	06 d0       	rcall	.+12     	; 0xe2e <__divmodhi4_neg1>
 e22:	77 fd       	sbrc	r23, 7
 e24:	08 d0       	rcall	.+16     	; 0xe36 <__divmodhi4_neg2>
 e26:	0b d0       	rcall	.+22     	; 0xe3e <__udivmodhi4>
 e28:	07 fc       	sbrc	r0, 7
 e2a:	05 d0       	rcall	.+10     	; 0xe36 <__divmodhi4_neg2>
 e2c:	3e f4       	brtc	.+14     	; 0xe3c <__divmodhi4_exit>

00000e2e <__divmodhi4_neg1>:
 e2e:	90 95       	com	r25
 e30:	81 95       	neg	r24
 e32:	9f 4f       	sbci	r25, 0xFF	; 255
 e34:	08 95       	ret

00000e36 <__divmodhi4_neg2>:
 e36:	70 95       	com	r23
 e38:	61 95       	neg	r22
 e3a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e3c <__divmodhi4_exit>:
 e3c:	08 95       	ret

00000e3e <__udivmodhi4>:
 e3e:	aa 1b       	sub	r26, r26
 e40:	bb 1b       	sub	r27, r27
 e42:	51 e1       	ldi	r21, 0x11	; 17
 e44:	07 c0       	rjmp	.+14     	; 0xe54 <__udivmodhi4_ep>

00000e46 <__udivmodhi4_loop>:
 e46:	aa 1f       	adc	r26, r26
 e48:	bb 1f       	adc	r27, r27
 e4a:	a6 17       	cp	r26, r22
 e4c:	b7 07       	cpc	r27, r23
 e4e:	10 f0       	brcs	.+4      	; 0xe54 <__udivmodhi4_ep>
 e50:	a6 1b       	sub	r26, r22
 e52:	b7 0b       	sbc	r27, r23

00000e54 <__udivmodhi4_ep>:
 e54:	88 1f       	adc	r24, r24
 e56:	99 1f       	adc	r25, r25
 e58:	5a 95       	dec	r21
 e5a:	a9 f7       	brne	.-22     	; 0xe46 <__udivmodhi4_loop>
 e5c:	80 95       	com	r24
 e5e:	90 95       	com	r25
 e60:	bc 01       	movw	r22, r24
 e62:	cd 01       	movw	r24, r26
 e64:	08 95       	ret

00000e66 <_exit>:
 e66:	f8 94       	cli

00000e68 <__stop_program>:
 e68:	ff cf       	rjmp	.-2      	; 0xe68 <__stop_program>
