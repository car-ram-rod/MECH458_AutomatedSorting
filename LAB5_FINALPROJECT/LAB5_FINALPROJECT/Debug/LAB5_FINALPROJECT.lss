
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006d0  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800108  00800108  0000076c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000079c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001100  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce3  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d0  00000000  00000000  0000266f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075d  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000862  00000000  00000000  000036e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c1       	rjmp	.+842    	; 0x350 <__vector_1>
   6:	00 00       	nop
   8:	b2 c1       	rjmp	.+868    	; 0x36e <__vector_2>
   a:	00 00       	nop
   c:	d3 c1       	rjmp	.+934    	; 0x3b4 <__vector_3>
   e:	00 00       	nop
  10:	e2 c1       	rjmp	.+964    	; 0x3d6 <__vector_4>
  12:	00 00       	nop
  14:	ef c1       	rjmp	.+990    	; 0x3f4 <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ff c1       	rjmp	.+1022   	; 0x41c <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	e2 c1       	rjmp	.+964    	; 0x43a <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 ed       	ldi	r30, 0xD0	; 208
  ac:	f6 e0       	ldi	r31, 0x06	; 6
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 31       	cpi	r26, 0x11	; 17
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	d8 d0       	rcall	.+432    	; 0x280 <main>
  d0:	fd c2       	rjmp	.+1530   	; 0x6cc <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initTimer1>:
#include "interrupt.h"
void initTimer1 (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	/*set Waveform Generation mode to Clear Timer*/
	/*set WGM bits to 0100*/
	/*note WGM is spread over two registers*/
	TCCR1B |= _BV(WGM12);
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	/*set Output Compare Register for 1000 cycles (1ms)*/
	OCR1A = 0x03E8;
  de:	88 ee       	ldi	r24, 0xE8	; 232
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f2:	08 95       	ret

000000f4 <mTimer>:
	return;
}
void mTimer(int count){ // delay microsecond
  f4:	ac 01       	movw	r20, r24
	int i = 0; //initialize loop counter
	/*Enable the output compare interrupt enable*/
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: becomes
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	93 60       	ori	r25, 0x03	; 3
  fe:	90 83       	st	Z, r25
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
 100:	b1 9a       	sbi	0x16, 1	; 22
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
	return;
}
void mTimer(int count){ // delay microsecond
	int i = 0; //initialize loop counter
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 106:	05 c0       	rjmp	.+10     	; 0x112 <mTimer+0x1e>
		if ((TIFR1 & 0x02) == 0x02){
 108:	b1 9b       	sbis	0x16, 1	; 22
 10a:	fe cf       	rjmp	.-4      	; 0x108 <mTimer+0x14>
			//clear interrupt flag by WRITING a ONE to the bit
			TIFR1 |= _BV(OCF1A);
 10c:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop counter
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
	/*initialize timer 1 with prescalar of 1/64*/
	TCCR1B |= _BV(CS11) | _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);

	while (i<count){
 112:	24 17       	cp	r18, r20
 114:	35 07       	cpc	r19, r21
 116:	1c f4       	brge	.+6      	; 0x11e <mTimer+0x2a>
		if ((TIFR1 & 0x02) == 0x02){
 118:	b1 9b       	sbis	0x16, 1	; 22
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <mTimer+0x14>
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <mTimer+0x18>
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <stepperHome>:
	*stepperPos += steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
	
	return; //returns nothing
}
void stepperHome(int *stepperPos,int *stepperIt){
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	8c 01       	movw	r16, r24
 138:	eb 01       	movw	r28, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	PORTA=0x00;
 13a:	12 b8       	out	0x02, r1	; 2
	while (HallEffect==0){
 13c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <HallEffect>
 140:	81 11       	cpse	r24, r1
 142:	1d c0       	rjmp	.+58     	; 0x17e <stepperHome+0x54>
 144:	e1 2c       	mov	r14, r1
 146:	f1 2c       	mov	r15, r1
		PORTA = stepperSigOrd[i%4];
 148:	c7 01       	movw	r24, r14
 14a:	83 70       	andi	r24, 0x03	; 3
 14c:	90 78       	andi	r25, 0x80	; 128
 14e:	99 23       	and	r25, r25
 150:	24 f4       	brge	.+8      	; 0x15a <stepperHome+0x30>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	8c 6f       	ori	r24, 0xFC	; 252
 156:	9f 6f       	ori	r25, 0xFF	; 255
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	fc 01       	movw	r30, r24
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	82 b9       	out	0x02, r24	; 2
		mTimer(delay);
 168:	8e e1       	ldi	r24, 0x1E	; 30
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	c3 df       	rcall	.-122    	; 0xf4 <mTimer>
		i++;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	e8 1a       	sub	r14, r24
 172:	f8 0a       	sbc	r15, r24
}
void stepperHome(int *stepperPos,int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	PORTA=0x00;
	while (HallEffect==0){
 174:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <HallEffect>
 178:	88 23       	and	r24, r24
 17a:	31 f3       	breq	.-52     	; 0x148 <stepperHome+0x1e>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <stepperHome+0x58>
	
	return; //returns nothing
}
void stepperHome(int *stepperPos,int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
 17e:	e1 2c       	mov	r14, r1
 180:	f1 2c       	mov	r15, r1
		i++;
	}
	/*Insert code here to compensate for offset*/
	//
	//	
	*stepperPos=0; //base stepper position (on black)
 182:	f8 01       	movw	r30, r16
 184:	11 82       	std	Z+1, r1	; 0x01
 186:	10 82       	st	Z, r1
	*stepperIt = stepperSigOrd[(i-1)%4]; //remember current setting of stepper
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	ef 1a       	sub	r14, r31
 18c:	f1 08       	sbc	r15, r1
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	e8 22       	and	r14, r24
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	f8 22       	and	r15, r24
 196:	ff 20       	and	r15, r15
 198:	54 f4       	brge	.+20     	; 0x1ae <stepperHome+0x84>
 19a:	e1 e0       	ldi	r30, 0x01	; 1
 19c:	ee 1a       	sub	r14, r30
 19e:	f1 08       	sbc	r15, r1
 1a0:	fc ef       	ldi	r31, 0xFC	; 252
 1a2:	ef 2a       	or	r14, r31
 1a4:	ff 24       	eor	r15, r15
 1a6:	fa 94       	dec	r15
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	e8 1a       	sub	r14, r24
 1ac:	f8 0a       	sbc	r15, r24
 1ae:	f7 01       	movw	r30, r14
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	e0 50       	subi	r30, 0x00	; 0
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	99 83       	std	Y+1, r25	; 0x01
 1be:	88 83       	st	Y, r24
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	08 95       	ret

000001ce <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 1ce:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 1d0:	84 b5       	in	r24, 0x24	; 36
 1d2:	83 68       	ori	r24, 0x83	; 131
 1d4:	84 bd       	out	0x24, r24	; 36
	//TCCR0B &= 0b11110111;//WGM02 set to 0; (_BV(2) => 0x01 << 2)
	//TIMSK0 |= _BV(1);//enable interrupt for execution upon compare match in Timer/Counter 0; UNNEEDED due to sei(); above
	//TCCR0A &= 0b10111111;
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 1d6:	85 b5       	in	r24, 0x25	; 37
 1d8:	83 60       	ori	r24, 0x03	; 3
 1da:	85 bd       	out	0x25, r24	; 37
	//TCCR0B &= 0b11111101;
	dutyCycle = motorDuty*2.55;
 1dc:	07 2e       	mov	r0, r23
 1de:	00 0c       	add	r0, r0
 1e0:	88 0b       	sbc	r24, r24
 1e2:	99 0b       	sbc	r25, r25
 1e4:	84 d1       	rcall	.+776    	; 0x4ee <__floatsisf>
 1e6:	23 e3       	ldi	r18, 0x33	; 51
 1e8:	33 e3       	ldi	r19, 0x33	; 51
 1ea:	43 e2       	ldi	r20, 0x23	; 35
 1ec:	50 e4       	ldi	r21, 0x40	; 64
 1ee:	e3 d1       	rcall	.+966    	; 0x5b6 <__mulsf3>
 1f0:	50 d1       	rcall	.+672    	; 0x492 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 1f2:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 7f       	andi	r24, 0xF0	; 240
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	08 95       	ret

000001fc <setupISR>:
}
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	EIMSK |=0b01011111; //initialize INT6,4:0
 1fc:	8d b3       	in	r24, 0x1d	; 29
 1fe:	8f 65       	ori	r24, 0x5F	; 95
 200:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= (_BV(INT6) | _BV(INT4)) | _BV(INT3)) | _BV(INT2))  | _BV(INT1)) | (_BV(INT0)); //enable INT6, INT4, INT3, INT2, INT1 and INT0
	EICRA |= _BV(ISC21) | _BV(ISC20) | _BV(ISC01) | _BV(ISC00); //rising edge interrupt; EICRA determines INT3:0
 202:	e9 e6       	ldi	r30, 0x69	; 105
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	83 63       	ori	r24, 0x33	; 51
 20a:	80 83       	st	Z, r24
	EICRB |= _BV(ISC61); //falling edge for INT6 Hall Effect; EICRB determines INT7:4
 20c:	ea e6       	ldi	r30, 0x6A	; 106
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 62       	ori	r24, 0x20	; 32
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <setupADC>:
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8d 68       	ori	r24, 0x8D	; 141
 220:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 222:	ec e7       	ldi	r30, 0x7C	; 124
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	81 64       	ori	r24, 0x41	; 65
 22a:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 22c:	80 81       	ld	r24, Z
 22e:	81 7e       	andi	r24, 0xE1	; 225
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <motorControl>:
	//PORTF &= 0b11111110;
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 234:	26 2f       	mov	r18, r22
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 23c:	43 70       	andi	r20, 0x03	; 3
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	42 17       	cp	r20, r18
 242:	53 07       	cpc	r21, r19
 244:	81 f0       	breq	.+32     	; 0x266 <motorControl+0x32>
		PORTB &= 0b11110000; //apply Vcc Brake
 246:	45 b1       	in	r20, 0x05	; 5
 248:	40 7f       	andi	r20, 0xF0	; 240
 24a:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 24c:	45 b1       	in	r20, 0x05	; 5
 24e:	20 95       	com	r18
 250:	30 95       	com	r19
 252:	23 70       	andi	r18, 0x03	; 3
 254:	33 27       	eor	r19, r19
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	24 2b       	or	r18, r20
 260:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 262:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 266:	bc 01       	movw	r22, r24
 268:	99 0f       	add	r25, r25
 26a:	88 0b       	sbc	r24, r24
 26c:	99 0b       	sbc	r25, r25
 26e:	3f d1       	rcall	.+638    	; 0x4ee <__floatsisf>
 270:	23 e3       	ldi	r18, 0x33	; 51
 272:	33 e3       	ldi	r19, 0x33	; 51
 274:	43 e2       	ldi	r20, 0x23	; 35
 276:	50 e4       	ldi	r21, 0x40	; 64
 278:	9e d1       	rcall	.+828    	; 0x5b6 <__mulsf3>
 27a:	0b d1       	rcall	.+534    	; 0x492 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 27c:	67 bd       	out	0x27, r22	; 39
 27e:	08 95       	ret

00000280 <main>:
volatile unsigned char ADCExitFlag; //object is at end of conveyor
volatile unsigned char inductiveFlag; //an inductive flag is picked up
unsigned int stepperSigOrd[4] = {0b00110010,0b00010110,0b00101001,0b00010101};

/* Main Routine */
int main(int argc, char *argv[]){
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <main+0x6>
 286:	00 d0       	rcall	.+0      	; 0x288 <main+0x8>
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	/*User Variables*/
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 28c:	1a 82       	std	Y+2, r1	; 0x02
 28e:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0b00001101;
 290:	8d e0       	ldi	r24, 0x0D	; 13
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9c 83       	std	Y+4, r25	; 0x04
 296:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t oldADCResult = 0x00;
	int objectsMeasured = 0x00; //count of objects that have had their reflectivities quantified
	int objectsSorted = 0x00; //count of objects that have been sorted

	/*initializations*/
	cli(); //disable interrupts
 298:	f8 94       	cli
	/*initialize clock to 8MHz*/
	CLKPR = _BV(CLKPCE);
 29a:	e1 e6       	ldi	r30, 0x61	; 97
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	80 83       	st	Z, r24
	CLKPR = 0;
 2a2:	10 82       	st	Z, r1
	
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM;
 2a4:	8e e1       	ldi	r24, 0x1E	; 30
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	92 df       	rcall	.-220    	; 0x1ce <setupPWM>
	setupISR();
 2aa:	a8 df       	rcall	.-176    	; 0x1fc <setupISR>
	setupADC();
 2ac:	b5 df       	rcall	.-150    	; 0x218 <setupADC>
 2ae:	12 df       	rcall	.-476    	; 0xd4 <initTimer1>
	initTimer1();
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	81 b9       	out	0x01, r24	; 1
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 2b4:	84 b9       	out	0x04, r24	; 4
 2b6:	87 b9       	out	0x07, r24	; 7
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 2b8:	80 ef       	ldi	r24, 0xF0	; 240
	DDRC = 0xFF; //LEDs Debugging
 2ba:	8a b9       	out	0x0a, r24	; 10
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 2bc:	1d b8       	out	0x0d, r1	; 13
 2be:	10 ba       	out	0x10, r1	; 16
	DDRE = 0x00; /*PE4=HallEffect for stepper*/
 2c0:	78 94       	sei
	DDRF = 0x00; /*PF1=ADC1 pin*/	
 2c2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <HallEffect>
	sei(); //enable interrupts
	// PORTB &= 0b0000; //start motor in specified direction
	//PORTB |=0b1000;
	HallEffect=0x00; //set HallEffect equal to zero so while loop is continuous until break out
 2c6:	be 01       	movw	r22, r28
 2c8:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration);
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	2c df       	rcall	.-424    	; 0x12a <stepperHome>
 2d2:	ee 98       	cbi	0x1d, 6	; 29
 2d4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADCObjCntConveyor>
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6) 
	/*initialize flags and counters*/
	ADCObjCntConveyor=0;
 2d8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <ADCObjCntSense>
	ADCObjCntSense=0;
 2dc:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <inductiveFlag>
	inductiveFlag=0;
 2e0:	61 e0       	ldi	r22, 0x01	; 1
	
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 2e2:	8e e1       	ldi	r24, 0x1E	; 30
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	a6 df       	rcall	.-180    	; 0x234 <motorControl>
 2e8:	ea e7       	ldi	r30, 0x7A	; 122
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
	ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
 2ec:	80 81       	ld	r24, Z
 2ee:	80 64       	ori	r24, 0x40	; 64
 2f0:	80 83       	st	Z, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADCObjCntSense>
	while(1){
		if(ADCObjCntSense>0){
 2f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ADCResultFlag>
			//start ADC conversions (continuously based on timer)
			//let reflectivity's build up to a maximum number
		} else {
			//shut off ADC conversions
		}
		if(ADCResultFlag){
 2fc:	88 23       	and	r24, r24
 2fe:	01 f1       	breq	.+64     	; 0x340 <main+0xc0>
 300:	29 2f       	mov	r18, r25
 302:	30 e0       	ldi	r19, 0x00	; 0
			if(ADCResult>oldADCResult){ //reflectivity is increasing still
 304:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <ADCResult>
 308:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <ADCResult+0x1>
 30c:	24 17       	cp	r18, r20
 30e:	35 07       	cpc	r19, r21
 310:	30 f4       	brcc	.+12     	; 0x31e <main+0x9e>
 312:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <ADCResult>
				oldADCResult=ADCResult;
 316:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <ADCResult+0x1>
 31a:	98 2f       	mov	r25, r24
 31c:	0f c0       	rjmp	.+30     	; 0x33c <main+0xbc>
 31e:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <ADCResult>
			}else if((ADCResult<0x04) && (ADCResult<oldADCResult)){ //minimal to no reflection AND reflectivities have been reducing
 322:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <ADCResult+0x1>
 326:	44 30       	cpi	r20, 0x04	; 4
 328:	51 05       	cpc	r21, r1
 32a:	40 f4       	brcc	.+16     	; 0x33c <main+0xbc>
 32c:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <ADCResult>
 330:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <ADCResult+0x1>
 334:	42 17       	cp	r20, r18
 336:	53 07       	cpc	r21, r19
 338:	08 f4       	brcc	.+2      	; 0x33c <main+0xbc>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ADCResultFlag>
				//set link ID equal to objectsMeasured
				//set link quantity equal to oldADCResult
				oldADCResult=0x00;//reset oldADCResult to 0 for the next objects reflectivites to be measured
				//set new link in relation to inductive sensing?
			}
			ADCResultFlag=0;
 340:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ADCExitFlag>
		}
		if(ADCExitFlag){
 344:	81 11       	cpse	r24, r1
 346:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ADCExitFlag>
			//
			ADCExitFlag=0;
 34a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <inductiveFlag>
		}
		if(inductiveFlag){
 34e:	d2 cf       	rjmp	.-92     	; 0x2f4 <main+0x74>

00000350 <__vector_1>:
 350:	1f 92       	push	r1
			
		}
	}
 352:	0f 92       	push	r0
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/

ISR(INT0_vect){ // on PD0; KILL SWITCH
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
	PORTB &= 0b11110000; //stop motor by applying Vcc break
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	85 b9       	out	0x05, r24	; 5
}
 362:	8f 91       	pop	r24
 364:	0f 90       	pop	r0
 366:	0f be       	out	0x3f, r0	; 63
 368:	0f 90       	pop	r0
 36a:	1f 90       	pop	r1
 36c:	18 95       	reti

0000036e <__vector_2>:
/*sensor 1: 1st Optical-Near Reflective sensor*/
ISR(INT1_vect){ // on PD1; active high
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	0b b6       	in	r0, 0x3b	; 59
 37a:	0f 92       	push	r0
 37c:	8f 93       	push	r24
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	ADCSRA |= _BV(ADSC); //begin ADC conversions
 382:	ea e7       	ldi	r30, 0x7A	; 122
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 64       	ori	r24, 0x40	; 64
 38a:	80 83       	st	Z, r24
	ADCObjCntSense+=1;
 38c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADCObjCntSense>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADCObjCntSense>
	ADCObjCntConveyor+=1;
 396:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCObjCntConveyor>
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADCObjCntConveyor>
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0b be       	out	0x3b, r0	; 59
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_3>:
/*sensor 3: 2nd Optical-Near Inductive sensor*/
ISR(INT2_vect){ // on PD2; active low
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
	ADCObjCntSense-=1;
 3c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADCObjCntSense>
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADCObjCntSense>
}
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_4>:
/*sensor 4: Inductive sensor*/
ISR(INT3_vect){ //on PD3; active low
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	8f 93       	push	r24
	inductiveFlag=1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <inductiveFlag>
}
 3e8:	8f 91       	pop	r24
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <__vector_5>:
/*sensor 5: 3rd Optical-Near exit of conveyor*/
ISR(INT4_vect){ //on PE4; active low
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	8f 93       	push	r24
	ADCExitFlag=0x01;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ADCExitFlag>
	ADCObjCntConveyor-=1;
 406:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADCObjCntConveyor>
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADCObjCntConveyor>
}
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__vector_7>:
/*sensor 6: Hall Effect sensor; used for homing stepper*/
ISR(INT6_vect){ //Active low for hall effect sensor on PE6
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	8f 93       	push	r24
	HallEffect=0x01;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <HallEffect>
}
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_29>:

/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
	ADCResult = ADCL;
 44c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADCResult+0x1>
 456:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADCResult>
	ADCResult += ADCH << 8;
 45a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 45e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <ADCResult>
 462:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <ADCResult+0x1>
 466:	89 2f       	mov	r24, r25
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	98 2f       	mov	r25, r24
 46c:	88 27       	eor	r24, r24
 46e:	82 0f       	add	r24, r18
 470:	93 1f       	adc	r25, r19
 472:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADCResult+0x1>
 476:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADCResult>
	ADCResultFlag = 1;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADCResultFlag>
}
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__fixunssfsi>:
 492:	70 d0       	rcall	.+224    	; 0x574 <__fp_splitA>
 494:	88 f0       	brcs	.+34     	; 0x4b8 <__fixunssfsi+0x26>
 496:	9f 57       	subi	r25, 0x7F	; 127
 498:	90 f0       	brcs	.+36     	; 0x4be <__fixunssfsi+0x2c>
 49a:	b9 2f       	mov	r27, r25
 49c:	99 27       	eor	r25, r25
 49e:	b7 51       	subi	r27, 0x17	; 23
 4a0:	a0 f0       	brcs	.+40     	; 0x4ca <__fixunssfsi+0x38>
 4a2:	d1 f0       	breq	.+52     	; 0x4d8 <__fixunssfsi+0x46>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a f0       	brmi	.+6      	; 0x4b4 <__fixunssfsi+0x22>
 4ae:	ba 95       	dec	r27
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__fixunssfsi+0x12>
 4b2:	12 c0       	rjmp	.+36     	; 0x4d8 <__fixunssfsi+0x46>
 4b4:	b1 30       	cpi	r27, 0x01	; 1
 4b6:	81 f0       	breq	.+32     	; 0x4d8 <__fixunssfsi+0x46>
 4b8:	77 d0       	rcall	.+238    	; 0x5a8 <__fp_zero>
 4ba:	b1 e0       	ldi	r27, 0x01	; 1
 4bc:	08 95       	ret
 4be:	74 c0       	rjmp	.+232    	; 0x5a8 <__fp_zero>
 4c0:	67 2f       	mov	r22, r23
 4c2:	78 2f       	mov	r23, r24
 4c4:	88 27       	eor	r24, r24
 4c6:	b8 5f       	subi	r27, 0xF8	; 248
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <__fixunssfsi+0x46>
 4ca:	b9 3f       	cpi	r27, 0xF9	; 249
 4cc:	cc f3       	brlt	.-14     	; 0x4c0 <__fixunssfsi+0x2e>
 4ce:	86 95       	lsr	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b3 95       	inc	r27
 4d6:	d9 f7       	brne	.-10     	; 0x4ce <__fixunssfsi+0x3c>
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__fixunssfsi+0x56>
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__floatunsisf>:
 4ea:	e8 94       	clt
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__floatsisf+0x12>

000004ee <__floatsisf>:
 4ee:	97 fb       	bst	r25, 7
 4f0:	3e f4       	brtc	.+14     	; 0x500 <__floatsisf+0x12>
 4f2:	90 95       	com	r25
 4f4:	80 95       	com	r24
 4f6:	70 95       	com	r23
 4f8:	61 95       	neg	r22
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	8f 4f       	sbci	r24, 0xFF	; 255
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	99 23       	and	r25, r25
 502:	a9 f0       	breq	.+42     	; 0x52e <__floatsisf+0x40>
 504:	f9 2f       	mov	r31, r25
 506:	96 e9       	ldi	r25, 0x96	; 150
 508:	bb 27       	eor	r27, r27
 50a:	93 95       	inc	r25
 50c:	f6 95       	lsr	r31
 50e:	87 95       	ror	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b7 95       	ror	r27
 516:	f1 11       	cpse	r31, r1
 518:	f8 cf       	rjmp	.-16     	; 0x50a <__floatsisf+0x1c>
 51a:	fa f4       	brpl	.+62     	; 0x55a <__floatsisf+0x6c>
 51c:	bb 0f       	add	r27, r27
 51e:	11 f4       	brne	.+4      	; 0x524 <__floatsisf+0x36>
 520:	60 ff       	sbrs	r22, 0
 522:	1b c0       	rjmp	.+54     	; 0x55a <__floatsisf+0x6c>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	16 c0       	rjmp	.+44     	; 0x55a <__floatsisf+0x6c>
 52e:	88 23       	and	r24, r24
 530:	11 f0       	breq	.+4      	; 0x536 <__floatsisf+0x48>
 532:	96 e9       	ldi	r25, 0x96	; 150
 534:	11 c0       	rjmp	.+34     	; 0x558 <__floatsisf+0x6a>
 536:	77 23       	and	r23, r23
 538:	21 f0       	breq	.+8      	; 0x542 <__floatsisf+0x54>
 53a:	9e e8       	ldi	r25, 0x8E	; 142
 53c:	87 2f       	mov	r24, r23
 53e:	76 2f       	mov	r23, r22
 540:	05 c0       	rjmp	.+10     	; 0x54c <__floatsisf+0x5e>
 542:	66 23       	and	r22, r22
 544:	71 f0       	breq	.+28     	; 0x562 <__floatsisf+0x74>
 546:	96 e8       	ldi	r25, 0x86	; 134
 548:	86 2f       	mov	r24, r22
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	2a f0       	brmi	.+10     	; 0x55a <__floatsisf+0x6c>
 550:	9a 95       	dec	r25
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	da f7       	brpl	.-10     	; 0x550 <__floatsisf+0x62>
 55a:	88 0f       	add	r24, r24
 55c:	96 95       	lsr	r25
 55e:	87 95       	ror	r24
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <__fp_split3>:
 564:	57 fd       	sbrc	r21, 7
 566:	90 58       	subi	r25, 0x80	; 128
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	59 f0       	breq	.+22     	; 0x584 <__fp_splitA+0x10>
 56e:	5f 3f       	cpi	r21, 0xFF	; 255
 570:	71 f0       	breq	.+28     	; 0x58e <__fp_splitA+0x1a>
 572:	47 95       	ror	r20

00000574 <__fp_splitA>:
 574:	88 0f       	add	r24, r24
 576:	97 fb       	bst	r25, 7
 578:	99 1f       	adc	r25, r25
 57a:	61 f0       	breq	.+24     	; 0x594 <__fp_splitA+0x20>
 57c:	9f 3f       	cpi	r25, 0xFF	; 255
 57e:	79 f0       	breq	.+30     	; 0x59e <__fp_splitA+0x2a>
 580:	87 95       	ror	r24
 582:	08 95       	ret
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	14 06       	cpc	r1, r20
 58a:	55 1f       	adc	r21, r21
 58c:	f2 cf       	rjmp	.-28     	; 0x572 <__fp_split3+0xe>
 58e:	46 95       	lsr	r20
 590:	f1 df       	rcall	.-30     	; 0x574 <__fp_splitA>
 592:	08 c0       	rjmp	.+16     	; 0x5a4 <__fp_splitA+0x30>
 594:	16 16       	cp	r1, r22
 596:	17 06       	cpc	r1, r23
 598:	18 06       	cpc	r1, r24
 59a:	99 1f       	adc	r25, r25
 59c:	f1 cf       	rjmp	.-30     	; 0x580 <__fp_splitA+0xc>
 59e:	86 95       	lsr	r24
 5a0:	71 05       	cpc	r23, r1
 5a2:	61 05       	cpc	r22, r1
 5a4:	08 94       	sec
 5a6:	08 95       	ret

000005a8 <__fp_zero>:
 5a8:	e8 94       	clt

000005aa <__fp_szero>:
 5aa:	bb 27       	eor	r27, r27
 5ac:	66 27       	eor	r22, r22
 5ae:	77 27       	eor	r23, r23
 5b0:	cb 01       	movw	r24, r22
 5b2:	97 f9       	bld	r25, 7
 5b4:	08 95       	ret

000005b6 <__mulsf3>:
 5b6:	0b d0       	rcall	.+22     	; 0x5ce <__mulsf3x>
 5b8:	78 c0       	rjmp	.+240    	; 0x6aa <__fp_round>
 5ba:	69 d0       	rcall	.+210    	; 0x68e <__fp_pscA>
 5bc:	28 f0       	brcs	.+10     	; 0x5c8 <__mulsf3+0x12>
 5be:	6e d0       	rcall	.+220    	; 0x69c <__fp_pscB>
 5c0:	18 f0       	brcs	.+6      	; 0x5c8 <__mulsf3+0x12>
 5c2:	95 23       	and	r25, r21
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__mulsf3+0x12>
 5c6:	5a c0       	rjmp	.+180    	; 0x67c <__fp_inf>
 5c8:	5f c0       	rjmp	.+190    	; 0x688 <__fp_nan>
 5ca:	11 24       	eor	r1, r1
 5cc:	ee cf       	rjmp	.-36     	; 0x5aa <__fp_szero>

000005ce <__mulsf3x>:
 5ce:	ca df       	rcall	.-108    	; 0x564 <__fp_split3>
 5d0:	a0 f3       	brcs	.-24     	; 0x5ba <__mulsf3+0x4>

000005d2 <__mulsf3_pse>:
 5d2:	95 9f       	mul	r25, r21
 5d4:	d1 f3       	breq	.-12     	; 0x5ca <__mulsf3+0x14>
 5d6:	95 0f       	add	r25, r21
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	55 1f       	adc	r21, r21
 5dc:	62 9f       	mul	r22, r18
 5de:	f0 01       	movw	r30, r0
 5e0:	72 9f       	mul	r23, r18
 5e2:	bb 27       	eor	r27, r27
 5e4:	f0 0d       	add	r31, r0
 5e6:	b1 1d       	adc	r27, r1
 5e8:	63 9f       	mul	r22, r19
 5ea:	aa 27       	eor	r26, r26
 5ec:	f0 0d       	add	r31, r0
 5ee:	b1 1d       	adc	r27, r1
 5f0:	aa 1f       	adc	r26, r26
 5f2:	64 9f       	mul	r22, r20
 5f4:	66 27       	eor	r22, r22
 5f6:	b0 0d       	add	r27, r0
 5f8:	a1 1d       	adc	r26, r1
 5fa:	66 1f       	adc	r22, r22
 5fc:	82 9f       	mul	r24, r18
 5fe:	22 27       	eor	r18, r18
 600:	b0 0d       	add	r27, r0
 602:	a1 1d       	adc	r26, r1
 604:	62 1f       	adc	r22, r18
 606:	73 9f       	mul	r23, r19
 608:	b0 0d       	add	r27, r0
 60a:	a1 1d       	adc	r26, r1
 60c:	62 1f       	adc	r22, r18
 60e:	83 9f       	mul	r24, r19
 610:	a0 0d       	add	r26, r0
 612:	61 1d       	adc	r22, r1
 614:	22 1f       	adc	r18, r18
 616:	74 9f       	mul	r23, r20
 618:	33 27       	eor	r19, r19
 61a:	a0 0d       	add	r26, r0
 61c:	61 1d       	adc	r22, r1
 61e:	23 1f       	adc	r18, r19
 620:	84 9f       	mul	r24, r20
 622:	60 0d       	add	r22, r0
 624:	21 1d       	adc	r18, r1
 626:	82 2f       	mov	r24, r18
 628:	76 2f       	mov	r23, r22
 62a:	6a 2f       	mov	r22, r26
 62c:	11 24       	eor	r1, r1
 62e:	9f 57       	subi	r25, 0x7F	; 127
 630:	50 40       	sbci	r21, 0x00	; 0
 632:	8a f0       	brmi	.+34     	; 0x656 <__mulsf3_pse+0x84>
 634:	e1 f0       	breq	.+56     	; 0x66e <__mulsf3_pse+0x9c>
 636:	88 23       	and	r24, r24
 638:	4a f0       	brmi	.+18     	; 0x64c <__mulsf3_pse+0x7a>
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	bb 1f       	adc	r27, r27
 640:	66 1f       	adc	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	91 50       	subi	r25, 0x01	; 1
 648:	50 40       	sbci	r21, 0x00	; 0
 64a:	a9 f7       	brne	.-22     	; 0x636 <__mulsf3_pse+0x64>
 64c:	9e 3f       	cpi	r25, 0xFE	; 254
 64e:	51 05       	cpc	r21, r1
 650:	70 f0       	brcs	.+28     	; 0x66e <__mulsf3_pse+0x9c>
 652:	14 c0       	rjmp	.+40     	; 0x67c <__fp_inf>
 654:	aa cf       	rjmp	.-172    	; 0x5aa <__fp_szero>
 656:	5f 3f       	cpi	r21, 0xFF	; 255
 658:	ec f3       	brlt	.-6      	; 0x654 <__mulsf3_pse+0x82>
 65a:	98 3e       	cpi	r25, 0xE8	; 232
 65c:	dc f3       	brlt	.-10     	; 0x654 <__mulsf3_pse+0x82>
 65e:	86 95       	lsr	r24
 660:	77 95       	ror	r23
 662:	67 95       	ror	r22
 664:	b7 95       	ror	r27
 666:	f7 95       	ror	r31
 668:	e7 95       	ror	r30
 66a:	9f 5f       	subi	r25, 0xFF	; 255
 66c:	c1 f7       	brne	.-16     	; 0x65e <__mulsf3_pse+0x8c>
 66e:	fe 2b       	or	r31, r30
 670:	88 0f       	add	r24, r24
 672:	91 1d       	adc	r25, r1
 674:	96 95       	lsr	r25
 676:	87 95       	ror	r24
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret

0000067c <__fp_inf>:
 67c:	97 f9       	bld	r25, 7
 67e:	9f 67       	ori	r25, 0x7F	; 127
 680:	80 e8       	ldi	r24, 0x80	; 128
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	08 95       	ret

00000688 <__fp_nan>:
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	80 ec       	ldi	r24, 0xC0	; 192
 68c:	08 95       	ret

0000068e <__fp_pscA>:
 68e:	00 24       	eor	r0, r0
 690:	0a 94       	dec	r0
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	09 06       	cpc	r0, r25
 69a:	08 95       	ret

0000069c <__fp_pscB>:
 69c:	00 24       	eor	r0, r0
 69e:	0a 94       	dec	r0
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	14 06       	cpc	r1, r20
 6a6:	05 06       	cpc	r0, r21
 6a8:	08 95       	ret

000006aa <__fp_round>:
 6aa:	09 2e       	mov	r0, r25
 6ac:	03 94       	inc	r0
 6ae:	00 0c       	add	r0, r0
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__fp_round+0xc>
 6b2:	88 23       	and	r24, r24
 6b4:	52 f0       	brmi	.+20     	; 0x6ca <__fp_round+0x20>
 6b6:	bb 0f       	add	r27, r27
 6b8:	40 f4       	brcc	.+16     	; 0x6ca <__fp_round+0x20>
 6ba:	bf 2b       	or	r27, r31
 6bc:	11 f4       	brne	.+4      	; 0x6c2 <__fp_round+0x18>
 6be:	60 ff       	sbrs	r22, 0
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__fp_round+0x20>
 6c2:	6f 5f       	subi	r22, 0xFF	; 255
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
