
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  00000c8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001397  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  00002163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e3  00000000  00000000  00002ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000038c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b19  00000000  00000000  0000432b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	fd c3       	rjmp	.+2042   	; 0x800 <__vector_1>
   6:	00 00       	nop
   8:	0a c4       	rjmp	.+2068   	; 0x81e <__vector_2>
   a:	00 00       	nop
   c:	1f c4       	rjmp	.+2110   	; 0x84c <__vector_3>
   e:	00 00       	nop
  10:	34 c4       	rjmp	.+2152   	; 0x87a <__vector_4>
  12:	00 00       	nop
  14:	49 c4       	rjmp	.+2194   	; 0x8a8 <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c4       	rjmp	.+2332   	; 0x93a <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c4       	rjmp	.+2144   	; 0x8d6 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ee       	ldi	r30, 0xEE	; 238
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	af 30       	cpi	r26, 0x0F	; 15
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	ab d1       	rcall	.+854    	; 0x426 <main>
  d0:	8c c5       	rjmp	.+2840   	; 0xbea <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <timer1Init>:
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
  de:	88 ee       	ldi	r24, 0xE8	; 232
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f2:	08 95       	ret

000000f4 <timer2Init>:
/*at a clock frequency of 8MHz this is a 1.024ms timer for each while loop cycle*/
/*e.g. (32/8MHz)x(0xFF=256)=0.001024s=1.024ms*/
void timer2Init(void){ //clock is turned on during interval of use and then off when unused
	//sei(); enables all interrupts thus following is unneccessary 
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
  f4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  f8:	08 95       	ret

000000fa <mTimer2>:
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  fa:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
  fc:	e1 eb       	ldi	r30, 0xB1	; 177
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	93 60       	ori	r25, 0x03	; 3
 104:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
 106:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 10a:	b8 99       	sbic	0x17, 0	; 23
 10c:	b8 9a       	sbi	0x17, 0	; 23
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	05 c0       	rjmp	.+10     	; 0x11e <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 114:	b8 9b       	sbis	0x17, 0	; 23
 116:	fe cf       	rjmp	.-4      	; 0x114 <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 118:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 11e:	24 17       	cp	r18, r20
 120:	35 07       	cpc	r19, r21
 122:	1c f4       	brge	.+6      	; 0x12a <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 124:	b8 9b       	sbis	0x17, 0	; 23
 126:	f6 cf       	rjmp	.-20     	; 0x114 <mTimer2+0x1a>
 128:	f7 cf       	rjmp	.-18     	; 0x118 <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 12a:	e1 eb       	ldi	r30, 0xB1	; 177
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <timer3Init>:
}
void timer3Init(void){ //clock is turned on during interval of use and then off when unused
	TCCR3A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV3 flag
 136:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 13a:	08 95       	ret

0000013c <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
 13c:	8f 92       	push	r8
 13e:	9f 92       	push	r9
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	7b 01       	movw	r14, r22
 156:	5a 01       	movw	r10, r20
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
 158:	da 01       	movw	r26, r20
 15a:	ed 91       	ld	r30, X+
 15c:	fc 91       	ld	r31, X
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
 15e:	9c 01       	movw	r18, r24
 160:	99 23       	and	r25, r25
 162:	24 f4       	brge	.+8      	; 0x16c <stepperControl+0x30>
 164:	22 27       	eor	r18, r18
 166:	33 27       	eor	r19, r19
 168:	28 1b       	sub	r18, r24
 16a:	39 0b       	sbc	r19, r25
 16c:	49 01       	movw	r8, r18
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
 16e:	20 31       	cpi	r18, 0x10	; 16
 170:	31 05       	cpc	r19, r1
 172:	38 f4       	brcc	.+14     	; 0x182 <stepperControl+0x46>
		minDelay=maxDelay-absSteps/2;
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	02 2f       	mov	r16, r18
 17a:	3f e0       	ldi	r19, 0x0F	; 15
 17c:	53 2f       	mov	r21, r19
 17e:	52 1b       	sub	r21, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <stepperControl+0x4a>
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
 182:	08 e0       	ldi	r16, 0x08	; 8
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
 184:	57 e0       	ldi	r21, 0x07	; 7
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
 186:	99 23       	and	r25, r25
 188:	24 f4       	brge	.+8      	; 0x192 <stepperControl+0x56>
 18a:	cc 24       	eor	r12, r12
 18c:	ca 94       	dec	r12
 18e:	dc 2c       	mov	r13, r12
 190:	03 c0       	rjmp	.+6      	; 0x198 <stepperControl+0x5c>
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
 192:	cc 24       	eor	r12, r12
 194:	c3 94       	inc	r12
 196:	d1 2c       	mov	r13, r1
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
 198:	ec 0d       	add	r30, r12
 19a:	fd 1d       	adc	r31, r13
	if(PORTAREGSet==4)PORTAREGSet=0;
 19c:	e4 30       	cpi	r30, 0x04	; 4
 19e:	f1 05       	cpc	r31, r1
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <stepperControl+0x74>
	if(PORTAREGSet==-1)PORTAREGSet=3;
 1a2:	ef 3f       	cpi	r30, 0xFF	; 255
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	fc 07       	cpc	r31, r28
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <stepperControl+0x78>
 1aa:	e3 e0       	ldi	r30, 0x03	; 3
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <stepperControl+0x78>
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
	if(PORTAREGSet==4)PORTAREGSet=0;
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 1b4:	a1 eb       	ldi	r26, 0xB1	; 177
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	2c 91       	ld	r18, X
 1ba:	23 60       	ori	r18, 0x03	; 3
 1bc:	2c 93       	st	X, r18
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
 1be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
 1c2:	b8 99       	sbic	0x17, 0	; 23
 1c4:	b8 9a       	sbi	0x17, 0	; 23
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
 1c6:	df 01       	movw	r26, r30
 1c8:	aa 0f       	add	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	a0 50       	subi	r26, 0x00	; 0
 1ce:	bf 4f       	sbci	r27, 0xFF	; 255
 1d0:	2c 91       	ld	r18, X
 1d2:	22 b9       	out	0x02, r18	; 2
	for(i=2;i<=absSteps;i++){	
 1d4:	d2 e0       	ldi	r29, 0x02	; 2
 1d6:	8d 16       	cp	r8, r29
 1d8:	91 04       	cpc	r9, r1
 1da:	f0 f1       	brcs	.+124    	; 0x258 <stepperControl+0x11c>
 1dc:	4f e0       	ldi	r20, 0x0F	; 15
 1de:	a2 e0       	ldi	r26, 0x02	; 2
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	94 01       	movw	r18, r8
 1ea:	2a 1b       	sub	r18, r26
 1ec:	3b 0b       	sbc	r19, r27
 1ee:	02 17       	cp	r16, r18
 1f0:	13 07       	cpc	r17, r19
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <stepperControl+0xc0>
			if(delay>minDelay)delay -= 1;
 1f4:	54 17       	cp	r21, r20
 1f6:	30 f4       	brcc	.+12     	; 0x204 <stepperControl+0xc8>
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <stepperControl+0xce>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
 1fc:	4f 30       	cpi	r20, 0x0F	; 15
 1fe:	20 f4       	brcc	.+8      	; 0x208 <stepperControl+0xcc>
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	03 c0       	rjmp	.+6      	; 0x20a <stepperControl+0xce>
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
 204:	45 2f       	mov	r20, r21
 206:	01 c0       	rjmp	.+2      	; 0x20a <stepperControl+0xce>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
 208:	4f e0       	ldi	r20, 0x0F	; 15
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
 20a:	ec 0d       	add	r30, r12
 20c:	fd 1d       	adc	r31, r13
		if(PORTAREGSet==4)PORTAREGSet=0;
 20e:	e4 30       	cpi	r30, 0x04	; 4
 210:	f1 05       	cpc	r31, r1
 212:	39 f0       	breq	.+14     	; 0x222 <stepperControl+0xe6>
		if(PORTAREGSet==-1)PORTAREGSet=3;
 214:	ef 3f       	cpi	r30, 0xFF	; 255
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	f2 07       	cpc	r31, r18
 21a:	29 f4       	brne	.+10     	; 0x226 <stepperControl+0xea>
 21c:	e3 e0       	ldi	r30, 0x03	; 3
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <stepperControl+0xea>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	64 2f       	mov	r22, r20
 228:	70 e0       	ldi	r23, 0x00	; 0
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
		while (k<delay){ //iterate through given count
 22e:	05 c0       	rjmp	.+10     	; 0x23a <stepperControl+0xfe>
			if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 230:	b8 9b       	sbis	0x17, 0	; 23
 232:	03 c0       	rjmp	.+6      	; 0x23a <stepperControl+0xfe>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 234:	b8 9a       	sbi	0x17, 0	; 23
				k+=1;
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<delay){ //iterate through given count
 23a:	26 17       	cp	r18, r22
 23c:	37 07       	cpc	r19, r23
 23e:	c1 f7       	brne	.-16     	; 0x230 <stepperControl+0xf4>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
				k+=1;
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
 240:	9f 01       	movw	r18, r30
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	20 50       	subi	r18, 0x00	; 0
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	e9 01       	movw	r28, r18
 24c:	28 81       	ld	r18, Y
 24e:	22 b9       	out	0x02, r18	; 2
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	8a 16       	cp	r8, r26
 254:	9b 06       	cpc	r9, r27
 256:	40 f6       	brcc	.-112    	; 0x1e8 <stepperControl+0xac>
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
	}
	TCCR2B&=0b11111000; //disable timer 2
 258:	a1 eb       	ldi	r26, 0xB1	; 177
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	2c 91       	ld	r18, X
 25e:	28 7f       	andi	r18, 0xF8	; 248
 260:	2c 93       	st	X, r18
	*stepperIt=PORTAREGSet;
 262:	d5 01       	movw	r26, r10
 264:	ed 93       	st	X+, r30
 266:	fc 93       	st	X, r31
	//*stepperIt=stepperSigOrd[(CURRENT_ITERATION+DIRECTION*(i-1))%4]; //set value of current iteration to variable address
	*stepperPos += steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
 268:	e7 01       	movw	r28, r14
 26a:	28 81       	ld	r18, Y
 26c:	39 81       	ldd	r19, Y+1	; 0x01
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	68 ec       	ldi	r22, 0xC8	; 200
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	92 d4       	rcall	.+2340   	; 0xb9c <__divmodhi4>
 278:	99 83       	std	Y+1, r25	; 0x01
 27a:	88 83       	st	Y, r24
	return; //returns nothing
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	08 95       	ret

00000296 <stepperHome>:
void stepperHome(int *stepperPos, int *stepperIt){
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	8c 01       	movw	r16, r24
 2a4:	7b 01       	movw	r14, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
 2a6:	12 b8       	out	0x02, r1	; 2
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
	return; //returns nothing
}
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2ac:	10 c0       	rjmp	.+32     	; 0x2ce <stepperHome+0x38>
		PORTA = stepperSigOrd[i];
 2ae:	fe 01       	movw	r30, r28
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 81       	ld	r24, Z
 2ba:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 2bc:	8e e1       	ldi	r24, 0x1E	; 30
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	1c df       	rcall	.-456    	; 0xfa <mTimer2>
		i++;
 2c2:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2c4:	c4 30       	cpi	r28, 0x04	; 4
 2c6:	d1 05       	cpc	r29, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <stepperHome+0x38>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <HallEffect>
 2d2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <HallEffect+0x1>
 2d6:	89 2b       	or	r24, r25
 2d8:	51 f3       	breq	.-44     	; 0x2ae <stepperHome+0x18>
		mTimer2(delay);
		i++;
		if (i==4)i=0;
	}
	i--;
	HallEffect=0x00;
 2da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HallEffect+0x1>
 2de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <HallEffect>
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
 2e2:	ee 98       	cbi	0x1d, 6	; 29
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 2e4:	c4 30       	cpi	r28, 0x04	; 4
 2e6:	d1 05       	cpc	r29, r1
 2e8:	a9 f1       	breq	.+106    	; 0x354 <stepperHome+0xbe>
		if (i==-1)i=3;
 2ea:	cf 3f       	cpi	r28, 0xFF	; 255
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	d8 07       	cpc	r29, r24
 2f0:	41 f1       	breq	.+80     	; 0x342 <stepperHome+0xac>
		PORTA = stepperSigOrd[i];
 2f2:	fe 01       	movw	r30, r28
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e0 50       	subi	r30, 0x00	; 0
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 300:	8e e1       	ldi	r24, 0x1E	; 30
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fa de       	rcall	.-524    	; 0xfa <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 306:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 308:	c4 30       	cpi	r28, 0x04	; 4
 30a:	d1 05       	cpc	r29, r1
 30c:	39 f0       	breq	.+14     	; 0x31c <stepperHome+0x86>
		if (i==-1)i=3;
 30e:	cf 3f       	cpi	r28, 0xFF	; 255
 310:	ef ef       	ldi	r30, 0xFF	; 255
 312:	de 07       	cpc	r29, r30
 314:	29 f4       	brne	.+10     	; 0x320 <stepperHome+0x8a>
 316:	c3 e0       	ldi	r28, 0x03	; 3
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <stepperHome+0x8a>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 320:	fe 01       	movw	r30, r28
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 32e:	8e e1       	ldi	r24, 0x1E	; 30
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	e3 de       	rcall	.-570    	; 0xfa <mTimer2>
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
 334:	f7 01       	movw	r30, r14
 336:	d1 83       	std	Z+1, r29	; 0x01
 338:	c0 83       	st	Z, r28
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
 33a:	f8 01       	movw	r30, r16
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	10 82       	st	Z, r1
}
 340:	12 c0       	rjmp	.+36     	; 0x366 <stepperHome+0xd0>
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 342:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_start+0x6>
		mTimer2(delay);
 346:	82 b9       	out	0x02, r24	; 2
 348:	8e e1       	ldi	r24, 0x1E	; 30
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	d6 de       	rcall	.-596    	; 0xfa <mTimer2>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	e6 cf       	rjmp	.-52     	; 0x320 <stepperHome+0x8a>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		mTimer2(delay);
 358:	82 b9       	out	0x02, r24	; 2
 35a:	8e e1       	ldi	r24, 0x1E	; 30
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	cd de       	rcall	.-614    	; 0xfa <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 360:	c1 e0       	ldi	r28, 0x01	; 1
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	dd cf       	rjmp	.-70     	; 0x320 <stepperHome+0x8a>
		mTimer2(delay);
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	08 95       	ret

00000374 <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 374:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 376:	84 b5       	in	r24, 0x24	; 36
 378:	83 68       	ori	r24, 0x83	; 131
 37a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 37c:	85 b5       	in	r24, 0x25	; 37
 37e:	83 60       	ori	r24, 0x03	; 3
 380:	85 bd       	out	0x25, r24	; 37
	//TCCR0B &= 0b11111101;
	dutyCycle = motorDuty*2.55;
 382:	07 2e       	mov	r0, r23
 384:	00 0c       	add	r0, r0
 386:	88 0b       	sbc	r24, r24
 388:	99 0b       	sbc	r25, r25
 38a:	19 d3       	rcall	.+1586   	; 0x9be <__floatsisf>
 38c:	23 e3       	ldi	r18, 0x33	; 51
 38e:	33 e3       	ldi	r19, 0x33	; 51
 390:	43 e2       	ldi	r20, 0x23	; 35
 392:	50 e4       	ldi	r21, 0x40	; 64
 394:	78 d3       	rcall	.+1776   	; 0xa86 <__mulsf3>
 396:	e5 d2       	rcall	.+1482   	; 0x962 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 398:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	80 7f       	andi	r24, 0xF0	; 240
 39e:	85 b9       	out	0x05, r24	; 5
 3a0:	08 95       	ret

000003a2 <setupISR>:
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//Ex: rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//Ex: falling edge on INT2: EICRA |= _BV(ISC21);
	//see ISR routines for 
	EIMSK |=0b01011111; //initialize INT6,4:0
 3a2:	8d b3       	in	r24, 0x1d	; 29
 3a4:	8f 65       	ori	r24, 0x5F	; 95
 3a6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0b11101110; //rising edge triggers for INT1 (OI) and INT3 (OR); falling edge detection on INT2 (IN) and INT4 (EX)
 3a8:	e9 e6       	ldi	r30, 0x69	; 105
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8e 6e       	ori	r24, 0xEE	; 238
 3b0:	80 83       	st	Z, r24
	EICRB |= 0b00100010; //active low for INT6 and INT4
 3b2:	ea e6       	ldi	r30, 0x6A	; 106
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	82 62       	ori	r24, 0x22	; 34
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <setupADC>:
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 3be:	ea e7       	ldi	r30, 0x7A	; 122
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	8d 68       	ori	r24, 0x8D	; 141
 3c6:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 3c8:	ec e7       	ldi	r30, 0x7C	; 124
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	81 64       	ori	r24, 0x41	; 65
 3d0:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 3d2:	80 81       	ld	r24, Z
 3d4:	81 7e       	andi	r24, 0xE1	; 225
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 3da:	26 2f       	mov	r18, r22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 3e2:	43 70       	andi	r20, 0x03	; 3
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	42 17       	cp	r20, r18
 3e8:	53 07       	cpc	r21, r19
 3ea:	81 f0       	breq	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		PORTB &= 0b11110000; //apply Vcc Brake
 3ec:	45 b1       	in	r20, 0x05	; 5
 3ee:	40 7f       	andi	r20, 0xF0	; 240
 3f0:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 3f2:	45 b1       	in	r20, 0x05	; 5
 3f4:	20 95       	com	r18
 3f6:	30 95       	com	r19
 3f8:	23 70       	andi	r18, 0x03	; 3
 3fa:	33 27       	eor	r19, r19
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	24 2b       	or	r18, r20
 406:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 408:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 40c:	bc 01       	movw	r22, r24
 40e:	99 0f       	add	r25, r25
 410:	88 0b       	sbc	r24, r24
 412:	99 0b       	sbc	r25, r25
 414:	d4 d2       	rcall	.+1448   	; 0x9be <__floatsisf>
 416:	23 e3       	ldi	r18, 0x33	; 51
 418:	33 e3       	ldi	r19, 0x33	; 51
 41a:	43 e2       	ldi	r20, 0x23	; 35
 41c:	50 e4       	ldi	r21, 0x40	; 64
 41e:	33 d3       	rcall	.+1638   	; 0xa86 <__mulsf3>
 420:	a0 d2       	rcall	.+1344   	; 0x962 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 422:	67 bd       	out	0x27, r22	; 39
 424:	08 95       	ret

00000426 <main>:
//volatile unsigned int ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete
volatile unsigned int HallEffect; //becomes set during stepper homing to know position
unsigned int stepperSigOrd[4] = {0b00110110,0b00101110,0b00101101,0b00110101};

/* Main Routine */
int main(int argc, char *argv[]){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	c7 58       	subi	r28, 0x87	; 135
 430:	d1 40       	sbci	r29, 0x01	; 1
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 43c:	e1 e6       	ldi	r30, 0x61	; 97
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	80 83       	st	Z, r24
	CLKPR = 0;
 444:	10 82       	st	Z, r1
	/*User Variables*/
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 446:	1a 82       	std	Y+2, r1	; 0x02
 448:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
 44a:	1c 82       	std	Y+4, r1	; 0x04
 44c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t ST_Count = 0x00;
	uint8_t AL_Count = 0x00;
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
 44e:	fe 01       	movw	r30, r28
 450:	35 96       	adiw	r30, 0x05	; 5
 452:	80 e4       	ldi	r24, 0x40	; 64
 454:	df 01       	movw	r26, r30
 456:	1d 92       	st	X+, r1
 458:	8a 95       	dec	r24
 45a:	e9 f7       	brne	.-6      	; 0x456 <main+0x30>
		uint8_t inductive; //states whether object is ferrous or not (0=>non-ferrous;1=>ferrous)
		}material;
	//initialize array of structures for storage	
	struct material materialArray[64];
	/*initializations*/
	cli(); //disable interrupts
 45c:	f8 94       	cli
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
 45e:	88 e2       	ldi	r24, 0x28	; 40
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	88 df       	rcall	.-240    	; 0x374 <setupPWM>
	setupISR();
 464:	9e df       	rcall	.-196    	; 0x3a2 <setupISR>
	setupADC();
 466:	ab df       	rcall	.-170    	; 0x3be <setupADC>
	timer1Init();
 468:	35 de       	rcall	.-918    	; 0xd4 <timer1Init>
 46a:	44 de       	rcall	.-888    	; 0xf4 <timer2Init>
	timer2Init();
 46c:	64 de       	rcall	.-824    	; 0x136 <timer3Init>
 46e:	8f ef       	ldi	r24, 0xFF	; 255
	timer3Init();
 470:	81 b9       	out	0x01, r24	; 1
 472:	84 b9       	out	0x04, r24	; 4
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 474:	87 b9       	out	0x07, r24	; 7
 476:	80 ef       	ldi	r24, 0xF0	; 240
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 478:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF; //LEDs Debugging
 47a:	1d b8       	out	0x0d, r1	; 13
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 47c:	10 ba       	out	0x10, r1	; 16
 47e:	78 94       	sei
	DDRE = 0x00; /*PE4=HallEffect for stepper*/
 480:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <systemFlag+0x1>
	DDRF = 0x00; /*PF1=ADC1 pin*/	
	sei(); //enable interrupts
 484:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <systemFlag>
	// PORTB &= 0b1110000; //apply Vcc brake to motor
	//PORTB |=0b1000; //start motor in specified direction
	/*initialize flags and counters*/
	systemFlag=0x0000;
 488:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HallEffect+0x1>
 48c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <HallEffect>
	//opt1Flag=0x00;
	//opt2Flag=0x00;
	//inductiveFlag=0x00;
	//optExitFlag=0x00;
	//ADCResultFlag=0x00;	
	HallEffect=0x00; 
 490:	be 01       	movw	r22, r28
 492:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	fd de       	rcall	.-518    	; 0x296 <stepperHome>
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	88 e2       	ldi	r24, 0x28	; 40
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9b df       	rcall	.-202    	; 0x3da <motorControl>
 4a4:	31 2c       	mov	r3, r1
 4a6:	e1 2c       	mov	r14, r1
 4a8:	f1 2c       	mov	r15, r1
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
	uint8_t tempFerrous=0;
	uint8_t startMeasureFlag=0x00; //allows the ADC conversions to stop if no object is in front of RL sensor
 4aa:	c1 2c       	mov	r12, r1
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
	int EX_Count = 0x00; //count of objects that have hit optical sensor 3 (EX)
 4ac:	d1 2c       	mov	r13, r1
 4ae:	00 e0       	ldi	r16, 0x00	; 0
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
 4b0:	10 e0       	ldi	r17, 0x00	; 0
 4b2:	0f 2e       	mov	r0, r31
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
 4b4:	88 24       	eor	r8, r8
 4b6:	8a 94       	dec	r8
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
 4b8:	f3 e0       	ldi	r31, 0x03	; 3
 4ba:	9f 2e       	mov	r9, r31
 4bc:	f0 2d       	mov	r31, r0
 4be:	41 2c       	mov	r4, r1
 4c0:	51 2c       	mov	r5, r1
 4c2:	ca 57       	subi	r28, 0x7A	; 122
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
 4c4:	de 4f       	sbci	r29, 0xFE	; 254
 4c6:	19 82       	std	Y+1, r1	; 0x01
	/*User Variables*/
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
 4c8:	18 82       	st	Y, r1
 4ca:	c6 58       	subi	r28, 0x86	; 134
 4cc:	d1 40       	sbci	r29, 0x01	; 1
 4ce:	0f 2e       	mov	r0, r31
 4d0:	f1 e9       	ldi	r31, 0x91	; 145
 4d2:	6f 2e       	mov	r6, r31
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
 4d4:	71 2c       	mov	r7, r1
 4d6:	f0 2d       	mov	r31, r0
 4d8:	0f 2e       	mov	r0, r31
 4da:	fa e7       	ldi	r31, 0x7A	; 122
 4dc:	af 2e       	mov	r10, r31
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
			systemFlag&=0xFB; //reset flag
			OR_Count+=1;
			OREX_Count+=1;
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 4de:	b1 2c       	mov	r11, r1
 4e0:	f0 2d       	mov	r31, r0
 4e2:	cb 57       	subi	r28, 0x7B	; 123
 4e4:	de 4f       	sbci	r29, 0xFE	; 254
 4e6:	38 82       	st	Y, r3
				materialArray[RL_Count].reflectance=oldADCResult;//value of oldADCResult is now maximum possible reflectivity and is added to struct array
				tempFerrous=tempIndArray[RL_Count]; //store whether object was ferrous or non-ferrous
				tempIndArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
				materialArray[RL_Count].inductive=tempFerrous;//inductivity of material stored; 1 for inductive; 0 for non-ferrous
				if(tempFerrous){ //object is metal: aluminum (light), steel (dark)
					if (oldADCResult<AL_REFLECTIVITY) materialArray[RL_Count].type=150;//object is aluminium
 4e8:	c5 58       	subi	r28, 0x85	; 133
 4ea:	d1 40       	sbci	r29, 0x01	; 1
 4ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 4f0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
	//ADCResultFlag=0x00;	
	HallEffect=0x00; 
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if(systemFlag&0x01){ //triggered on a rising edge for an active low signal (i.e. when the object has just passed optical sensor 1)
 4f4:	80 ff       	sbrs	r24, 0
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <main+0xea>
 4f8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 4fc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xFE; //reset flag
 500:	8e 7f       	andi	r24, 0xFE	; 254
 502:	99 27       	eor	r25, r25
 504:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 508:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 50c:	0f 5f       	subi	r16, 0xFF	; 255
 50e:	1f 4f       	sbci	r17, 0xFF	; 255
 510:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
 514:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
 518:	81 ff       	sbrs	r24, 1
 51a:	73 c0       	rjmp	.+230    	; 0x602 <main+0x1dc>
 51c:	31 10       	cpse	r3, r1
 51e:	32 c0       	rjmp	.+100    	; 0x584 <main+0x15e>
 520:	01 15       	cp	r16, r1
			if (falseInductFlag==0x00){
 522:	11 05       	cpc	r17, r1
 524:	61 f0       	breq	.+24     	; 0x53e <main+0x118>
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
 526:	f8 01       	movw	r30, r16
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	85 e0       	ldi	r24, 0x05	; 5
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	8c 0f       	add	r24, r28
 530:	9d 1f       	adc	r25, r29
 532:	e8 0f       	add	r30, r24
 534:	f9 1f       	adc	r31, r25
 536:	40 80       	ld	r4, Z
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
 53c:	07 c0       	rjmp	.+14     	; 0x54c <main+0x126>
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
 53e:	25 96       	adiw	r28, 0x05	; 5
 540:	4f ac       	ldd	r4, Y+63	; 0x3f
 542:	25 97       	sbiw	r28, 0x05	; 5
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	25 96       	adiw	r28, 0x05	; 5
 548:	8f af       	std	Y+63, r24	; 0x3f
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
 54a:	25 97       	sbiw	r28, 0x05	; 5
 54c:	d3 01       	movw	r26, r6
 54e:	8c 91       	ld	r24, X
 550:	81 60       	ori	r24, 0x01	; 1
				tempOI_Count=OI_Count;
				falseInductFlag=0x01;
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
 552:	8c 93       	st	X, r24
 554:	e4 e9       	ldi	r30, 0x94	; 148
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	11 82       	std	Z+1, r1	; 0x01
				TCNT3=0x00; //set timer equal to zero
 55a:	10 82       	st	Z, r1
 55c:	c0 9b       	sbis	0x18, 0	; 24
 55e:	0a c0       	rjmp	.+20     	; 0x574 <main+0x14e>
 560:	c0 9a       	sbi	0x18, 0	; 24
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 562:	ca 57       	subi	r28, 0x7A	; 122
 564:	de 4f       	sbci	r29, 0xFE	; 254
 566:	19 83       	std	Y+1, r17	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 568:	08 83       	st	Y, r16
 56a:	c6 58       	subi	r28, 0x86	; 134
 56c:	d1 40       	sbci	r29, 0x01	; 1
 56e:	33 24       	eor	r3, r3
 570:	33 94       	inc	r3
 572:	08 c0       	rjmp	.+16     	; 0x584 <main+0x15e>
				falseInductFlag=0x01;
 574:	ca 57       	subi	r28, 0x7A	; 122
 576:	de 4f       	sbci	r29, 0xFE	; 254
 578:	19 83       	std	Y+1, r17	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 57a:	08 83       	st	Y, r16
 57c:	c6 58       	subi	r28, 0x86	; 134
 57e:	d1 40       	sbci	r29, 0x01	; 1
 580:	33 24       	eor	r3, r3
 582:	33 94       	inc	r3
 584:	c0 9b       	sbis	0x18, 0	; 24
				falseInductFlag=0x01;
 586:	3d c0       	rjmp	.+122    	; 0x602 <main+0x1dc>
 588:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
 58c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
 590:	8d 7f       	andi	r24, 0xFD	; 253
 592:	99 27       	eor	r25, r25
 594:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 598:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 59c:	d3 01       	movw	r26, r6
 59e:	8c 91       	ld	r24, X
 5a0:	88 7f       	andi	r24, 0xF8	; 248
				TCCR3B&=0b11111000; //disable timer 3
 5a2:	8c 93       	st	X, r24
 5a4:	ca 57       	subi	r28, 0x7A	; 122
 5a6:	de 4f       	sbci	r29, 0xFE	; 254
 5a8:	e8 81       	ld	r30, Y
				falseInductFlag=0x00; //reset flag
				if (tempOI_Count!=OI_Count){
 5aa:	f9 81       	ldd	r31, Y+1	; 0x01
 5ac:	c6 58       	subi	r28, 0x86	; 134
 5ae:	d1 40       	sbci	r29, 0x01	; 1
 5b0:	e0 17       	cp	r30, r16
 5b2:	f1 07       	cpc	r31, r17
 5b4:	29 f1       	breq	.+74     	; 0x600 <main+0x1da>
 5b6:	c8 01       	movw	r24, r16
 5b8:	02 97       	sbiw	r24, 0x02	; 2
 5ba:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
 5bc:	90 78       	andi	r25, 0x80	; 128
 5be:	99 23       	and	r25, r25
 5c0:	24 f4       	brge	.+8      	; 0x5ca <main+0x1a4>
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	80 6c       	ori	r24, 0xC0	; 192
 5c6:	9f 6f       	ori	r25, 0xFF	; 255
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	e5 e0       	ldi	r30, 0x05	; 5
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	ec 0f       	add	r30, r28
 5d0:	fd 1f       	adc	r31, r29
 5d2:	e8 0f       	add	r30, r24
 5d4:	f9 1f       	adc	r31, r25
 5d6:	40 82       	st	Z, r4
 5d8:	c8 01       	movw	r24, r16
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
 5de:	90 78       	andi	r25, 0x80	; 128
 5e0:	99 23       	and	r25, r25
 5e2:	24 f4       	brge	.+8      	; 0x5ec <main+0x1c6>
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	80 6c       	ori	r24, 0xC0	; 192
 5e8:	9f 6f       	ori	r25, 0xFF	; 255
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	e5 e0       	ldi	r30, 0x05	; 5
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	ec 0f       	add	r30, r28
 5f2:	fd 1f       	adc	r31, r29
 5f4:	e8 0f       	add	r30, r24
 5f6:	f9 1f       	adc	r31, r25
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	20 83       	st	Z, r18
 5fc:	31 2c       	mov	r3, r1
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <main+0x1dc>
 600:	31 2c       	mov	r3, r1
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
				falseInductFlag=0x00; //reset flag
 602:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 606:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
				}	
			}
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
 60a:	82 ff       	sbrs	r24, 2
 60c:	14 c0       	rjmp	.+40     	; 0x636 <main+0x210>
 60e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 612:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xFB; //reset flag
 616:	8b 7f       	andi	r24, 0xFB	; 251
 618:	99 27       	eor	r25, r25
 61a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 61e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 622:	d5 01       	movw	r26, r10
 624:	8c 91       	ld	r24, X
 626:	80 64       	ori	r24, 0x40	; 64
			OR_Count+=1;
			OREX_Count+=1;
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 628:	8c 93       	st	X, r24
 62a:	b1 e0       	ldi	r27, 0x01	; 1
 62c:	cb 57       	subi	r28, 0x7B	; 123
 62e:	de 4f       	sbci	r29, 0xFE	; 254
			startMeasureFlag=0x01;//allow ADC conversions to continue
 630:	b8 83       	st	Y, r27
 632:	c5 58       	subi	r28, 0x85	; 133
 634:	d1 40       	sbci	r29, 0x01	; 1
 636:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 63a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}
		if(systemFlag&0x08){ //object has hit sensor at end of conveyor
 63e:	83 ff       	sbrs	r24, 3
 640:	2e c0       	rjmp	.+92     	; 0x69e <main+0x278>
 642:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 646:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xF7; //reset flag
 64a:	87 7f       	andi	r24, 0xF7	; 247
 64c:	99 27       	eor	r25, r25
 64e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 652:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 656:	f7 01       	movw	r30, r14
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
			//corresponding positions (black=0;aluminum=50;white=100;steel=150)
			//if object type matches stepper location; do nothing...
			tempType=materialArray[EX_Count].type;
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	ee 0d       	add	r30, r14
 662:	ff 1d       	adc	r31, r15
 664:	85 e4       	ldi	r24, 0x45	; 69
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	8c 0f       	add	r24, r28
 66a:	9d 1f       	adc	r25, r29
 66c:	e8 0f       	add	r30, r24
 66e:	f9 1f       	adc	r31, r25
 670:	22 81       	ldd	r18, Z+2	; 0x02
 672:	33 81       	ldd	r19, Z+3	; 0x03
 674:	89 81       	ldd	r24, Y+1	; 0x01
			stepperMovement=stepperPosition-tempType;
			if (!stepperMovement){//if object type doesn't match stepper location; stop motor, move stepper, start motor
 676:	9a 81       	ldd	r25, Y+2	; 0x02
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	69 f4       	brne	.+26     	; 0x698 <main+0x272>
 67e:	85 b1       	in	r24, 0x05	; 5
 680:	80 7f       	andi	r24, 0xF0	; 240
 682:	85 b9       	out	0x05, r24	; 5
				PORTB &=0xF0; //Apply Vcc brake to motor
 684:	ae 01       	movw	r20, r28
 686:	4d 5f       	subi	r20, 0xFD	; 253
 688:	5f 4f       	sbci	r21, 0xFF	; 255
				//stepper rotation logic
				if (stepperMovement==150) stepperMovement=-50;
				else if (stepperMovement==-150) stepperMovement=50;
				else if (stepperMovement== 100) stepperMovement=-100; //counter-clockwise is more efficient for particular stepper
				stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
 68a:	be 01       	movw	r22, r28
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	53 dd       	rcall	.-1370   	; 0x13c <stepperControl>
 696:	2b 9a       	sbi	0x05, 3	; 5
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	e9 1a       	sub	r14, r25
				PORTB |=0b00001000; //start motor forwards
 69c:	f9 0a       	sbc	r15, r25
			if (tempType==0)BL_Count += 0x01;
			else if (tempType==50)ST_Count += 0x01;
			else if (tempType==100)WH_Count += 0x01;
			else if (tempType==150)AL_Count += 0x01;
			OREX_Count-=1;
			EX_Count+=1;
 69e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 6a2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}
		if((systemFlag&0x10) && (startMeasureFlag)){ //if an ADC conversion is complete
 6a6:	84 ff       	sbrs	r24, 4
 6a8:	94 c0       	rjmp	.+296    	; 0x7d2 <main+0x3ac>
 6aa:	cb 57       	subi	r28, 0x7B	; 123
 6ac:	de 4f       	sbci	r29, 0xFE	; 254
 6ae:	a8 81       	ld	r26, Y
 6b0:	c5 58       	subi	r28, 0x85	; 133
 6b2:	d1 40       	sbci	r29, 0x01	; 1
 6b4:	aa 23       	and	r26, r26
 6b6:	09 f4       	brne	.+2      	; 0x6ba <main+0x294>
 6b8:	8c c0       	rjmp	.+280    	; 0x7d2 <main+0x3ac>
 6ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 6be:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xEF; //reset flag to allow interrupt to be triggered right away if necessary
 6c2:	8f 7e       	andi	r24, 0xEF	; 239
 6c4:	99 27       	eor	r25, r25
 6c6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 6ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 6ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADCResult>
 6d2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADCResult+0x1>
			if(ADCResult<oldADCResult) oldADCResult=ADCResult; //reflectivity is increasing still (i.e. a lower ADC voltage is measured
 6d6:	88 15       	cp	r24, r8
 6d8:	99 05       	cpc	r25, r9
 6da:	28 f4       	brcc	.+10     	; 0x6e6 <main+0x2c0>
 6dc:	80 90 0d 01 	lds	r8, 0x010D	; 0x80010d <ADCResult>
 6e0:	90 90 0e 01 	lds	r9, 0x010E	; 0x80010e <ADCResult+0x1>
 6e4:	71 c0       	rjmp	.+226    	; 0x7c8 <main+0x3a2>
 6e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADCResult>
 6ea:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADCResult+0x1>
			else if(ADCResult>(oldADCResult+50)){ //reflectivities have been reducing and are 59(0x3B) lower than maximum reflectivity reached(buffer)
 6ee:	94 01       	movw	r18, r8
 6f0:	2e 5c       	subi	r18, 0xCE	; 206
 6f2:	3f 4f       	sbci	r19, 0xFF	; 255
 6f4:	28 17       	cp	r18, r24
 6f6:	39 07       	cpc	r19, r25
 6f8:	08 f0       	brcs	.+2      	; 0x6fc <main+0x2d6>
 6fa:	66 c0       	rjmp	.+204    	; 0x7c8 <main+0x3a2>
 6fc:	e5 e0       	ldi	r30, 0x05	; 5
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	ec 0f       	add	r30, r28
				materialArray[RL_Count].reflectance=oldADCResult;//value of oldADCResult is now maximum possible reflectivity and is added to struct array
				tempFerrous=tempIndArray[RL_Count]; //store whether object was ferrous or non-ferrous
 702:	fd 1f       	adc	r31, r29
 704:	ec 0d       	add	r30, r12
 706:	fd 1d       	adc	r31, r13
 708:	80 81       	ld	r24, Z
 70a:	10 82       	st	Z, r1
 70c:	88 23       	and	r24, r24
 70e:	41 f1       	breq	.+80     	; 0x760 <main+0x33a>
				tempIndArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
 710:	b8 ec       	ldi	r27, 0xC8	; 200
				materialArray[RL_Count].inductive=tempFerrous;//inductivity of material stored; 1 for inductive; 0 for non-ferrous
				if(tempFerrous){ //object is metal: aluminum (light), steel (dark)
 712:	8b 16       	cp	r8, r27
 714:	91 04       	cpc	r9, r1
					if (oldADCResult<AL_REFLECTIVITY) materialArray[RL_Count].type=150;//object is aluminium
 716:	90 f4       	brcc	.+36     	; 0x73c <main+0x316>
 718:	f6 01       	movw	r30, r12
 71a:	ee 0f       	add	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	ec 0d       	add	r30, r12
 724:	fd 1d       	adc	r31, r13
 726:	85 e4       	ldi	r24, 0x45	; 69
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	8c 0f       	add	r24, r28
 72c:	9d 1f       	adc	r25, r29
 72e:	e8 0f       	add	r30, r24
 730:	f9 1f       	adc	r31, r25
 732:	a6 e9       	ldi	r26, 0x96	; 150
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	b3 83       	std	Z+3, r27	; 0x03
 738:	a2 83       	std	Z+2, r26	; 0x02
 73a:	38 c0       	rjmp	.+112    	; 0x7ac <main+0x386>
 73c:	f6 01       	movw	r30, r12
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=50;//object is steel
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	ec 0d       	add	r30, r12
 748:	fd 1d       	adc	r31, r13
 74a:	85 e4       	ldi	r24, 0x45	; 69
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	8c 0f       	add	r24, r28
 750:	9d 1f       	adc	r25, r29
 752:	e8 0f       	add	r30, r24
 754:	f9 1f       	adc	r31, r25
 756:	a2 e3       	ldi	r26, 0x32	; 50
 758:	b0 e0       	ldi	r27, 0x00	; 0
 75a:	b3 83       	std	Z+3, r27	; 0x03
 75c:	a2 83       	std	Z+2, r26	; 0x02
 75e:	26 c0       	rjmp	.+76     	; 0x7ac <main+0x386>
 760:	b6 eb       	ldi	r27, 0xB6	; 182
 762:	8b 16       	cp	r8, r27
 764:	b3 e0       	ldi	r27, 0x03	; 3
					} else { //object is plastic: white (light), black (dark)
					if (oldADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
 766:	9b 06       	cpc	r9, r27
 768:	90 f4       	brcc	.+36     	; 0x78e <main+0x368>
 76a:	f6 01       	movw	r30, r12
 76c:	ee 0f       	add	r30, r30
 76e:	ff 1f       	adc	r31, r31
 770:	ee 0f       	add	r30, r30
 772:	ff 1f       	adc	r31, r31
 774:	ec 0d       	add	r30, r12
 776:	fd 1d       	adc	r31, r13
 778:	85 e4       	ldi	r24, 0x45	; 69
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	8c 0f       	add	r24, r28
 77e:	9d 1f       	adc	r25, r29
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	a4 e6       	ldi	r26, 0x64	; 100
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	b3 83       	std	Z+3, r27	; 0x03
 78a:	a2 83       	std	Z+2, r26	; 0x02
 78c:	0f c0       	rjmp	.+30     	; 0x7ac <main+0x386>
 78e:	f6 01       	movw	r30, r12
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=0;//object is black plastic
 794:	ee 0f       	add	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	ec 0d       	add	r30, r12
 79a:	fd 1d       	adc	r31, r13
 79c:	85 e4       	ldi	r24, 0x45	; 69
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	8c 0f       	add	r24, r28
 7a2:	9d 1f       	adc	r25, r29
 7a4:	e8 0f       	add	r30, r24
 7a6:	f9 1f       	adc	r31, r25
 7a8:	13 82       	std	Z+3, r1	; 0x03
 7aa:	12 82       	std	Z+2, r1	; 0x02
 7ac:	9f ef       	ldi	r25, 0xFF	; 255
 7ae:	c9 1a       	sub	r12, r25
 7b0:	d9 0a       	sbc	r13, r25
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
 7b2:	cb 57       	subi	r28, 0x7B	; 123
 7b4:	de 4f       	sbci	r29, 0xFE	; 254
 7b6:	18 82       	st	Y, r1
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
 7b8:	c5 58       	subi	r28, 0x85	; 133
 7ba:	d1 40       	sbci	r29, 0x01	; 1
 7bc:	88 24       	eor	r8, r8
 7be:	8a 94       	dec	r8
 7c0:	0f 2e       	mov	r0, r31
					} else { //object is plastic: white (light), black (dark)
					if (oldADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
					else materialArray[RL_Count].type=0;//object is black plastic
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
 7c2:	f3 e0       	ldi	r31, 0x03	; 3
 7c4:	9f 2e       	mov	r9, r31
 7c6:	f0 2d       	mov	r31, r0
 7c8:	d5 01       	movw	r26, r10
 7ca:	8c 91       	ld	r24, X
 7cc:	80 64       	ori	r24, 0x40	; 64
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
			}
			ADCSRA |= _BV(ADSC); //re-trigger ADC
 7ce:	8c 93       	st	X, r24
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <main+0x3c0>
 7d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 7d6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		} else systemFlag&=0xEF;
 7da:	8f 7e       	andi	r24, 0xEF	; 239
 7dc:	99 27       	eor	r25, r25
 7de:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 7e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 7e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 7ea:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		if (systemFlag&0x20){//if PAUSE Button is pressed
 7ee:	0f 73       	andi	r16, 0x3F	; 63
 7f0:	11 27       	eor	r17, r17
 7f2:	bf e3       	ldi	r27, 0x3F	; 63
			//print Black, White, Aluminium, and Steel Counts to screen and display how many objects are between optical sensor 2 and 3 (EX)
		}
		//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
		OI_Count &= 0b00111111;
 7f4:	cb 22       	and	r12, r27
 7f6:	dd 24       	eor	r13, r13
		RL_Count &= 0b00111111;
 7f8:	ef e3       	ldi	r30, 0x3F	; 63
 7fa:	ee 22       	and	r14, r30
 7fc:	ff 24       	eor	r15, r15
		OR_Count &= 0b00111111;
		EX_Count &= 0b00111111;
 7fe:	76 ce       	rjmp	.-788    	; 0x4ec <main+0xc6>

00000800 <__vector_1>:
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
	}
 804:	0f b6       	in	r0, 0x3f	; 63
	OCR0A = dutyCycle;//set duty cycle
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/
ISR(INT0_vect){ // on PD0; active low KILL SWITCH
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	8f 93       	push	r24
	PORTB &= 0b11110000; //stop motor by applying Vcc break
 80c:	85 b1       	in	r24, 0x05	; 5
 80e:	80 7f       	andi	r24, 0xF0	; 240
 810:	85 b9       	out	0x05, r24	; 5
}
 812:	8f 91       	pop	r24
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <__vector_2>:
/*sensor 1: OI: 1st Optical-Inductive-Near Inductive sensor*/
ISR(INT1_vect){ // on PD1; active low; triggered on rising-edge
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
	systemFlag|=0x01;//opt1Flag=0x01;
 82c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 830:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 834:	81 60       	ori	r24, 0x01	; 1
 836:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 83a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <__vector_3>:
/*sensor 2: IN: Inductive sensor*/
ISR(INT2_vect){ //on PD3; active low; triggered on falling-edge
 84c:	1f 92       	push	r1
 84e:	0f 92       	push	r0
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	0f 92       	push	r0
 854:	11 24       	eor	r1, r1
 856:	8f 93       	push	r24
 858:	9f 93       	push	r25
	systemFlag|=0x02;//inductiveFlag=0x01;
 85a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 85e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 862:	82 60       	ori	r24, 0x02	; 2
 864:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 868:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <__vector_4>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Reflective sensor*/
ISR(INT3_vect){ // on PD2; active high; triggered on rising-edge
 87a:	1f 92       	push	r1
 87c:	0f 92       	push	r0
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	0f 92       	push	r0
 882:	11 24       	eor	r1, r1
 884:	8f 93       	push	r24
 886:	9f 93       	push	r25
	systemFlag|=0x04;//opt2Flag=0x01;
 888:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 88c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 890:	84 60       	ori	r24, 0x04	; 4
 892:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 896:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	0f 90       	pop	r0
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	0f 90       	pop	r0
 8a4:	1f 90       	pop	r1
 8a6:	18 95       	reti

000008a8 <__vector_5>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT4_vect){ //on PE4; active low; triggered on falling-edge
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	8f 93       	push	r24
 8b4:	9f 93       	push	r25
	systemFlag|=0x08;//optExitFlag=0x01;
 8b6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 8ba:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 8be:	88 60       	ori	r24, 0x08	; 8
 8c0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 8c4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	0f 90       	pop	r0
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	0f 90       	pop	r0
 8d2:	1f 90       	pop	r1
 8d4:	18 95       	reti

000008d6 <__vector_29>:
/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	2f 93       	push	r18
 8e2:	3f 93       	push	r19
 8e4:	8f 93       	push	r24
 8e6:	9f 93       	push	r25
	ADCResult = ADCL;
 8e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADCResult+0x1>
 8f2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADCResult>
	ADCResult += ADCH << 8;
 8f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8fa:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ADCResult>
 8fe:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ADCResult+0x1>
 902:	89 2f       	mov	r24, r25
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	98 2f       	mov	r25, r24
 908:	88 27       	eor	r24, r24
 90a:	82 0f       	add	r24, r18
 90c:	93 1f       	adc	r25, r19
 90e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADCResult+0x1>
 912:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADCResult>
	systemFlag|=0x10;//ADCResultFlag = 1;
 916:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 91a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 91e:	80 61       	ori	r24, 0x10	; 16
 920:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 924:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__vector_7>:
/*sensor 6: HE: Hall Effect sensor; used for homing stepper*/
ISR(INT6_vect){ //on PE6; Active low for hall effect sensor 
 93a:	1f 92       	push	r1
 93c:	0f 92       	push	r0
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	0f 92       	push	r0
 942:	11 24       	eor	r1, r1
 944:	8f 93       	push	r24
 946:	9f 93       	push	r25
	HallEffect=0x01;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <HallEffect+0x1>
 950:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <HallEffect>
}
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__fixunssfsi>:
 962:	70 d0       	rcall	.+224    	; 0xa44 <__fp_splitA>
 964:	88 f0       	brcs	.+34     	; 0x988 <__fixunssfsi+0x26>
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	90 f0       	brcs	.+36     	; 0x98e <__fixunssfsi+0x2c>
 96a:	b9 2f       	mov	r27, r25
 96c:	99 27       	eor	r25, r25
 96e:	b7 51       	subi	r27, 0x17	; 23
 970:	a0 f0       	brcs	.+40     	; 0x99a <__fixunssfsi+0x38>
 972:	d1 f0       	breq	.+52     	; 0x9a8 <__fixunssfsi+0x46>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a f0       	brmi	.+6      	; 0x984 <__fixunssfsi+0x22>
 97e:	ba 95       	dec	r27
 980:	c9 f7       	brne	.-14     	; 0x974 <__fixunssfsi+0x12>
 982:	12 c0       	rjmp	.+36     	; 0x9a8 <__fixunssfsi+0x46>
 984:	b1 30       	cpi	r27, 0x01	; 1
 986:	81 f0       	breq	.+32     	; 0x9a8 <__fixunssfsi+0x46>
 988:	77 d0       	rcall	.+238    	; 0xa78 <__fp_zero>
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	08 95       	ret
 98e:	74 c0       	rjmp	.+232    	; 0xa78 <__fp_zero>
 990:	67 2f       	mov	r22, r23
 992:	78 2f       	mov	r23, r24
 994:	88 27       	eor	r24, r24
 996:	b8 5f       	subi	r27, 0xF8	; 248
 998:	39 f0       	breq	.+14     	; 0x9a8 <__fixunssfsi+0x46>
 99a:	b9 3f       	cpi	r27, 0xF9	; 249
 99c:	cc f3       	brlt	.-14     	; 0x990 <__fixunssfsi+0x2e>
 99e:	86 95       	lsr	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b3 95       	inc	r27
 9a6:	d9 f7       	brne	.-10     	; 0x99e <__fixunssfsi+0x3c>
 9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__fixunssfsi+0x56>
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__floatunsisf>:
 9ba:	e8 94       	clt
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__floatsisf+0x12>

000009be <__floatsisf>:
 9be:	97 fb       	bst	r25, 7
 9c0:	3e f4       	brtc	.+14     	; 0x9d0 <__floatsisf+0x12>
 9c2:	90 95       	com	r25
 9c4:	80 95       	com	r24
 9c6:	70 95       	com	r23
 9c8:	61 95       	neg	r22
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	99 23       	and	r25, r25
 9d2:	a9 f0       	breq	.+42     	; 0x9fe <__floatsisf+0x40>
 9d4:	f9 2f       	mov	r31, r25
 9d6:	96 e9       	ldi	r25, 0x96	; 150
 9d8:	bb 27       	eor	r27, r27
 9da:	93 95       	inc	r25
 9dc:	f6 95       	lsr	r31
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f1 11       	cpse	r31, r1
 9e8:	f8 cf       	rjmp	.-16     	; 0x9da <__floatsisf+0x1c>
 9ea:	fa f4       	brpl	.+62     	; 0xa2a <__floatsisf+0x6c>
 9ec:	bb 0f       	add	r27, r27
 9ee:	11 f4       	brne	.+4      	; 0x9f4 <__floatsisf+0x36>
 9f0:	60 ff       	sbrs	r22, 0
 9f2:	1b c0       	rjmp	.+54     	; 0xa2a <__floatsisf+0x6c>
 9f4:	6f 5f       	subi	r22, 0xFF	; 255
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	16 c0       	rjmp	.+44     	; 0xa2a <__floatsisf+0x6c>
 9fe:	88 23       	and	r24, r24
 a00:	11 f0       	breq	.+4      	; 0xa06 <__floatsisf+0x48>
 a02:	96 e9       	ldi	r25, 0x96	; 150
 a04:	11 c0       	rjmp	.+34     	; 0xa28 <__floatsisf+0x6a>
 a06:	77 23       	and	r23, r23
 a08:	21 f0       	breq	.+8      	; 0xa12 <__floatsisf+0x54>
 a0a:	9e e8       	ldi	r25, 0x8E	; 142
 a0c:	87 2f       	mov	r24, r23
 a0e:	76 2f       	mov	r23, r22
 a10:	05 c0       	rjmp	.+10     	; 0xa1c <__floatsisf+0x5e>
 a12:	66 23       	and	r22, r22
 a14:	71 f0       	breq	.+28     	; 0xa32 <__floatsisf+0x74>
 a16:	96 e8       	ldi	r25, 0x86	; 134
 a18:	86 2f       	mov	r24, r22
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	60 e0       	ldi	r22, 0x00	; 0
 a1e:	2a f0       	brmi	.+10     	; 0xa2a <__floatsisf+0x6c>
 a20:	9a 95       	dec	r25
 a22:	66 0f       	add	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	da f7       	brpl	.-10     	; 0xa20 <__floatsisf+0x62>
 a2a:	88 0f       	add	r24, r24
 a2c:	96 95       	lsr	r25
 a2e:	87 95       	ror	r24
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__fp_split3>:
 a34:	57 fd       	sbrc	r21, 7
 a36:	90 58       	subi	r25, 0x80	; 128
 a38:	44 0f       	add	r20, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	59 f0       	breq	.+22     	; 0xa54 <__fp_splitA+0x10>
 a3e:	5f 3f       	cpi	r21, 0xFF	; 255
 a40:	71 f0       	breq	.+28     	; 0xa5e <__fp_splitA+0x1a>
 a42:	47 95       	ror	r20

00000a44 <__fp_splitA>:
 a44:	88 0f       	add	r24, r24
 a46:	97 fb       	bst	r25, 7
 a48:	99 1f       	adc	r25, r25
 a4a:	61 f0       	breq	.+24     	; 0xa64 <__fp_splitA+0x20>
 a4c:	9f 3f       	cpi	r25, 0xFF	; 255
 a4e:	79 f0       	breq	.+30     	; 0xa6e <__fp_splitA+0x2a>
 a50:	87 95       	ror	r24
 a52:	08 95       	ret
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	14 06       	cpc	r1, r20
 a5a:	55 1f       	adc	r21, r21
 a5c:	f2 cf       	rjmp	.-28     	; 0xa42 <__fp_split3+0xe>
 a5e:	46 95       	lsr	r20
 a60:	f1 df       	rcall	.-30     	; 0xa44 <__fp_splitA>
 a62:	08 c0       	rjmp	.+16     	; 0xa74 <__fp_splitA+0x30>
 a64:	16 16       	cp	r1, r22
 a66:	17 06       	cpc	r1, r23
 a68:	18 06       	cpc	r1, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	f1 cf       	rjmp	.-30     	; 0xa50 <__fp_splitA+0xc>
 a6e:	86 95       	lsr	r24
 a70:	71 05       	cpc	r23, r1
 a72:	61 05       	cpc	r22, r1
 a74:	08 94       	sec
 a76:	08 95       	ret

00000a78 <__fp_zero>:
 a78:	e8 94       	clt

00000a7a <__fp_szero>:
 a7a:	bb 27       	eor	r27, r27
 a7c:	66 27       	eor	r22, r22
 a7e:	77 27       	eor	r23, r23
 a80:	cb 01       	movw	r24, r22
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__mulsf3>:
 a86:	0b d0       	rcall	.+22     	; 0xa9e <__mulsf3x>
 a88:	78 c0       	rjmp	.+240    	; 0xb7a <__fp_round>
 a8a:	69 d0       	rcall	.+210    	; 0xb5e <__fp_pscA>
 a8c:	28 f0       	brcs	.+10     	; 0xa98 <__mulsf3+0x12>
 a8e:	6e d0       	rcall	.+220    	; 0xb6c <__fp_pscB>
 a90:	18 f0       	brcs	.+6      	; 0xa98 <__mulsf3+0x12>
 a92:	95 23       	and	r25, r21
 a94:	09 f0       	breq	.+2      	; 0xa98 <__mulsf3+0x12>
 a96:	5a c0       	rjmp	.+180    	; 0xb4c <__fp_inf>
 a98:	5f c0       	rjmp	.+190    	; 0xb58 <__fp_nan>
 a9a:	11 24       	eor	r1, r1
 a9c:	ee cf       	rjmp	.-36     	; 0xa7a <__fp_szero>

00000a9e <__mulsf3x>:
 a9e:	ca df       	rcall	.-108    	; 0xa34 <__fp_split3>
 aa0:	a0 f3       	brcs	.-24     	; 0xa8a <__mulsf3+0x4>

00000aa2 <__mulsf3_pse>:
 aa2:	95 9f       	mul	r25, r21
 aa4:	d1 f3       	breq	.-12     	; 0xa9a <__mulsf3+0x14>
 aa6:	95 0f       	add	r25, r21
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	55 1f       	adc	r21, r21
 aac:	62 9f       	mul	r22, r18
 aae:	f0 01       	movw	r30, r0
 ab0:	72 9f       	mul	r23, r18
 ab2:	bb 27       	eor	r27, r27
 ab4:	f0 0d       	add	r31, r0
 ab6:	b1 1d       	adc	r27, r1
 ab8:	63 9f       	mul	r22, r19
 aba:	aa 27       	eor	r26, r26
 abc:	f0 0d       	add	r31, r0
 abe:	b1 1d       	adc	r27, r1
 ac0:	aa 1f       	adc	r26, r26
 ac2:	64 9f       	mul	r22, r20
 ac4:	66 27       	eor	r22, r22
 ac6:	b0 0d       	add	r27, r0
 ac8:	a1 1d       	adc	r26, r1
 aca:	66 1f       	adc	r22, r22
 acc:	82 9f       	mul	r24, r18
 ace:	22 27       	eor	r18, r18
 ad0:	b0 0d       	add	r27, r0
 ad2:	a1 1d       	adc	r26, r1
 ad4:	62 1f       	adc	r22, r18
 ad6:	73 9f       	mul	r23, r19
 ad8:	b0 0d       	add	r27, r0
 ada:	a1 1d       	adc	r26, r1
 adc:	62 1f       	adc	r22, r18
 ade:	83 9f       	mul	r24, r19
 ae0:	a0 0d       	add	r26, r0
 ae2:	61 1d       	adc	r22, r1
 ae4:	22 1f       	adc	r18, r18
 ae6:	74 9f       	mul	r23, r20
 ae8:	33 27       	eor	r19, r19
 aea:	a0 0d       	add	r26, r0
 aec:	61 1d       	adc	r22, r1
 aee:	23 1f       	adc	r18, r19
 af0:	84 9f       	mul	r24, r20
 af2:	60 0d       	add	r22, r0
 af4:	21 1d       	adc	r18, r1
 af6:	82 2f       	mov	r24, r18
 af8:	76 2f       	mov	r23, r22
 afa:	6a 2f       	mov	r22, r26
 afc:	11 24       	eor	r1, r1
 afe:	9f 57       	subi	r25, 0x7F	; 127
 b00:	50 40       	sbci	r21, 0x00	; 0
 b02:	8a f0       	brmi	.+34     	; 0xb26 <__mulsf3_pse+0x84>
 b04:	e1 f0       	breq	.+56     	; 0xb3e <__mulsf3_pse+0x9c>
 b06:	88 23       	and	r24, r24
 b08:	4a f0       	brmi	.+18     	; 0xb1c <__mulsf3_pse+0x7a>
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	bb 1f       	adc	r27, r27
 b10:	66 1f       	adc	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	91 50       	subi	r25, 0x01	; 1
 b18:	50 40       	sbci	r21, 0x00	; 0
 b1a:	a9 f7       	brne	.-22     	; 0xb06 <__mulsf3_pse+0x64>
 b1c:	9e 3f       	cpi	r25, 0xFE	; 254
 b1e:	51 05       	cpc	r21, r1
 b20:	70 f0       	brcs	.+28     	; 0xb3e <__mulsf3_pse+0x9c>
 b22:	14 c0       	rjmp	.+40     	; 0xb4c <__fp_inf>
 b24:	aa cf       	rjmp	.-172    	; 0xa7a <__fp_szero>
 b26:	5f 3f       	cpi	r21, 0xFF	; 255
 b28:	ec f3       	brlt	.-6      	; 0xb24 <__mulsf3_pse+0x82>
 b2a:	98 3e       	cpi	r25, 0xE8	; 232
 b2c:	dc f3       	brlt	.-10     	; 0xb24 <__mulsf3_pse+0x82>
 b2e:	86 95       	lsr	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b7 95       	ror	r27
 b36:	f7 95       	ror	r31
 b38:	e7 95       	ror	r30
 b3a:	9f 5f       	subi	r25, 0xFF	; 255
 b3c:	c1 f7       	brne	.-16     	; 0xb2e <__mulsf3_pse+0x8c>
 b3e:	fe 2b       	or	r31, r30
 b40:	88 0f       	add	r24, r24
 b42:	91 1d       	adc	r25, r1
 b44:	96 95       	lsr	r25
 b46:	87 95       	ror	r24
 b48:	97 f9       	bld	r25, 7
 b4a:	08 95       	ret

00000b4c <__fp_inf>:
 b4c:	97 f9       	bld	r25, 7
 b4e:	9f 67       	ori	r25, 0x7F	; 127
 b50:	80 e8       	ldi	r24, 0x80	; 128
 b52:	70 e0       	ldi	r23, 0x00	; 0
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	08 95       	ret

00000b58 <__fp_nan>:
 b58:	9f ef       	ldi	r25, 0xFF	; 255
 b5a:	80 ec       	ldi	r24, 0xC0	; 192
 b5c:	08 95       	ret

00000b5e <__fp_pscA>:
 b5e:	00 24       	eor	r0, r0
 b60:	0a 94       	dec	r0
 b62:	16 16       	cp	r1, r22
 b64:	17 06       	cpc	r1, r23
 b66:	18 06       	cpc	r1, r24
 b68:	09 06       	cpc	r0, r25
 b6a:	08 95       	ret

00000b6c <__fp_pscB>:
 b6c:	00 24       	eor	r0, r0
 b6e:	0a 94       	dec	r0
 b70:	12 16       	cp	r1, r18
 b72:	13 06       	cpc	r1, r19
 b74:	14 06       	cpc	r1, r20
 b76:	05 06       	cpc	r0, r21
 b78:	08 95       	ret

00000b7a <__fp_round>:
 b7a:	09 2e       	mov	r0, r25
 b7c:	03 94       	inc	r0
 b7e:	00 0c       	add	r0, r0
 b80:	11 f4       	brne	.+4      	; 0xb86 <__fp_round+0xc>
 b82:	88 23       	and	r24, r24
 b84:	52 f0       	brmi	.+20     	; 0xb9a <__fp_round+0x20>
 b86:	bb 0f       	add	r27, r27
 b88:	40 f4       	brcc	.+16     	; 0xb9a <__fp_round+0x20>
 b8a:	bf 2b       	or	r27, r31
 b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0x18>
 b8e:	60 ff       	sbrs	r22, 0
 b90:	04 c0       	rjmp	.+8      	; 0xb9a <__fp_round+0x20>
 b92:	6f 5f       	subi	r22, 0xFF	; 255
 b94:	7f 4f       	sbci	r23, 0xFF	; 255
 b96:	8f 4f       	sbci	r24, 0xFF	; 255
 b98:	9f 4f       	sbci	r25, 0xFF	; 255
 b9a:	08 95       	ret

00000b9c <__divmodhi4>:
 b9c:	97 fb       	bst	r25, 7
 b9e:	07 2e       	mov	r0, r23
 ba0:	16 f4       	brtc	.+4      	; 0xba6 <__divmodhi4+0xa>
 ba2:	00 94       	com	r0
 ba4:	06 d0       	rcall	.+12     	; 0xbb2 <__divmodhi4_neg1>
 ba6:	77 fd       	sbrc	r23, 7
 ba8:	08 d0       	rcall	.+16     	; 0xbba <__divmodhi4_neg2>
 baa:	0b d0       	rcall	.+22     	; 0xbc2 <__udivmodhi4>
 bac:	07 fc       	sbrc	r0, 7
 bae:	05 d0       	rcall	.+10     	; 0xbba <__divmodhi4_neg2>
 bb0:	3e f4       	brtc	.+14     	; 0xbc0 <__divmodhi4_exit>

00000bb2 <__divmodhi4_neg1>:
 bb2:	90 95       	com	r25
 bb4:	81 95       	neg	r24
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	08 95       	ret

00000bba <__divmodhi4_neg2>:
 bba:	70 95       	com	r23
 bbc:	61 95       	neg	r22
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc0 <__divmodhi4_exit>:
 bc0:	08 95       	ret

00000bc2 <__udivmodhi4>:
 bc2:	aa 1b       	sub	r26, r26
 bc4:	bb 1b       	sub	r27, r27
 bc6:	51 e1       	ldi	r21, 0x11	; 17
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <__udivmodhi4_ep>

00000bca <__udivmodhi4_loop>:
 bca:	aa 1f       	adc	r26, r26
 bcc:	bb 1f       	adc	r27, r27
 bce:	a6 17       	cp	r26, r22
 bd0:	b7 07       	cpc	r27, r23
 bd2:	10 f0       	brcs	.+4      	; 0xbd8 <__udivmodhi4_ep>
 bd4:	a6 1b       	sub	r26, r22
 bd6:	b7 0b       	sbc	r27, r23

00000bd8 <__udivmodhi4_ep>:
 bd8:	88 1f       	adc	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	5a 95       	dec	r21
 bde:	a9 f7       	brne	.-22     	; 0xbca <__udivmodhi4_loop>
 be0:	80 95       	com	r24
 be2:	90 95       	com	r25
 be4:	bc 01       	movw	r22, r24
 be6:	cd 01       	movw	r24, r26
 be8:	08 95       	ret

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
