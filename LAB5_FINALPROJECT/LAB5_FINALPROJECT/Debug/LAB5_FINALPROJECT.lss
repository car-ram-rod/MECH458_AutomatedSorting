
LAB5_FINALPROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  00000d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e0  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d80  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a30  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000825  00000000  00000000  00003c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be2  00000000  00000000  00004491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	50 c4       	rjmp	.+2208   	; 0x8a6 <__vector_1>
   6:	00 00       	nop
   8:	5d c4       	rjmp	.+2234   	; 0x8c4 <__vector_2>
   a:	00 00       	nop
   c:	72 c4       	rjmp	.+2276   	; 0x8f2 <__vector_3>
   e:	00 00       	nop
  10:	87 c4       	rjmp	.+2318   	; 0x920 <__vector_4>
  12:	00 00       	nop
  14:	9c c4       	rjmp	.+2360   	; 0x94e <__vector_5>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	e1 c4       	rjmp	.+2498   	; 0x9e0 <__vector_7>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	83 c4       	rjmp	.+2310   	; 0x97c <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e4 e9       	ldi	r30, 0x94	; 148
  ac:	fc e0       	ldi	r31, 0x0C	; 12
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	af 30       	cpi	r26, 0x0F	; 15
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	ab d1       	rcall	.+854    	; 0x426 <main>
  d0:	df c5       	rjmp	.+3006   	; 0xc90 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <timer1Init>:
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
  de:	88 ee       	ldi	r24, 0xE8	; 232
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f2:	08 95       	ret

000000f4 <timer2Init>:
/*at a clock frequency of 8MHz this is a 1.024ms timer for each while loop cycle*/
/*e.g. (32/8MHz)x(0xFF=256)=0.001024s=1.024ms*/
void timer2Init(void){ //clock is turned on during interval of use and then off when unused
	//sei(); enables all interrupts thus following is unneccessary 
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
  f4:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  f8:	08 95       	ret

000000fa <mTimer2>:
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  fa:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
  fc:	e1 eb       	ldi	r30, 0xB1	; 177
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	93 60       	ori	r25, 0x03	; 3
 104:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
 106:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 10a:	b8 99       	sbic	0x17, 0	; 23
 10c:	b8 9a       	sbi	0x17, 0	; 23
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	05 c0       	rjmp	.+10     	; 0x11e <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 114:	b8 9b       	sbis	0x17, 0	; 23
 116:	fe cf       	rjmp	.-4      	; 0x114 <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 118:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 11e:	24 17       	cp	r18, r20
 120:	35 07       	cpc	r19, r21
 122:	1c f4       	brge	.+6      	; 0x12a <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 124:	b8 9b       	sbis	0x17, 0	; 23
 126:	f6 cf       	rjmp	.-20     	; 0x114 <mTimer2+0x1a>
 128:	f7 cf       	rjmp	.-18     	; 0x118 <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 12a:	e1 eb       	ldi	r30, 0xB1	; 177
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 7f       	andi	r24, 0xF8	; 248
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <timer3Init>:
}
void timer3Init(void){ //clock is turned on during interval of use and then off when unused
	TCCR3A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV3 flag
 136:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 13a:	08 95       	ret

0000013c <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
 13c:	8f 92       	push	r8
 13e:	9f 92       	push	r9
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	7b 01       	movw	r14, r22
 156:	5a 01       	movw	r10, r20
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
 158:	da 01       	movw	r26, r20
 15a:	ed 91       	ld	r30, X+
 15c:	fc 91       	ld	r31, X
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
 15e:	9c 01       	movw	r18, r24
 160:	99 23       	and	r25, r25
 162:	24 f4       	brge	.+8      	; 0x16c <stepperControl+0x30>
 164:	22 27       	eor	r18, r18
 166:	33 27       	eor	r19, r19
 168:	28 1b       	sub	r18, r24
 16a:	39 0b       	sbc	r19, r25
 16c:	49 01       	movw	r8, r18
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
 16e:	20 31       	cpi	r18, 0x10	; 16
 170:	31 05       	cpc	r19, r1
 172:	38 f4       	brcc	.+14     	; 0x182 <stepperControl+0x46>
		minDelay=maxDelay-absSteps/2;
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	02 2f       	mov	r16, r18
 17a:	3f e0       	ldi	r19, 0x0F	; 15
 17c:	53 2f       	mov	r21, r19
 17e:	52 1b       	sub	r21, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <stepperControl+0x4a>
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
 182:	08 e0       	ldi	r16, 0x08	; 8
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
 184:	57 e0       	ldi	r21, 0x07	; 7
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
 186:	99 23       	and	r25, r25
 188:	24 f4       	brge	.+8      	; 0x192 <stepperControl+0x56>
 18a:	cc 24       	eor	r12, r12
 18c:	ca 94       	dec	r12
 18e:	dc 2c       	mov	r13, r12
 190:	03 c0       	rjmp	.+6      	; 0x198 <stepperControl+0x5c>
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
 192:	cc 24       	eor	r12, r12
 194:	c3 94       	inc	r12
 196:	d1 2c       	mov	r13, r1
	//determine direction 
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
 198:	ec 0d       	add	r30, r12
 19a:	fd 1d       	adc	r31, r13
	if(PORTAREGSet==4)PORTAREGSet=0;
 19c:	e4 30       	cpi	r30, 0x04	; 4
 19e:	f1 05       	cpc	r31, r1
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <stepperControl+0x74>
	if(PORTAREGSet==-1)PORTAREGSet=3;
 1a2:	ef 3f       	cpi	r30, 0xFF	; 255
 1a4:	cf ef       	ldi	r28, 0xFF	; 255
 1a6:	fc 07       	cpc	r31, r28
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <stepperControl+0x78>
 1aa:	e3 e0       	ldi	r30, 0x03	; 3
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <stepperControl+0x78>
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise	
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
	if(PORTAREGSet==4)PORTAREGSet=0;
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 1b4:	a1 eb       	ldi	r26, 0xB1	; 177
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	2c 91       	ld	r18, X
 1ba:	23 60       	ori	r18, 0x03	; 3
 1bc:	2c 93       	st	X, r18
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
 1be:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
 1c2:	b8 99       	sbic	0x17, 0	; 23
 1c4:	b8 9a       	sbi	0x17, 0	; 23
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
 1c6:	df 01       	movw	r26, r30
 1c8:	aa 0f       	add	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	a0 50       	subi	r26, 0x00	; 0
 1ce:	bf 4f       	sbci	r27, 0xFF	; 255
 1d0:	2c 91       	ld	r18, X
 1d2:	22 b9       	out	0x02, r18	; 2
	for(i=2;i<=absSteps;i++){	
 1d4:	d2 e0       	ldi	r29, 0x02	; 2
 1d6:	8d 16       	cp	r8, r29
 1d8:	91 04       	cpc	r9, r1
 1da:	f0 f1       	brcs	.+124    	; 0x258 <stepperControl+0x11c>
 1dc:	4f e0       	ldi	r20, 0x0F	; 15
 1de:	a2 e0       	ldi	r26, 0x02	; 2
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	94 01       	movw	r18, r8
 1ea:	2a 1b       	sub	r18, r26
 1ec:	3b 0b       	sbc	r19, r27
 1ee:	02 17       	cp	r16, r18
 1f0:	13 07       	cpc	r17, r19
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <stepperControl+0xc0>
			if(delay>minDelay)delay -= 1;
 1f4:	54 17       	cp	r21, r20
 1f6:	30 f4       	brcc	.+12     	; 0x204 <stepperControl+0xc8>
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	07 c0       	rjmp	.+14     	; 0x20a <stepperControl+0xce>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
 1fc:	4f 30       	cpi	r20, 0x0F	; 15
 1fe:	20 f4       	brcc	.+8      	; 0x208 <stepperControl+0xcc>
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	03 c0       	rjmp	.+6      	; 0x20a <stepperControl+0xce>
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
 204:	45 2f       	mov	r20, r21
 206:	01 c0       	rjmp	.+2      	; 0x20a <stepperControl+0xce>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
 208:	4f e0       	ldi	r20, 0x0F	; 15
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
 20a:	ec 0d       	add	r30, r12
 20c:	fd 1d       	adc	r31, r13
		if(PORTAREGSet==4)PORTAREGSet=0;
 20e:	e4 30       	cpi	r30, 0x04	; 4
 210:	f1 05       	cpc	r31, r1
 212:	39 f0       	breq	.+14     	; 0x222 <stepperControl+0xe6>
		if(PORTAREGSet==-1)PORTAREGSet=3;
 214:	ef 3f       	cpi	r30, 0xFF	; 255
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	f2 07       	cpc	r31, r18
 21a:	29 f4       	brne	.+10     	; 0x226 <stepperControl+0xea>
 21c:	e3 e0       	ldi	r30, 0x03	; 3
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <stepperControl+0xea>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	64 2f       	mov	r22, r20
 228:	70 e0       	ldi	r23, 0x00	; 0
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
		while (k<delay){ //iterate through given count
 22e:	05 c0       	rjmp	.+10     	; 0x23a <stepperControl+0xfe>
			if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 230:	b8 9b       	sbis	0x17, 0	; 23
 232:	03 c0       	rjmp	.+6      	; 0x23a <stepperControl+0xfe>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
 234:	b8 9a       	sbi	0x17, 0	; 23
				k+=1;
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<delay){ //iterate through given count
 23a:	26 17       	cp	r18, r22
 23c:	37 07       	cpc	r19, r23
 23e:	c1 f7       	brne	.-16     	; 0x230 <stepperControl+0xf4>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
				k+=1;
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
 240:	9f 01       	movw	r18, r30
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	20 50       	subi	r18, 0x00	; 0
 248:	3f 4f       	sbci	r19, 0xFF	; 255
 24a:	e9 01       	movw	r28, r18
 24c:	28 81       	ld	r18, Y
 24e:	22 b9       	out	0x02, r18	; 2
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
 250:	11 96       	adiw	r26, 0x01	; 1
 252:	8a 16       	cp	r8, r26
 254:	9b 06       	cpc	r9, r27
 256:	40 f6       	brcc	.-112    	; 0x1e8 <stepperControl+0xac>
				//equivalent; TIFR2 |= _BV(TOV2)
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
	}
	TCCR2B&=0b11111000; //disable timer 2
 258:	a1 eb       	ldi	r26, 0xB1	; 177
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	2c 91       	ld	r18, X
 25e:	28 7f       	andi	r18, 0xF8	; 248
 260:	2c 93       	st	X, r18
	*stepperIt=PORTAREGSet;
 262:	d5 01       	movw	r26, r10
 264:	ed 93       	st	X+, r30
 266:	fc 93       	st	X, r31
	//*stepperIt=stepperSigOrd[(CURRENT_ITERATION+DIRECTION*(i-1))%4]; //set value of current iteration to variable address
	*stepperPos += steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
 268:	e7 01       	movw	r28, r14
 26a:	28 81       	ld	r18, Y
 26c:	39 81       	ldd	r19, Y+1	; 0x01
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	68 ec       	ldi	r22, 0xC8	; 200
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	e5 d4       	rcall	.+2506   	; 0xc42 <__divmodhi4>
 278:	99 83       	std	Y+1, r25	; 0x01
 27a:	88 83       	st	Y, r24
	return; //returns nothing
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	ff 90       	pop	r15
 286:	ef 90       	pop	r14
 288:	df 90       	pop	r13
 28a:	cf 90       	pop	r12
 28c:	bf 90       	pop	r11
 28e:	af 90       	pop	r10
 290:	9f 90       	pop	r9
 292:	8f 90       	pop	r8
 294:	08 95       	ret

00000296 <stepperHome>:
void stepperHome(int *stepperPos, int *stepperIt){
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	8c 01       	movw	r16, r24
 2a4:	7b 01       	movw	r14, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
 2a6:	12 b8       	out	0x02, r1	; 2
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
	return; //returns nothing
}
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2ac:	10 c0       	rjmp	.+32     	; 0x2ce <stepperHome+0x38>
		PORTA = stepperSigOrd[i];
 2ae:	fe 01       	movw	r30, r28
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 81       	ld	r24, Z
 2ba:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 2bc:	8e e1       	ldi	r24, 0x1E	; 30
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	1c df       	rcall	.-456    	; 0xfa <mTimer2>
		i++;
 2c2:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2c4:	c4 30       	cpi	r28, 0x04	; 4
 2c6:	d1 05       	cpc	r29, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <stepperHome+0x38>
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (!HallEffect){
 2ce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <HallEffect>
 2d2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <HallEffect+0x1>
 2d6:	89 2b       	or	r24, r25
 2d8:	51 f3       	breq	.-44     	; 0x2ae <stepperHome+0x18>
		mTimer2(delay);
		i++;
		if (i==4)i=0;
	}
	i--;
	HallEffect=0x00;
 2da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HallEffect+0x1>
 2de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <HallEffect>
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
 2e2:	ee 98       	cbi	0x1d, 6	; 29
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 2e4:	c4 30       	cpi	r28, 0x04	; 4
 2e6:	d1 05       	cpc	r29, r1
 2e8:	a9 f1       	breq	.+106    	; 0x354 <stepperHome+0xbe>
		if (i==-1)i=3;
 2ea:	cf 3f       	cpi	r28, 0xFF	; 255
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	d8 07       	cpc	r29, r24
 2f0:	41 f1       	breq	.+80     	; 0x342 <stepperHome+0xac>
		PORTA = stepperSigOrd[i];
 2f2:	fe 01       	movw	r30, r28
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e0 50       	subi	r30, 0x00	; 0
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	80 81       	ld	r24, Z
 2fe:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 300:	8e e1       	ldi	r24, 0x1E	; 30
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	fa de       	rcall	.-524    	; 0xfa <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 306:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 308:	c4 30       	cpi	r28, 0x04	; 4
 30a:	d1 05       	cpc	r29, r1
 30c:	39 f0       	breq	.+14     	; 0x31c <stepperHome+0x86>
		if (i==-1)i=3;
 30e:	cf 3f       	cpi	r28, 0xFF	; 255
 310:	ef ef       	ldi	r30, 0xFF	; 255
 312:	de 07       	cpc	r29, r30
 314:	29 f4       	brne	.+10     	; 0x320 <stepperHome+0x8a>
 316:	c3 e0       	ldi	r28, 0x03	; 3
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <stepperHome+0x8a>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 320:	fe 01       	movw	r30, r28
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	80 81       	ld	r24, Z
 32c:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 32e:	8e e1       	ldi	r24, 0x1E	; 30
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	e3 de       	rcall	.-570    	; 0xfa <mTimer2>
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
 334:	f7 01       	movw	r30, r14
 336:	d1 83       	std	Z+1, r29	; 0x01
 338:	c0 83       	st	Z, r28
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
 33a:	f8 01       	movw	r30, r16
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	10 82       	st	Z, r1
}
 340:	12 c0       	rjmp	.+36     	; 0x366 <stepperHome+0xd0>
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 342:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_start+0x6>
		mTimer2(delay);
 346:	82 b9       	out	0x02, r24	; 2
 348:	8e e1       	ldi	r24, 0x1E	; 30
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	d6 de       	rcall	.-596    	; 0xfa <mTimer2>
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
 352:	e6 cf       	rjmp	.-52     	; 0x320 <stepperHome+0x8a>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 354:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		mTimer2(delay);
 358:	82 b9       	out	0x02, r24	; 2
 35a:	8e e1       	ldi	r24, 0x1E	; 30
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	cd de       	rcall	.-614    	; 0xfa <mTimer2>
	i--;
	HallEffect=0x00;
	EIMSK&=0b10111111;//disable hall effect sensor interrupt (INT6)
	/*Insert code here to compensate for offset --ODA CURRENTLY CAUSES MISSTEP... WHY?*/
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 360:	c1 e0       	ldi	r28, 0x01	; 1
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	dd cf       	rjmp	.-70     	; 0x320 <stepperHome+0x8a>
		mTimer2(delay);
	}
	*stepperIt = i;//modulus is heavy in terms of computation, but doesn't matter in this function
	//PORTA = stepperSigOrd[i];
	*stepperPos=0; //base stepper position (on black)
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	08 95       	ret

00000374 <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 374:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 376:	84 b5       	in	r24, 0x24	; 36
 378:	83 68       	ori	r24, 0x83	; 131
 37a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 37c:	85 b5       	in	r24, 0x25	; 37
 37e:	83 60       	ori	r24, 0x03	; 3
 380:	85 bd       	out	0x25, r24	; 37
	//TCCR0B &= 0b11111101;
	dutyCycle = motorDuty*2.55;
 382:	07 2e       	mov	r0, r23
 384:	00 0c       	add	r0, r0
 386:	88 0b       	sbc	r24, r24
 388:	99 0b       	sbc	r25, r25
 38a:	6c d3       	rcall	.+1752   	; 0xa64 <__floatsisf>
 38c:	23 e3       	ldi	r18, 0x33	; 51
 38e:	33 e3       	ldi	r19, 0x33	; 51
 390:	43 e2       	ldi	r20, 0x23	; 35
 392:	50 e4       	ldi	r21, 0x40	; 64
 394:	cb d3       	rcall	.+1942   	; 0xb2c <__mulsf3>
 396:	38 d3       	rcall	.+1648   	; 0xa08 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 398:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	80 7f       	andi	r24, 0xF0	; 240
 39e:	85 b9       	out	0x05, r24	; 5
 3a0:	08 95       	ret

000003a2 <setupISR>:
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//Ex: rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//Ex: falling edge on INT2: EICRA |= _BV(ISC21);
	//see ISR routines for 
	EIMSK |=0b01011111; //initialize INT6,4:0
 3a2:	8d b3       	in	r24, 0x1d	; 29
 3a4:	8f 65       	ori	r24, 0x5F	; 95
 3a6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0b11101110; //rising edge triggers for INT1 (OI) and INT3 (OR); falling edge detection on INT2 (IN) and INT4 (EX)
 3a8:	e9 e6       	ldi	r30, 0x69	; 105
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	8e 6e       	ori	r24, 0xEE	; 238
 3b0:	80 83       	st	Z, r24
	EICRB |= 0b00100010; //active low for INT6 and INT4
 3b2:	ea e6       	ldi	r30, 0x6A	; 106
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	82 62       	ori	r24, 0x22	; 34
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <setupADC>:
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 3be:	ea e7       	ldi	r30, 0x7A	; 122
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	8d 68       	ori	r24, 0x8D	; 141
 3c6:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 3c8:	ec e7       	ldi	r30, 0x7C	; 124
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	81 64       	ori	r24, 0x41	; 65
 3d0:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 3d2:	80 81       	ld	r24, Z
 3d4:	81 7e       	andi	r24, 0xE1	; 225
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 3da:	26 2f       	mov	r18, r22
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 3e2:	43 70       	andi	r20, 0x03	; 3
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	42 17       	cp	r20, r18
 3e8:	53 07       	cpc	r21, r19
 3ea:	81 f0       	breq	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		PORTB &= 0b11110000; //apply Vcc Brake
 3ec:	45 b1       	in	r20, 0x05	; 5
 3ee:	40 7f       	andi	r20, 0xF0	; 240
 3f0:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 3f2:	45 b1       	in	r20, 0x05	; 5
 3f4:	20 95       	com	r18
 3f6:	30 95       	com	r19
 3f8:	23 70       	andi	r18, 0x03	; 3
 3fa:	33 27       	eor	r19, r19
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	24 2b       	or	r18, r20
 406:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 408:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 40c:	bc 01       	movw	r22, r24
 40e:	99 0f       	add	r25, r25
 410:	88 0b       	sbc	r24, r24
 412:	99 0b       	sbc	r25, r25
 414:	27 d3       	rcall	.+1614   	; 0xa64 <__floatsisf>
 416:	23 e3       	ldi	r18, 0x33	; 51
 418:	33 e3       	ldi	r19, 0x33	; 51
 41a:	43 e2       	ldi	r20, 0x23	; 35
 41c:	50 e4       	ldi	r21, 0x40	; 64
 41e:	86 d3       	rcall	.+1804   	; 0xb2c <__mulsf3>
 420:	f3 d2       	rcall	.+1510   	; 0xa08 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 422:	67 bd       	out	0x27, r22	; 39
 424:	08 95       	ret

00000426 <main>:
//volatile unsigned int ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete
volatile unsigned int HallEffect; //becomes set during stepper homing to know position
unsigned int stepperSigOrd[4] = {0b00110110,0b00101110,0b00101101,0b00110101};

/* Main Routine */
int main(int argc, char *argv[]){
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	ca 59       	subi	r28, 0x9A	; 154
 430:	d1 40       	sbci	r29, 0x01	; 1
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 43c:	e1 e6       	ldi	r30, 0x61	; 97
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	80 83       	st	Z, r24
	CLKPR = 0;
 444:	10 82       	st	Z, r1
	/*User Variables*/
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 446:	1a 82       	std	Y+2, r1	; 0x02
 448:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
 44a:	1c 82       	std	Y+4, r1	; 0x04
 44c:	1b 82       	std	Y+3, r1	; 0x03
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
 44e:	fe 01       	movw	r30, r28
 450:	35 96       	adiw	r30, 0x05	; 5
 452:	80 e1       	ldi	r24, 0x10	; 16
 454:	df 01       	movw	r26, r30
 456:	1d 92       	st	X+, r1
 458:	8a 95       	dec	r24
 45a:	e9 f7       	brne	.-6      	; 0x456 <main+0x30>
	uint8_t ST_Count = 0x00;
	uint8_t AL_Count = 0x00;
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
 45c:	70 96       	adiw	r30, 0x10	; 16
 45e:	80 e4       	ldi	r24, 0x40	; 64
 460:	df 01       	movw	r26, r30
 462:	1d 92       	st	X+, r1
 464:	8a 95       	dec	r24
 466:	e9 f7       	brne	.-6      	; 0x462 <main+0x3c>
		uint8_t inductive; //states whether object is ferrous or not (0=>non-ferrous;1=>ferrous)
		}material;
	//initialize array of structures for storage	
	struct material materialArray[64];
	/*initializations*/
	cli(); //disable interrupts
 468:	f8 94       	cli
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
 46a:	88 e2       	ldi	r24, 0x28	; 40
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	82 df       	rcall	.-252    	; 0x374 <setupPWM>
	setupISR();
 470:	98 df       	rcall	.-208    	; 0x3a2 <setupISR>
	setupADC();
 472:	a5 df       	rcall	.-182    	; 0x3be <setupADC>
	timer1Init();
 474:	2f de       	rcall	.-930    	; 0xd4 <timer1Init>
 476:	3e de       	rcall	.-900    	; 0xf4 <timer2Init>
	timer2Init();
 478:	5e de       	rcall	.-836    	; 0x136 <timer3Init>
 47a:	8f ef       	ldi	r24, 0xFF	; 255
	timer3Init();
 47c:	81 b9       	out	0x01, r24	; 1
 47e:	84 b9       	out	0x04, r24	; 4
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 480:	87 b9       	out	0x07, r24	; 7
 482:	80 ef       	ldi	r24, 0xF0	; 240
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 484:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF; //LEDs Debugging
 486:	1d b8       	out	0x0d, r1	; 13
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 488:	10 ba       	out	0x10, r1	; 16
 48a:	78 94       	sei
	DDRE = 0x00; /*PE4=HallEffect for stepper*/
 48c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <systemFlag+0x1>
	DDRF = 0x00; /*PF1=ADC1 pin*/	
	sei(); //enable interrupts
 490:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <systemFlag>
	// PORTB &= 0b1110000; //apply Vcc brake to motor
	//PORTB |=0b1000; //start motor in specified direction
	/*initialize flags and counters*/
	systemFlag=0x0000;
 494:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HallEffect+0x1>
 498:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <HallEffect>
	//opt1Flag=0x00;
	//opt2Flag=0x00;
	//inductiveFlag=0x00;
	//optExitFlag=0x00;
	//ADCResultFlag=0x00;	
	HallEffect=0x00; 
 49c:	be 01       	movw	r22, r28
 49e:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	f7 de       	rcall	.-530    	; 0x296 <stepperHome>
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	88 e2       	ldi	r24, 0x28	; 40
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	95 df       	rcall	.-214    	; 0x3da <motorControl>
 4b0:	31 2c       	mov	r3, r1
 4b2:	41 2c       	mov	r4, r1
 4b4:	e1 2c       	mov	r14, r1
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
	uint8_t tempFerrous=0;
	uint8_t startMeasureFlag=0x00; //allows the ADC conversions to stop if no object is in front of RL sensor
	uint8_t falseInductFlag=0x00;
 4b6:	f1 2c       	mov	r15, r1
	//int OIOR_Count = 0x00; //count of objects between optical sensors 1 and 2
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	uint8_t tempIndArray[64]= {0};
	uint8_t tempFerrous=0;
	uint8_t startMeasureFlag=0x00; //allows the ADC conversions to stop if no object is in front of RL sensor
 4b8:	c1 2c       	mov	r12, r1
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
	int OR_Count = 0x00; //count of objects that have hit optical sensor 2 (OR)
	int EX_Count = 0x00; //count of objects that have hit optical sensor 3 (EX)
 4ba:	d1 2c       	mov	r13, r1
 4bc:	00 e0       	ldi	r16, 0x00	; 0
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
	int RL_Count = 0x00; //count of objects that have had their reflectivities quantified
 4be:	10 e0       	ldi	r17, 0x00	; 0
 4c0:	0f 2e       	mov	r0, r31
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
	uint16_t aveADCResult = 0; //needs to be able to hold a maximum of 0x2000
	uint16_t oldADCResultArray[8] = {0};
	uint8_t ADCFilterCount = 0x00;
	int OI_Count = 0x00; //count of objects that have hit optical sensor 1 (OI)
 4c2:	88 24       	eor	r8, r8
 4c4:	8a 94       	dec	r8
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
	uint16_t oldADCResult = 0x03FF;
 4c6:	f3 e0       	ldi	r31, 0x03	; 3
 4c8:	9f 2e       	mov	r9, r31
 4ca:	f0 2d       	mov	r31, r0
 4cc:	c7 56       	subi	r28, 0x67	; 103
 4ce:	de 4f       	sbci	r29, 0xFE	; 254
 4d0:	19 82       	std	Y+1, r1	; 0x01
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
	int tempInd =0;
 4d2:	18 82       	st	Y, r1
 4d4:	c9 59       	subi	r28, 0x99	; 153
 4d6:	d1 40       	sbci	r29, 0x01	; 1
 4d8:	c9 56       	subi	r28, 0x69	; 105
 4da:	de 4f       	sbci	r29, 0xFE	; 254
 4dc:	19 82       	std	Y+1, r1	; 0x01
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
	int stepperIteration = 0x00;
	int stepperMovement = 0x00;
	int tempType = 0;
	int tempOI_Count=0;
 4de:	18 82       	st	Y, r1
 4e0:	c7 59       	subi	r28, 0x97	; 151
 4e2:	d1 40       	sbci	r29, 0x01	; 1
 4e4:	0f 2e       	mov	r0, r31
 4e6:	f1 e9       	ldi	r31, 0x91	; 145
 4e8:	6f 2e       	mov	r6, r31
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
 4ea:	71 2c       	mov	r7, r1
 4ec:	f0 2d       	mov	r31, r0
 4ee:	21 2c       	mov	r2, r1
 4f0:	0f 2e       	mov	r0, r31
 4f2:	fa e7       	ldi	r31, 0x7A	; 122
				falseInductFlag=0x00; //reset flag
 4f4:	af 2e       	mov	r10, r31
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
			systemFlag&=0xFB; //reset flag
			OR_Count+=1;
			OREX_Count+=1;
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 4f6:	b1 2c       	mov	r11, r1
 4f8:	f0 2d       	mov	r31, r0
 4fa:	cb 56       	subi	r28, 0x6B	; 107
 4fc:	de 4f       	sbci	r29, 0xFE	; 254
 4fe:	48 82       	st	Y, r4
				materialArray[RL_Count].reflectance=aveADCResult;//value of oldADCResult is now maximum possible reflectivity and is added to struct array
				tempFerrous=tempIndArray[RL_Count]; //store whether object was ferrous or non-ferrous
				tempIndArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
				materialArray[RL_Count].inductive=tempFerrous;//inductivity of material stored; 1 for inductive; 0 for non-ferrous
				if(tempFerrous){ //object is metal: aluminum (light), steel (dark)
					if (aveADCResult<AL_REFLECTIVITY) materialArray[RL_Count].type=150;//object is aluminium
 500:	c5 59       	subi	r28, 0x95	; 149
 502:	d1 40       	sbci	r29, 0x01	; 1
 504:	ca 56       	subi	r28, 0x6A	; 106
 506:	de 4f       	sbci	r29, 0xFE	; 254
 508:	38 82       	st	Y, r3
 50a:	c6 59       	subi	r28, 0x96	; 150
 50c:	d1 40       	sbci	r29, 0x01	; 1
 50e:	41 2c       	mov	r4, r1
 510:	51 2c       	mov	r5, r1
 512:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 516:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
	//ADCResultFlag=0x00;	
	HallEffect=0x00; 
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if(systemFlag&0x01){ //triggered on a rising edge for an active low signal (i.e. when the object has just passed optical sensor 1)
 51a:	80 ff       	sbrs	r24, 0
 51c:	0c c0       	rjmp	.+24     	; 0x536 <main+0x110>
 51e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 522:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xFE; //reset flag
 526:	8e 7f       	andi	r24, 0xFE	; 254
 528:	99 27       	eor	r25, r25
 52a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 52e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 532:	0f 5f       	subi	r16, 0xFF	; 255
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
 53a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
 53e:	81 ff       	sbrs	r24, 1
 540:	88 c0       	rjmp	.+272    	; 0x652 <main+0x22c>
 542:	ca 56       	subi	r28, 0x6A	; 106
 544:	de 4f       	sbci	r29, 0xFE	; 254
 546:	b8 81       	ld	r27, Y
			if (falseInductFlag==0x00){
 548:	c6 59       	subi	r28, 0x96	; 150
 54a:	d1 40       	sbci	r29, 0x01	; 1
 54c:	b1 11       	cpse	r27, r1
 54e:	3a c0       	rjmp	.+116    	; 0x5c4 <main+0x19e>
 550:	01 15       	cp	r16, r1
 552:	11 05       	cpc	r17, r1
 554:	61 f0       	breq	.+24     	; 0x56e <main+0x148>
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
 556:	f8 01       	movw	r30, r16
 558:	31 97       	sbiw	r30, 0x01	; 1
 55a:	65 e1       	ldi	r22, 0x15	; 21
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	6c 0f       	add	r22, r28
 560:	7d 1f       	adc	r23, r29
 562:	e6 0f       	add	r30, r22
 564:	f7 1f       	adc	r31, r23
 566:	40 80       	ld	r4, Z
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 83       	st	Z, r24
 56c:	07 c0       	rjmp	.+14     	; 0x57c <main+0x156>
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
 56e:	65 96       	adiw	r28, 0x15	; 21
 570:	4f ac       	ldd	r4, Y+63	; 0x3f
 572:	65 97       	sbiw	r28, 0x15	; 21
			OI_Count+=1; //add one to amount of objects that have passed optical sensor 1
		}// it is important to note that optical sensor 1 (OI) triggers very close to the inductive sensor (IN)
		if (systemFlag&0x02){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	65 96       	adiw	r28, 0x15	; 21
 578:	8f af       	std	Y+63, r24	; 0x3f
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
 57a:	65 97       	sbiw	r28, 0x15	; 21
 57c:	d3 01       	movw	r26, r6
 57e:	8c 91       	ld	r24, X
 580:	81 60       	ori	r24, 0x01	; 1
				tempOI_Count=OI_Count;
				falseInductFlag=0x01;
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
 582:	8c 93       	st	X, r24
 584:	e4 e9       	ldi	r30, 0x94	; 148
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	11 82       	std	Z+1, r1	; 0x01
				TCNT3=0x00; //set timer equal to zero
 58a:	10 82       	st	Z, r1
 58c:	c0 9b       	sbis	0x18, 0	; 24
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <main+0x186>
 590:	c0 9a       	sbi	0x18, 0	; 24
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 592:	c9 56       	subi	r28, 0x69	; 105
 594:	de 4f       	sbci	r29, 0xFE	; 254
 596:	19 83       	std	Y+1, r17	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 598:	08 83       	st	Y, r16
 59a:	c7 59       	subi	r28, 0x97	; 151
 59c:	d1 40       	sbci	r29, 0x01	; 1
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	ca 56       	subi	r28, 0x6A	; 106
 5a2:	de 4f       	sbci	r29, 0xFE	; 254
				falseInductFlag=0x01;
 5a4:	f8 83       	st	Y, r31
 5a6:	c6 59       	subi	r28, 0x96	; 150
 5a8:	d1 40       	sbci	r29, 0x01	; 1
 5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <main+0x19e>
 5ac:	c9 56       	subi	r28, 0x69	; 105
 5ae:	de 4f       	sbci	r29, 0xFE	; 254
 5b0:	19 83       	std	Y+1, r17	; 0x01
			if (falseInductFlag==0x00){
				if (OI_Count) tempInd=tempIndArray[OI_Count-1];
				else tempInd=tempIndArray[63];
				if (OI_Count) tempIndArray[OI_Count-1]=0x01; //set temporary inductive array equal to 1 for object based on OI_Count
				else tempIndArray[63]=0x01; //special case occurs on roll-over of counters when OI_Count==0; occurs as we are minusing 1 from count
				tempOI_Count=OI_Count;
 5b2:	08 83       	st	Y, r16
 5b4:	c7 59       	subi	r28, 0x97	; 151
 5b6:	d1 40       	sbci	r29, 0x01	; 1
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	ca 56       	subi	r28, 0x6A	; 106
 5bc:	de 4f       	sbci	r29, 0xFE	; 254
				falseInductFlag=0x01;
 5be:	68 83       	st	Y, r22
 5c0:	c6 59       	subi	r28, 0x96	; 150
 5c2:	d1 40       	sbci	r29, 0x01	; 1
 5c4:	c0 9b       	sbis	0x18, 0	; 24
 5c6:	45 c0       	rjmp	.+138    	; 0x652 <main+0x22c>
 5c8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
 5cc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
 5d0:	8d 7f       	andi	r24, 0xFD	; 253
 5d2:	99 27       	eor	r25, r25
 5d4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 5d8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 5dc:	d3 01       	movw	r26, r6
 5de:	8c 91       	ld	r24, X
 5e0:	88 7f       	andi	r24, 0xF8	; 248
				TCCR3B&=0b11111000; //disable timer 3
 5e2:	8c 93       	st	X, r24
 5e4:	c9 56       	subi	r28, 0x69	; 105
 5e6:	de 4f       	sbci	r29, 0xFE	; 254
 5e8:	e8 81       	ld	r30, Y
				falseInductFlag=0x00; //reset flag
				if (tempOI_Count!=OI_Count){
 5ea:	f9 81       	ldd	r31, Y+1	; 0x01
 5ec:	c7 59       	subi	r28, 0x97	; 151
 5ee:	d1 40       	sbci	r29, 0x01	; 1
 5f0:	e0 17       	cp	r30, r16
 5f2:	f1 07       	cpc	r31, r17
 5f4:	49 f1       	breq	.+82     	; 0x648 <main+0x222>
 5f6:	c8 01       	movw	r24, r16
 5f8:	02 97       	sbiw	r24, 0x02	; 2
 5fa:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
 5fc:	90 78       	andi	r25, 0x80	; 128
 5fe:	99 23       	and	r25, r25
 600:	24 f4       	brge	.+8      	; 0x60a <main+0x1e4>
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	80 6c       	ori	r24, 0xC0	; 192
 606:	9f 6f       	ori	r25, 0xFF	; 255
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	e5 e1       	ldi	r30, 0x15	; 21
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	ec 0f       	add	r30, r28
 610:	fd 1f       	adc	r31, r29
 612:	e8 0f       	add	r30, r24
 614:	f9 1f       	adc	r31, r25
 616:	40 82       	st	Z, r4
 618:	c8 01       	movw	r24, r16
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	8f 73       	andi	r24, 0x3F	; 63
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
 61e:	90 78       	andi	r25, 0x80	; 128
 620:	99 23       	and	r25, r25
 622:	24 f4       	brge	.+8      	; 0x62c <main+0x206>
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	80 6c       	ori	r24, 0xC0	; 192
 628:	9f 6f       	ori	r25, 0xFF	; 255
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	e5 e1       	ldi	r30, 0x15	; 21
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	ec 0f       	add	r30, r28
 632:	fd 1f       	adc	r31, r29
 634:	e8 0f       	add	r30, r24
 636:	f9 1f       	adc	r31, r25
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	20 83       	st	Z, r18
 63c:	ca 56       	subi	r28, 0x6A	; 106
 63e:	de 4f       	sbci	r29, 0xFE	; 254
 640:	28 82       	st	Y, r2
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				systemFlag&=0xFD; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
				falseInductFlag=0x00; //reset flag
 642:	c6 59       	subi	r28, 0x96	; 150
 644:	d1 40       	sbci	r29, 0x01	; 1
 646:	05 c0       	rjmp	.+10     	; 0x652 <main+0x22c>
 648:	ca 56       	subi	r28, 0x6A	; 106
 64a:	de 4f       	sbci	r29, 0xFE	; 254
 64c:	28 82       	st	Y, r2
 64e:	c6 59       	subi	r28, 0x96	; 150
 650:	d1 40       	sbci	r29, 0x01	; 1
 652:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 656:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
					tempIndArray[(OI_Count-2)%64]=tempInd; //send the value you stole back to the falsely set array object
					tempIndArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1
				}	
			}
		}
		if(systemFlag&0x04){ //optical sensor 2 (OR)
 65a:	82 ff       	sbrs	r24, 2
 65c:	14 c0       	rjmp	.+40     	; 0x686 <main+0x260>
 65e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 662:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xFB; //reset flag
 666:	8b 7f       	andi	r24, 0xFB	; 251
 668:	99 27       	eor	r25, r25
 66a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 66e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 672:	d5 01       	movw	r26, r10
 674:	8c 91       	ld	r24, X
 676:	80 64       	ori	r24, 0x40	; 64
			OR_Count+=1;
			OREX_Count+=1;
			ADCSRA |= _BV(ADSC); //initialize an ADC conversion
 678:	8c 93       	st	X, r24
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	cb 56       	subi	r28, 0x6B	; 107
 67e:	de 4f       	sbci	r29, 0xFE	; 254
			startMeasureFlag=0x01;//allow ADC conversions to continue
 680:	b8 83       	st	Y, r27
 682:	c5 59       	subi	r28, 0x95	; 149
 684:	d1 40       	sbci	r29, 0x01	; 1
 686:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 68a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}
		if(systemFlag&0x08){ //object has hit sensor at end of conveyor
 68e:	83 ff       	sbrs	r24, 3
 690:	2e c0       	rjmp	.+92     	; 0x6ee <main+0x2c8>
 692:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 696:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xF7; //reset flag
 69a:	87 7f       	andi	r24, 0xF7	; 247
 69c:	99 27       	eor	r25, r25
 69e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 6a2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 6a6:	f7 01       	movw	r30, r14
 6a8:	ee 0f       	add	r30, r30
 6aa:	ff 1f       	adc	r31, r31
			//corresponding positions (black=0;aluminum=50;white=100;steel=150)
			//if object type matches stepper location; do nothing...
			tempType=materialArray[EX_Count].type;
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ee 0d       	add	r30, r14
 6b2:	ff 1d       	adc	r31, r15
 6b4:	65 e5       	ldi	r22, 0x55	; 85
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	6c 0f       	add	r22, r28
 6ba:	7d 1f       	adc	r23, r29
 6bc:	e6 0f       	add	r30, r22
 6be:	f7 1f       	adc	r31, r23
 6c0:	22 81       	ldd	r18, Z+2	; 0x02
 6c2:	33 81       	ldd	r19, Z+3	; 0x03
 6c4:	89 81       	ldd	r24, Y+1	; 0x01
			stepperMovement=stepperPosition-tempType;
			if (!stepperMovement){//if object type doesn't match stepper location; stop motor, move stepper, start motor
 6c6:	9a 81       	ldd	r25, Y+2	; 0x02
 6c8:	28 17       	cp	r18, r24
 6ca:	39 07       	cpc	r19, r25
 6cc:	69 f4       	brne	.+26     	; 0x6e8 <main+0x2c2>
 6ce:	85 b1       	in	r24, 0x05	; 5
 6d0:	80 7f       	andi	r24, 0xF0	; 240
 6d2:	85 b9       	out	0x05, r24	; 5
				PORTB &=0xF0; //Apply Vcc brake to motor
 6d4:	ae 01       	movw	r20, r28
 6d6:	4d 5f       	subi	r20, 0xFD	; 253
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255
				//stepper rotation logic
				if (stepperMovement==150) stepperMovement=-50;
				else if (stepperMovement==-150) stepperMovement=50;
				else if (stepperMovement== 100) stepperMovement=-100; //counter-clockwise is more efficient for particular stepper
				stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
 6da:	be 01       	movw	r22, r28
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2b dd       	rcall	.-1450   	; 0x13c <stepperControl>
 6e6:	2b 9a       	sbi	0x05, 3	; 5
 6e8:	7f ef       	ldi	r23, 0xFF	; 255
 6ea:	e7 1a       	sub	r14, r23
				PORTB |=0b00001000; //start motor forwards
 6ec:	f7 0a       	sbc	r15, r23
			if (tempType==0)BL_Count += 0x01;
			else if (tempType==50)ST_Count += 0x01;
			else if (tempType==100)WH_Count += 0x01;
			else if (tempType==150)AL_Count += 0x01;
			OREX_Count-=1;
			EX_Count+=1;
 6ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 6f2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		}
		if((systemFlag&0x10) && (startMeasureFlag)){ //if an ADC conversion is complete
 6f6:	84 ff       	sbrs	r24, 4
 6f8:	bf c0       	rjmp	.+382    	; 0x878 <main+0x452>
 6fa:	cb 56       	subi	r28, 0x6B	; 107
 6fc:	de 4f       	sbci	r29, 0xFE	; 254
 6fe:	88 81       	ld	r24, Y
 700:	c5 59       	subi	r28, 0x95	; 149
 702:	d1 40       	sbci	r29, 0x01	; 1
 704:	88 23       	and	r24, r24
 706:	09 f4       	brne	.+2      	; 0x70a <main+0x2e4>
 708:	b7 c0       	rjmp	.+366    	; 0x878 <main+0x452>
 70a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 70e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
			systemFlag&=0xEF; //reset flag to allow interrupt to be triggered right away if necessary
 712:	8f 7e       	andi	r24, 0xEF	; 239
 714:	99 27       	eor	r25, r25
 716:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 71a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 71e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADCResult>
 722:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADCResult+0x1>
			if(ADCResult<oldADCResult) {
 726:	88 15       	cp	r24, r8
 728:	99 05       	cpc	r25, r9
 72a:	a8 f4       	brcc	.+42     	; 0x756 <main+0x330>
 72c:	80 90 0d 01 	lds	r8, 0x010D	; 0x80010d <ADCResult>
 730:	90 90 0e 01 	lds	r9, 0x010E	; 0x80010e <ADCResult+0x1>
				oldADCResult=ADCResult; //reflectivity is increasing still (i.e. a lower ADC voltage is measured)
 734:	e3 2d       	mov	r30, r3
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	ee 0f       	add	r30, r30
				oldADCResultArray[ADCFilterCount]=oldADCResult; //store biggest result and seven previous for averaging
 73a:	ff 1f       	adc	r31, r31
 73c:	a1 e0       	ldi	r26, 0x01	; 1
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	ac 0f       	add	r26, r28
 742:	bd 1f       	adc	r27, r29
 744:	ea 0f       	add	r30, r26
 746:	fb 1f       	adc	r31, r27
 748:	95 82       	std	Z+5, r9	; 0x05
 74a:	84 82       	std	Z+4, r8	; 0x04
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	83 0d       	add	r24, r3
 750:	87 70       	andi	r24, 0x07	; 7
				ADCFilterCount+=1;
 752:	38 2e       	mov	r3, r24
 754:	8c c0       	rjmp	.+280    	; 0x86e <main+0x448>
				ADCFilterCount&=0b00000111; //modulus of 8;
 756:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <ADCResult>
 75a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <ADCResult+0x1>
			}
			else if(ADCResult>(oldADCResult+0x3B)){ //reflectivities have been reducing and are 59(0x3B) lower than maximum reflectivity reached(buffer)
 75e:	94 01       	movw	r18, r8
 760:	25 5c       	subi	r18, 0xC5	; 197
 762:	3f 4f       	sbci	r19, 0xFF	; 255
 764:	28 17       	cp	r18, r24
 766:	39 07       	cpc	r19, r25
 768:	08 f0       	brcs	.+2      	; 0x76c <main+0x346>
 76a:	81 c0       	rjmp	.+258    	; 0x86e <main+0x448>
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	43 2d       	mov	r20, r3
 776:	e4 2f       	mov	r30, r20
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	ee 0f       	add	r30, r30
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
					aveADCResult+=oldADCResultArray[ADCFilterCount];
 77c:	ff 1f       	adc	r31, r31
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	6c 0f       	add	r22, r28
 784:	7d 1f       	adc	r23, r29
 786:	e6 0f       	add	r30, r22
 788:	f7 1f       	adc	r31, r23
 78a:	64 81       	ldd	r22, Z+4	; 0x04
 78c:	75 81       	ldd	r23, Z+5	; 0x05
 78e:	26 0f       	add	r18, r22
 790:	37 1f       	adc	r19, r23
 792:	4f 5f       	subi	r20, 0xFF	; 255
 794:	47 70       	andi	r20, 0x07	; 7
 796:	01 97       	sbiw	r24, 0x01	; 1
					ADCFilterCount+=1;
 798:	71 f7       	brne	.-36     	; 0x776 <main+0x350>
					ADCFilterCount&=0b00000111; //modulus of 8;
 79a:	34 2e       	mov	r3, r20
 79c:	36 95       	lsr	r19
				ADCFilterCount+=1;
				ADCFilterCount&=0b00000111; //modulus of 8;
			}
			else if(ADCResult>(oldADCResult+0x3B)){ //reflectivities have been reducing and are 59(0x3B) lower than maximum reflectivity reached(buffer)
				aveADCResult=0;
				for (i=0;i<8;i++){//perform averaging of largest result and 7 results previous
 79e:	27 95       	ror	r18
 7a0:	36 95       	lsr	r19
					aveADCResult+=oldADCResultArray[ADCFilterCount];
					ADCFilterCount+=1;
					ADCFilterCount&=0b00000111; //modulus of 8;
				}
				aveADCResult=aveADCResult/8;
 7a2:	27 95       	ror	r18
 7a4:	36 95       	lsr	r19
 7a6:	27 95       	ror	r18
 7a8:	e5 e1       	ldi	r30, 0x15	; 21
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	ec 0f       	add	r30, r28
				materialArray[RL_Count].reflectance=aveADCResult;//value of oldADCResult is now maximum possible reflectivity and is added to struct array
				tempFerrous=tempIndArray[RL_Count]; //store whether object was ferrous or non-ferrous
 7ae:	fd 1f       	adc	r31, r29
 7b0:	ec 0d       	add	r30, r12
 7b2:	fd 1d       	adc	r31, r13
 7b4:	80 81       	ld	r24, Z
 7b6:	10 82       	st	Z, r1
 7b8:	88 23       	and	r24, r24
 7ba:	39 f1       	breq	.+78     	; 0x80a <main+0x3e4>
				tempIndArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
 7bc:	28 3c       	cpi	r18, 0xC8	; 200
				materialArray[RL_Count].inductive=tempFerrous;//inductivity of material stored; 1 for inductive; 0 for non-ferrous
				if(tempFerrous){ //object is metal: aluminum (light), steel (dark)
 7be:	31 05       	cpc	r19, r1
 7c0:	90 f4       	brcc	.+36     	; 0x7e6 <main+0x3c0>
					if (aveADCResult<AL_REFLECTIVITY) materialArray[RL_Count].type=150;//object is aluminium
 7c2:	f6 01       	movw	r30, r12
 7c4:	ee 0f       	add	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	ec 0d       	add	r30, r12
 7ce:	fd 1d       	adc	r31, r13
 7d0:	85 e5       	ldi	r24, 0x55	; 85
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	8c 0f       	add	r24, r28
 7d6:	9d 1f       	adc	r25, r29
 7d8:	e8 0f       	add	r30, r24
 7da:	f9 1f       	adc	r31, r25
 7dc:	a6 e9       	ldi	r26, 0x96	; 150
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	b3 83       	std	Z+3, r27	; 0x03
 7e2:	a2 83       	std	Z+2, r26	; 0x02
 7e4:	36 c0       	rjmp	.+108    	; 0x852 <main+0x42c>
 7e6:	f6 01       	movw	r30, r12
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=50;//object is steel
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	ec 0d       	add	r30, r12
 7f2:	fd 1d       	adc	r31, r13
 7f4:	65 e5       	ldi	r22, 0x55	; 85
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	6c 0f       	add	r22, r28
 7fa:	7d 1f       	adc	r23, r29
 7fc:	e6 0f       	add	r30, r22
 7fe:	f7 1f       	adc	r31, r23
 800:	82 e3       	ldi	r24, 0x32	; 50
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	93 83       	std	Z+3, r25	; 0x03
 806:	82 83       	std	Z+2, r24	; 0x02
 808:	24 c0       	rjmp	.+72     	; 0x852 <main+0x42c>
 80a:	26 3b       	cpi	r18, 0xB6	; 182
 80c:	33 40       	sbci	r19, 0x03	; 3
 80e:	90 f4       	brcc	.+36     	; 0x834 <main+0x40e>
					} else { //object is plastic: white (light), black (dark)
					if (aveADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
 810:	f6 01       	movw	r30, r12
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	ee 0f       	add	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	ec 0d       	add	r30, r12
 81c:	fd 1d       	adc	r31, r13
 81e:	a5 e5       	ldi	r26, 0x55	; 85
 820:	b0 e0       	ldi	r27, 0x00	; 0
 822:	ac 0f       	add	r26, r28
 824:	bd 1f       	adc	r27, r29
 826:	ea 0f       	add	r30, r26
 828:	fb 1f       	adc	r31, r27
 82a:	64 e6       	ldi	r22, 0x64	; 100
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	73 83       	std	Z+3, r23	; 0x03
 830:	62 83       	std	Z+2, r22	; 0x02
 832:	0f c0       	rjmp	.+30     	; 0x852 <main+0x42c>
 834:	f6 01       	movw	r30, r12
 836:	ee 0f       	add	r30, r30
 838:	ff 1f       	adc	r31, r31
					else materialArray[RL_Count].type=0;//object is black plastic
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	ec 0d       	add	r30, r12
 840:	fd 1d       	adc	r31, r13
 842:	85 e5       	ldi	r24, 0x55	; 85
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	8c 0f       	add	r24, r28
 848:	9d 1f       	adc	r25, r29
 84a:	e8 0f       	add	r30, r24
 84c:	f9 1f       	adc	r31, r25
 84e:	13 82       	std	Z+3, r1	; 0x03
 850:	12 82       	std	Z+2, r1	; 0x02
 852:	9f ef       	ldi	r25, 0xFF	; 255
 854:	c9 1a       	sub	r12, r25
 856:	d9 0a       	sbc	r13, r25
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
 858:	cb 56       	subi	r28, 0x6B	; 107
 85a:	de 4f       	sbci	r29, 0xFE	; 254
 85c:	28 82       	st	Y, r2
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
 85e:	c5 59       	subi	r28, 0x95	; 149
 860:	d1 40       	sbci	r29, 0x01	; 1
 862:	88 24       	eor	r8, r8
 864:	8a 94       	dec	r8
 866:	0f 2e       	mov	r0, r31
					} else { //object is plastic: white (light), black (dark)
					if (aveADCResult<WH_REFLECTIVITY) materialArray[RL_Count].type=100;//object is white plastic
					else materialArray[RL_Count].type=0;//object is black plastic
				}
				RL_Count+=1;//add one to amount of objects that have had their reflectivities measured
				oldADCResult=0x03FF;//reset oldADCResult to 0x3FF for the next objects reflectivites to be measured
 868:	f3 e0       	ldi	r31, 0x03	; 3
 86a:	9f 2e       	mov	r9, r31
 86c:	f0 2d       	mov	r31, r0
 86e:	d5 01       	movw	r26, r10
 870:	8c 91       	ld	r24, X
 872:	80 64       	ori	r24, 0x40	; 64
				startMeasureFlag=0x00; //set flag to zero so ADC conversions cannot occur
			}
			ADCSRA |= _BV(ADSC); //re-trigger ADC
 874:	8c 93       	st	X, r24
 876:	0a c0       	rjmp	.+20     	; 0x88c <main+0x466>
 878:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 87c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		} else systemFlag&=0xEF;
 880:	8f 7e       	andi	r24, 0xEF	; 239
 882:	99 27       	eor	r25, r25
 884:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 888:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
 88c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 890:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
		if (systemFlag&0x20){//if PAUSE Button is pressed
 894:	0f 73       	andi	r16, 0x3F	; 63
 896:	11 27       	eor	r17, r17
 898:	bf e3       	ldi	r27, 0x3F	; 63
			//print Black, White, Aluminium, and Steel Counts to screen and display how many objects are between optical sensor 2 and 3 (EX)
		}
		//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
		OI_Count &= 0b00111111;
 89a:	cb 22       	and	r12, r27
 89c:	dd 24       	eor	r13, r13
		RL_Count &= 0b00111111;
 89e:	ef e3       	ldi	r30, 0x3F	; 63
 8a0:	ee 22       	and	r14, r30
 8a2:	ff 24       	eor	r15, r15
		OR_Count &= 0b00111111;
		EX_Count &= 0b00111111;
 8a4:	36 ce       	rjmp	.-916    	; 0x512 <main+0xec>

000008a6 <__vector_1>:
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
	}
 8aa:	0f b6       	in	r0, 0x3f	; 63
	OCR0A = dutyCycle;//set duty cycle
}

/**********INTERRUPT SERVICE ROUTINES**********/
/*Button interrupt for emergency: shut-off dc motor, disable stepper, shut off, ensure nothing can be turned on*/
ISR(INT0_vect){ // on PD0; active low KILL SWITCH
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	8f 93       	push	r24
	PORTB &= 0b11110000; //stop motor by applying Vcc break
 8b2:	85 b1       	in	r24, 0x05	; 5
 8b4:	80 7f       	andi	r24, 0xF0	; 240
 8b6:	85 b9       	out	0x05, r24	; 5
}
 8b8:	8f 91       	pop	r24
 8ba:	0f 90       	pop	r0
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	0f 90       	pop	r0
 8c0:	1f 90       	pop	r1
 8c2:	18 95       	reti

000008c4 <__vector_2>:
/*sensor 1: OI: 1st Optical-Inductive-Near Inductive sensor*/
ISR(INT1_vect){ // on PD1; active low; triggered on rising-edge
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	11 24       	eor	r1, r1
 8ce:	8f 93       	push	r24
 8d0:	9f 93       	push	r25
	systemFlag|=0x01;//opt1Flag=0x01;
 8d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 8d6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 8e0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 8e4:	9f 91       	pop	r25
 8e6:	8f 91       	pop	r24
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <__vector_3>:
/*sensor 2: IN: Inductive sensor*/
ISR(INT2_vect){ //on PD3; active low; triggered on falling-edge
 8f2:	1f 92       	push	r1
 8f4:	0f 92       	push	r0
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	0f 92       	push	r0
 8fa:	11 24       	eor	r1, r1
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
	systemFlag|=0x02;//inductiveFlag=0x01;
 900:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 904:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 908:	82 60       	ori	r24, 0x02	; 2
 90a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 90e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 912:	9f 91       	pop	r25
 914:	8f 91       	pop	r24
 916:	0f 90       	pop	r0
 918:	0f be       	out	0x3f, r0	; 63
 91a:	0f 90       	pop	r0
 91c:	1f 90       	pop	r1
 91e:	18 95       	reti

00000920 <__vector_4>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Reflective sensor*/
ISR(INT3_vect){ // on PD2; active high; triggered on rising-edge
 920:	1f 92       	push	r1
 922:	0f 92       	push	r0
 924:	0f b6       	in	r0, 0x3f	; 63
 926:	0f 92       	push	r0
 928:	11 24       	eor	r1, r1
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
	systemFlag|=0x04;//opt2Flag=0x01;
 92e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 932:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 936:	84 60       	ori	r24, 0x04	; 4
 938:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 93c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 940:	9f 91       	pop	r25
 942:	8f 91       	pop	r24
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <__vector_5>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT4_vect){ //on PE4; active low; triggered on falling-edge
 94e:	1f 92       	push	r1
 950:	0f 92       	push	r0
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	0f 92       	push	r0
 956:	11 24       	eor	r1, r1
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
	systemFlag|=0x08;//optExitFlag=0x01;
 95c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 960:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 964:	88 60       	ori	r24, 0x08	; 8
 966:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 96a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	0f 90       	pop	r0
 974:	0f be       	out	0x3f, r0	; 63
 976:	0f 90       	pop	r0
 978:	1f 90       	pop	r1
 97a:	18 95       	reti

0000097c <__vector_29>:
/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
	ADCResult = ADCL;
 98e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADCResult+0x1>
 998:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADCResult>
	ADCResult += ADCH << 8;
 99c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 9a0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <ADCResult>
 9a4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <ADCResult+0x1>
 9a8:	89 2f       	mov	r24, r25
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	98 2f       	mov	r25, r24
 9ae:	88 27       	eor	r24, r24
 9b0:	82 0f       	add	r24, r18
 9b2:	93 1f       	adc	r25, r19
 9b4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADCResult+0x1>
 9b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADCResult>
	systemFlag|=0x10;//ADCResultFlag = 1;
 9bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <systemFlag>
 9c0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <systemFlag+0x1>
 9c4:	80 61       	ori	r24, 0x10	; 16
 9c6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <systemFlag+0x1>
 9ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <systemFlag>
}
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	3f 91       	pop	r19
 9d4:	2f 91       	pop	r18
 9d6:	0f 90       	pop	r0
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	0f 90       	pop	r0
 9dc:	1f 90       	pop	r1
 9de:	18 95       	reti

000009e0 <__vector_7>:
/*sensor 6: HE: Hall Effect sensor; used for homing stepper*/
ISR(INT6_vect){ //on PE6; Active low for hall effect sensor 
 9e0:	1f 92       	push	r1
 9e2:	0f 92       	push	r0
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	0f 92       	push	r0
 9e8:	11 24       	eor	r1, r1
 9ea:	8f 93       	push	r24
 9ec:	9f 93       	push	r25
	HallEffect=0x01;
 9ee:	81 e0       	ldi	r24, 0x01	; 1
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <HallEffect+0x1>
 9f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <HallEffect>
}
 9fa:	9f 91       	pop	r25
 9fc:	8f 91       	pop	r24
 9fe:	0f 90       	pop	r0
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	0f 90       	pop	r0
 a04:	1f 90       	pop	r1
 a06:	18 95       	reti

00000a08 <__fixunssfsi>:
 a08:	70 d0       	rcall	.+224    	; 0xaea <__fp_splitA>
 a0a:	88 f0       	brcs	.+34     	; 0xa2e <__fixunssfsi+0x26>
 a0c:	9f 57       	subi	r25, 0x7F	; 127
 a0e:	90 f0       	brcs	.+36     	; 0xa34 <__fixunssfsi+0x2c>
 a10:	b9 2f       	mov	r27, r25
 a12:	99 27       	eor	r25, r25
 a14:	b7 51       	subi	r27, 0x17	; 23
 a16:	a0 f0       	brcs	.+40     	; 0xa40 <__fixunssfsi+0x38>
 a18:	d1 f0       	breq	.+52     	; 0xa4e <__fixunssfsi+0x46>
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	1a f0       	brmi	.+6      	; 0xa2a <__fixunssfsi+0x22>
 a24:	ba 95       	dec	r27
 a26:	c9 f7       	brne	.-14     	; 0xa1a <__fixunssfsi+0x12>
 a28:	12 c0       	rjmp	.+36     	; 0xa4e <__fixunssfsi+0x46>
 a2a:	b1 30       	cpi	r27, 0x01	; 1
 a2c:	81 f0       	breq	.+32     	; 0xa4e <__fixunssfsi+0x46>
 a2e:	77 d0       	rcall	.+238    	; 0xb1e <__fp_zero>
 a30:	b1 e0       	ldi	r27, 0x01	; 1
 a32:	08 95       	ret
 a34:	74 c0       	rjmp	.+232    	; 0xb1e <__fp_zero>
 a36:	67 2f       	mov	r22, r23
 a38:	78 2f       	mov	r23, r24
 a3a:	88 27       	eor	r24, r24
 a3c:	b8 5f       	subi	r27, 0xF8	; 248
 a3e:	39 f0       	breq	.+14     	; 0xa4e <__fixunssfsi+0x46>
 a40:	b9 3f       	cpi	r27, 0xF9	; 249
 a42:	cc f3       	brlt	.-14     	; 0xa36 <__fixunssfsi+0x2e>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b3 95       	inc	r27
 a4c:	d9 f7       	brne	.-10     	; 0xa44 <__fixunssfsi+0x3c>
 a4e:	3e f4       	brtc	.+14     	; 0xa5e <__fixunssfsi+0x56>
 a50:	90 95       	com	r25
 a52:	80 95       	com	r24
 a54:	70 95       	com	r23
 a56:	61 95       	neg	r22
 a58:	7f 4f       	sbci	r23, 0xFF	; 255
 a5a:	8f 4f       	sbci	r24, 0xFF	; 255
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	08 95       	ret

00000a60 <__floatunsisf>:
 a60:	e8 94       	clt
 a62:	09 c0       	rjmp	.+18     	; 0xa76 <__floatsisf+0x12>

00000a64 <__floatsisf>:
 a64:	97 fb       	bst	r25, 7
 a66:	3e f4       	brtc	.+14     	; 0xa76 <__floatsisf+0x12>
 a68:	90 95       	com	r25
 a6a:	80 95       	com	r24
 a6c:	70 95       	com	r23
 a6e:	61 95       	neg	r22
 a70:	7f 4f       	sbci	r23, 0xFF	; 255
 a72:	8f 4f       	sbci	r24, 0xFF	; 255
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	99 23       	and	r25, r25
 a78:	a9 f0       	breq	.+42     	; 0xaa4 <__floatsisf+0x40>
 a7a:	f9 2f       	mov	r31, r25
 a7c:	96 e9       	ldi	r25, 0x96	; 150
 a7e:	bb 27       	eor	r27, r27
 a80:	93 95       	inc	r25
 a82:	f6 95       	lsr	r31
 a84:	87 95       	ror	r24
 a86:	77 95       	ror	r23
 a88:	67 95       	ror	r22
 a8a:	b7 95       	ror	r27
 a8c:	f1 11       	cpse	r31, r1
 a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <__floatsisf+0x1c>
 a90:	fa f4       	brpl	.+62     	; 0xad0 <__floatsisf+0x6c>
 a92:	bb 0f       	add	r27, r27
 a94:	11 f4       	brne	.+4      	; 0xa9a <__floatsisf+0x36>
 a96:	60 ff       	sbrs	r22, 0
 a98:	1b c0       	rjmp	.+54     	; 0xad0 <__floatsisf+0x6c>
 a9a:	6f 5f       	subi	r22, 0xFF	; 255
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	16 c0       	rjmp	.+44     	; 0xad0 <__floatsisf+0x6c>
 aa4:	88 23       	and	r24, r24
 aa6:	11 f0       	breq	.+4      	; 0xaac <__floatsisf+0x48>
 aa8:	96 e9       	ldi	r25, 0x96	; 150
 aaa:	11 c0       	rjmp	.+34     	; 0xace <__floatsisf+0x6a>
 aac:	77 23       	and	r23, r23
 aae:	21 f0       	breq	.+8      	; 0xab8 <__floatsisf+0x54>
 ab0:	9e e8       	ldi	r25, 0x8E	; 142
 ab2:	87 2f       	mov	r24, r23
 ab4:	76 2f       	mov	r23, r22
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__floatsisf+0x5e>
 ab8:	66 23       	and	r22, r22
 aba:	71 f0       	breq	.+28     	; 0xad8 <__floatsisf+0x74>
 abc:	96 e8       	ldi	r25, 0x86	; 134
 abe:	86 2f       	mov	r24, r22
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	60 e0       	ldi	r22, 0x00	; 0
 ac4:	2a f0       	brmi	.+10     	; 0xad0 <__floatsisf+0x6c>
 ac6:	9a 95       	dec	r25
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	da f7       	brpl	.-10     	; 0xac6 <__floatsisf+0x62>
 ad0:	88 0f       	add	r24, r24
 ad2:	96 95       	lsr	r25
 ad4:	87 95       	ror	r24
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__fp_split3>:
 ada:	57 fd       	sbrc	r21, 7
 adc:	90 58       	subi	r25, 0x80	; 128
 ade:	44 0f       	add	r20, r20
 ae0:	55 1f       	adc	r21, r21
 ae2:	59 f0       	breq	.+22     	; 0xafa <__fp_splitA+0x10>
 ae4:	5f 3f       	cpi	r21, 0xFF	; 255
 ae6:	71 f0       	breq	.+28     	; 0xb04 <__fp_splitA+0x1a>
 ae8:	47 95       	ror	r20

00000aea <__fp_splitA>:
 aea:	88 0f       	add	r24, r24
 aec:	97 fb       	bst	r25, 7
 aee:	99 1f       	adc	r25, r25
 af0:	61 f0       	breq	.+24     	; 0xb0a <__fp_splitA+0x20>
 af2:	9f 3f       	cpi	r25, 0xFF	; 255
 af4:	79 f0       	breq	.+30     	; 0xb14 <__fp_splitA+0x2a>
 af6:	87 95       	ror	r24
 af8:	08 95       	ret
 afa:	12 16       	cp	r1, r18
 afc:	13 06       	cpc	r1, r19
 afe:	14 06       	cpc	r1, r20
 b00:	55 1f       	adc	r21, r21
 b02:	f2 cf       	rjmp	.-28     	; 0xae8 <__fp_split3+0xe>
 b04:	46 95       	lsr	r20
 b06:	f1 df       	rcall	.-30     	; 0xaea <__fp_splitA>
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <__fp_splitA+0x30>
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	99 1f       	adc	r25, r25
 b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <__fp_splitA+0xc>
 b14:	86 95       	lsr	r24
 b16:	71 05       	cpc	r23, r1
 b18:	61 05       	cpc	r22, r1
 b1a:	08 94       	sec
 b1c:	08 95       	ret

00000b1e <__fp_zero>:
 b1e:	e8 94       	clt

00000b20 <__fp_szero>:
 b20:	bb 27       	eor	r27, r27
 b22:	66 27       	eor	r22, r22
 b24:	77 27       	eor	r23, r23
 b26:	cb 01       	movw	r24, r22
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__mulsf3>:
 b2c:	0b d0       	rcall	.+22     	; 0xb44 <__mulsf3x>
 b2e:	78 c0       	rjmp	.+240    	; 0xc20 <__fp_round>
 b30:	69 d0       	rcall	.+210    	; 0xc04 <__fp_pscA>
 b32:	28 f0       	brcs	.+10     	; 0xb3e <__mulsf3+0x12>
 b34:	6e d0       	rcall	.+220    	; 0xc12 <__fp_pscB>
 b36:	18 f0       	brcs	.+6      	; 0xb3e <__mulsf3+0x12>
 b38:	95 23       	and	r25, r21
 b3a:	09 f0       	breq	.+2      	; 0xb3e <__mulsf3+0x12>
 b3c:	5a c0       	rjmp	.+180    	; 0xbf2 <__fp_inf>
 b3e:	5f c0       	rjmp	.+190    	; 0xbfe <__fp_nan>
 b40:	11 24       	eor	r1, r1
 b42:	ee cf       	rjmp	.-36     	; 0xb20 <__fp_szero>

00000b44 <__mulsf3x>:
 b44:	ca df       	rcall	.-108    	; 0xada <__fp_split3>
 b46:	a0 f3       	brcs	.-24     	; 0xb30 <__mulsf3+0x4>

00000b48 <__mulsf3_pse>:
 b48:	95 9f       	mul	r25, r21
 b4a:	d1 f3       	breq	.-12     	; 0xb40 <__mulsf3+0x14>
 b4c:	95 0f       	add	r25, r21
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	55 1f       	adc	r21, r21
 b52:	62 9f       	mul	r22, r18
 b54:	f0 01       	movw	r30, r0
 b56:	72 9f       	mul	r23, r18
 b58:	bb 27       	eor	r27, r27
 b5a:	f0 0d       	add	r31, r0
 b5c:	b1 1d       	adc	r27, r1
 b5e:	63 9f       	mul	r22, r19
 b60:	aa 27       	eor	r26, r26
 b62:	f0 0d       	add	r31, r0
 b64:	b1 1d       	adc	r27, r1
 b66:	aa 1f       	adc	r26, r26
 b68:	64 9f       	mul	r22, r20
 b6a:	66 27       	eor	r22, r22
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	66 1f       	adc	r22, r22
 b72:	82 9f       	mul	r24, r18
 b74:	22 27       	eor	r18, r18
 b76:	b0 0d       	add	r27, r0
 b78:	a1 1d       	adc	r26, r1
 b7a:	62 1f       	adc	r22, r18
 b7c:	73 9f       	mul	r23, r19
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	62 1f       	adc	r22, r18
 b84:	83 9f       	mul	r24, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	22 1f       	adc	r18, r18
 b8c:	74 9f       	mul	r23, r20
 b8e:	33 27       	eor	r19, r19
 b90:	a0 0d       	add	r26, r0
 b92:	61 1d       	adc	r22, r1
 b94:	23 1f       	adc	r18, r19
 b96:	84 9f       	mul	r24, r20
 b98:	60 0d       	add	r22, r0
 b9a:	21 1d       	adc	r18, r1
 b9c:	82 2f       	mov	r24, r18
 b9e:	76 2f       	mov	r23, r22
 ba0:	6a 2f       	mov	r22, r26
 ba2:	11 24       	eor	r1, r1
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	8a f0       	brmi	.+34     	; 0xbcc <__mulsf3_pse+0x84>
 baa:	e1 f0       	breq	.+56     	; 0xbe4 <__mulsf3_pse+0x9c>
 bac:	88 23       	and	r24, r24
 bae:	4a f0       	brmi	.+18     	; 0xbc2 <__mulsf3_pse+0x7a>
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	bb 1f       	adc	r27, r27
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	91 50       	subi	r25, 0x01	; 1
 bbe:	50 40       	sbci	r21, 0x00	; 0
 bc0:	a9 f7       	brne	.-22     	; 0xbac <__mulsf3_pse+0x64>
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	51 05       	cpc	r21, r1
 bc6:	70 f0       	brcs	.+28     	; 0xbe4 <__mulsf3_pse+0x9c>
 bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <__fp_inf>
 bca:	aa cf       	rjmp	.-172    	; 0xb20 <__fp_szero>
 bcc:	5f 3f       	cpi	r21, 0xFF	; 255
 bce:	ec f3       	brlt	.-6      	; 0xbca <__mulsf3_pse+0x82>
 bd0:	98 3e       	cpi	r25, 0xE8	; 232
 bd2:	dc f3       	brlt	.-10     	; 0xbca <__mulsf3_pse+0x82>
 bd4:	86 95       	lsr	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	b7 95       	ror	r27
 bdc:	f7 95       	ror	r31
 bde:	e7 95       	ror	r30
 be0:	9f 5f       	subi	r25, 0xFF	; 255
 be2:	c1 f7       	brne	.-16     	; 0xbd4 <__mulsf3_pse+0x8c>
 be4:	fe 2b       	or	r31, r30
 be6:	88 0f       	add	r24, r24
 be8:	91 1d       	adc	r25, r1
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret

00000bf2 <__fp_inf>:
 bf2:	97 f9       	bld	r25, 7
 bf4:	9f 67       	ori	r25, 0x7F	; 127
 bf6:	80 e8       	ldi	r24, 0x80	; 128
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	60 e0       	ldi	r22, 0x00	; 0
 bfc:	08 95       	ret

00000bfe <__fp_nan>:
 bfe:	9f ef       	ldi	r25, 0xFF	; 255
 c00:	80 ec       	ldi	r24, 0xC0	; 192
 c02:	08 95       	ret

00000c04 <__fp_pscA>:
 c04:	00 24       	eor	r0, r0
 c06:	0a 94       	dec	r0
 c08:	16 16       	cp	r1, r22
 c0a:	17 06       	cpc	r1, r23
 c0c:	18 06       	cpc	r1, r24
 c0e:	09 06       	cpc	r0, r25
 c10:	08 95       	ret

00000c12 <__fp_pscB>:
 c12:	00 24       	eor	r0, r0
 c14:	0a 94       	dec	r0
 c16:	12 16       	cp	r1, r18
 c18:	13 06       	cpc	r1, r19
 c1a:	14 06       	cpc	r1, r20
 c1c:	05 06       	cpc	r0, r21
 c1e:	08 95       	ret

00000c20 <__fp_round>:
 c20:	09 2e       	mov	r0, r25
 c22:	03 94       	inc	r0
 c24:	00 0c       	add	r0, r0
 c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0xc>
 c28:	88 23       	and	r24, r24
 c2a:	52 f0       	brmi	.+20     	; 0xc40 <__fp_round+0x20>
 c2c:	bb 0f       	add	r27, r27
 c2e:	40 f4       	brcc	.+16     	; 0xc40 <__fp_round+0x20>
 c30:	bf 2b       	or	r27, r31
 c32:	11 f4       	brne	.+4      	; 0xc38 <__fp_round+0x18>
 c34:	60 ff       	sbrs	r22, 0
 c36:	04 c0       	rjmp	.+8      	; 0xc40 <__fp_round+0x20>
 c38:	6f 5f       	subi	r22, 0xFF	; 255
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <__divmodhi4>:
 c42:	97 fb       	bst	r25, 7
 c44:	07 2e       	mov	r0, r23
 c46:	16 f4       	brtc	.+4      	; 0xc4c <__divmodhi4+0xa>
 c48:	00 94       	com	r0
 c4a:	06 d0       	rcall	.+12     	; 0xc58 <__divmodhi4_neg1>
 c4c:	77 fd       	sbrc	r23, 7
 c4e:	08 d0       	rcall	.+16     	; 0xc60 <__divmodhi4_neg2>
 c50:	0b d0       	rcall	.+22     	; 0xc68 <__udivmodhi4>
 c52:	07 fc       	sbrc	r0, 7
 c54:	05 d0       	rcall	.+10     	; 0xc60 <__divmodhi4_neg2>
 c56:	3e f4       	brtc	.+14     	; 0xc66 <__divmodhi4_exit>

00000c58 <__divmodhi4_neg1>:
 c58:	90 95       	com	r25
 c5a:	81 95       	neg	r24
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	08 95       	ret

00000c60 <__divmodhi4_neg2>:
 c60:	70 95       	com	r23
 c62:	61 95       	neg	r22
 c64:	7f 4f       	sbci	r23, 0xFF	; 255

00000c66 <__divmodhi4_exit>:
 c66:	08 95       	ret

00000c68 <__udivmodhi4>:
 c68:	aa 1b       	sub	r26, r26
 c6a:	bb 1b       	sub	r27, r27
 c6c:	51 e1       	ldi	r21, 0x11	; 17
 c6e:	07 c0       	rjmp	.+14     	; 0xc7e <__udivmodhi4_ep>

00000c70 <__udivmodhi4_loop>:
 c70:	aa 1f       	adc	r26, r26
 c72:	bb 1f       	adc	r27, r27
 c74:	a6 17       	cp	r26, r22
 c76:	b7 07       	cpc	r27, r23
 c78:	10 f0       	brcs	.+4      	; 0xc7e <__udivmodhi4_ep>
 c7a:	a6 1b       	sub	r26, r22
 c7c:	b7 0b       	sbc	r27, r23

00000c7e <__udivmodhi4_ep>:
 c7e:	88 1f       	adc	r24, r24
 c80:	99 1f       	adc	r25, r25
 c82:	5a 95       	dec	r21
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__udivmodhi4_loop>
 c86:	80 95       	com	r24
 c88:	90 95       	com	r25
 c8a:	bc 01       	movw	r22, r24
 c8c:	cd 01       	movw	r24, r26
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
