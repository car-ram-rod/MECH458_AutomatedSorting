
LAB5_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000004b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dab  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c20  00000000  00000000  00001333  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c9  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d3  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
   6:	00 00       	nop
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__vector_3>
   e:	00 00       	nop
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
  26:	00 00       	nop
  28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
  36:	00 00       	nop
  38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
  42:	00 00       	nop
  44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
  46:	00 00       	nop
  48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
  52:	00 00       	nop
  54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
  56:	00 00       	nop
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
  66:	00 00       	nop
  68:	27 c0       	rjmp	.+78     	; 0xb8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	25 c0       	rjmp	.+74     	; 0xb8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	23 c0       	rjmp	.+70     	; 0xb8 <__bad_interrupt>
  72:	00 00       	nop
  74:	b5 c0       	rjmp	.+362    	; 0x1e0 <__vector_29>
  76:	00 00       	nop
  78:	1f c0       	rjmp	.+62     	; 0xb8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1d c0       	rjmp	.+58     	; 0xb8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1b c0       	rjmp	.+54     	; 0xb8 <__bad_interrupt>
  82:	00 00       	nop
  84:	19 c0       	rjmp	.+50     	; 0xb8 <__bad_interrupt>
  86:	00 00       	nop
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	15 c0       	rjmp	.+42     	; 0xb8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	13 c0       	rjmp	.+38     	; 0xb8 <__bad_interrupt>
  92:	00 00       	nop
  94:	11 c0       	rjmp	.+34     	; 0xb8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a2 30       	cpi	r26, 0x02	; 2
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	59 d0       	rcall	.+178    	; 0x168 <main>
  b6:	c4 c1       	rjmp	.+904    	; 0x440 <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <setupPWM>:
		PORTB &= 0b11110000; //apply Vcc Brake
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
		oldDirection=d;
	}
	dutyCycle = s*2.55;
	OCR0A = dutyCycle;//set duty cycle
  ba:	bc 01       	movw	r22, r24
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 68       	ori	r24, 0x83	; 131
  c0:	84 bd       	out	0x24, r24	; 36
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	07 2e       	mov	r0, r23
  ca:	00 0c       	add	r0, r0
  cc:	88 0b       	sbc	r24, r24
  ce:	99 0b       	sbc	r25, r25
  d0:	c8 d0       	rcall	.+400    	; 0x262 <__floatsisf>
  d2:	23 e3       	ldi	r18, 0x33	; 51
  d4:	33 e3       	ldi	r19, 0x33	; 51
  d6:	43 e2       	ldi	r20, 0x23	; 35
  d8:	50 e4       	ldi	r21, 0x40	; 64
  da:	27 d1       	rcall	.+590    	; 0x32a <__mulsf3>
  dc:	94 d0       	rcall	.+296    	; 0x206 <__fixunssfsi>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	08 95       	ret

000000e8 <setupISR>:
  e8:	ea 9a       	sbi	0x1d, 2	; 29
  ea:	e9 e6       	ldi	r30, 0x69	; 105
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <setupADC>:
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	8d 68       	ori	r24, 0x8D	; 141
  fe:	80 83       	st	Z, r24
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 66       	ori	r24, 0x61	; 97
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	81 7e       	andi	r24, 0xE1	; 225
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <initTimer1>:
}
void initTimer1 (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	/*set Waveform Generation mode to Clear Timer*/
	/*set WGM bits to 0100*/
	/*note WGM is spread over two registers*/
	TCCR1B |= _BV(WGM12);
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
	/*set Output Compare Register for 1000 cycles (1ms)*/
	OCR1A = 0x03E8;
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 124:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
 128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 12c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 130:	08 95       	ret

00000132 <mTimer>:
}
void mTimer(int count){ // delay microsecond
 132:	ac 01       	movw	r20, r24
	int i = 0; //initialize loop counter
	/*Enable the output compare interrupt enable*/
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: interrupt is enabled by sei(); function
	/*initialize timer 1 to run at CPU clock (1MHz)*/
	TCCR1B |= _BV(CS10);
 134:	e1 e8       	ldi	r30, 0x81	; 129
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 81       	ld	r25, Z
 13a:	91 60       	ori	r25, 0x01	; 1
 13c:	90 83       	st	Z, r25
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
 13e:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 0x03E8;
	/*set the initial value of the Timer rCounter to 0x0000*/
	TCNT1 = 0x0000;
}
void mTimer(int count){ // delay microsecond
	int i = 0; //initialize loop counter
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: interrupt is enabled by sei(); function
	/*initialize timer 1 to run at CPU clock (1MHz)*/
	TCCR1B |= _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
	while (i<count){
 144:	05 c0       	rjmp	.+10     	; 0x150 <mTimer+0x1e>
		if ((TIFR1 & 0x02) == 0x02){
 146:	b1 9b       	sbis	0x16, 1	; 22
 148:	fe cf       	rjmp	.-4      	; 0x146 <mTimer+0x14>
			//clear interrupt flag by WRITING a ONE to the bit
			TIFR1 |= _BV(OCF1A);
 14a:	b1 9a       	sbi	0x16, 1	; 22
			i++; //increment loop counter
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
	//TIMSK1 = TIMSK1 | 0b00000010; // --ODA edit: interrupt is enabled by sei(); function
	/*initialize timer 1 to run at CPU clock (1MHz)*/
	TCCR1B |= _BV(CS10);
	/* Clear the timer interrupt flag and begin timer */
	TIFR1 |= _BV(OCF1A);
	while (i<count){
 150:	24 17       	cp	r18, r20
 152:	35 07       	cpc	r19, r21
 154:	1c f4       	brge	.+6      	; 0x15c <mTimer+0x2a>
		if ((TIFR1 & 0x02) == 0x02){
 156:	b1 9b       	sbis	0x16, 1	; 22
 158:	f6 cf       	rjmp	.-20     	; 0x146 <mTimer+0x14>
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <mTimer+0x18>
			TIFR1 |= _BV(OCF1A);
			i++; //increment loop counter
			/*Timer resets automatically due to WGM settings*/
		} //if end
	}//while end
	TCCR1B &= 0b11111000; //shut off timer 1
 15c:	e1 e8       	ldi	r30, 0x81	; 129
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <main>:
volatile unsigned char ADCResult; //8 bits: 0 => (2^9-1); stores result of ADC conversion
volatile unsigned char ADCResultFlag; //8 bits: 0 => (2^9-1); thats that ADC conversion is complete

/*Beginning of main program*/	
int main(void){
	cli(); //disable all interrupts
 168:	f8 94       	cli
	initTimer1();
 16a:	d3 df       	rcall	.-90     	; 0x112 <initTimer1>
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM
 16c:	8e e1       	ldi	r24, 0x1E	; 30
 16e:	90 e0       	ldi	r25, 0x00	; 0
	setupISR(); //interrupt initializations
 170:	a4 df       	rcall	.-184    	; 0xba <setupPWM>
 172:	ba df       	rcall	.-140    	; 0xe8 <setupISR>
	setupADC(); //ADC initializations
 174:	c0 df       	rcall	.-128    	; 0xf6 <setupADC>
 176:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 178:	84 b9       	out	0x04, r24	; 4
 17a:	87 b9       	out	0x07, r24	; 7
	DDRC = 0xFF; //LEDs Debugging
 17c:	80 ef       	ldi	r24, 0xF0	; 240
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	10 ba       	out	0x10, r1	; 16
	DDRF = 0x00; /*PF1=ADC1 pin*/
 182:	78 94       	sei
	sei(); //enable all interrupts	
 184:	85 b1       	in	r24, 0x05	; 5
	PORTB &= 0b11110000; //apply brake to Vcc
 186:	80 7f       	andi	r24, 0xF0	; 240
 188:	85 b9       	out	0x05, r24	; 5
 18a:	ea e7       	ldi	r30, 0x7A	; 122
	//motorControl(CONVEYOR_SPEED,DC_FORWARD); //start conveyor towards stepper
	ADCSRA |= _BV(ADSC); //initialize the ADC, start one conversion at the beginning
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    while (1){
		if (ADCResultFlag){
 198:	88 23       	and	r24, r24
 19a:	e1 f3       	breq	.-8      	; 0x194 <main+0x2c>
 19c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ADCResult>
			PORTC=ADCResult;
 1a0:	88 b9       	out	0x08, r24	; 8
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			ADCResultFlag=0x00;
			mTimer(10); //--ODA Edit;Does mTimer break with other interrupts engaged?
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	c3 df       	rcall	.-122    	; 0x132 <mTimer>
 1ac:	f3 cf       	rjmp	.-26     	; 0x194 <main+0x2c>

000001ae <__vector_3>:
 1ae:	1f 92       	push	r1
	return;
} //mTimer

/**********INTERRUPT SERVICE ROUTINES**********/
/*sensor 3: 2nt Optical Inductive, Active LOW starts AD conversion*/
ISR(INT2_vect){
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	0b b6       	in	r0, 0x3b	; 59
 1ba:	0f 92       	push	r0
 1bc:	8f 93       	push	r24
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	//when there is a falling edge on PD2, ADC is triggered which is currently ADC1 (PF1)
	ADCSRA |= _BV(ADSC);
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0b be       	out	0x3b, r0	; 59
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__vector_29>:
ISR(ADC_vect){
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	8f 93       	push	r24
	ADCResult = ADCH;
 1ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADCResult>
	ADCResultFlag = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__fixunssfsi>:
 206:	70 d0       	rcall	.+224    	; 0x2e8 <__fp_splitA>
 208:	88 f0       	brcs	.+34     	; 0x22c <__fixunssfsi+0x26>
 20a:	9f 57       	subi	r25, 0x7F	; 127
 20c:	90 f0       	brcs	.+36     	; 0x232 <__fixunssfsi+0x2c>
 20e:	b9 2f       	mov	r27, r25
 210:	99 27       	eor	r25, r25
 212:	b7 51       	subi	r27, 0x17	; 23
 214:	a0 f0       	brcs	.+40     	; 0x23e <__fixunssfsi+0x38>
 216:	d1 f0       	breq	.+52     	; 0x24c <__fixunssfsi+0x46>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	1a f0       	brmi	.+6      	; 0x228 <__fixunssfsi+0x22>
 222:	ba 95       	dec	r27
 224:	c9 f7       	brne	.-14     	; 0x218 <__fixunssfsi+0x12>
 226:	12 c0       	rjmp	.+36     	; 0x24c <__fixunssfsi+0x46>
 228:	b1 30       	cpi	r27, 0x01	; 1
 22a:	81 f0       	breq	.+32     	; 0x24c <__fixunssfsi+0x46>
 22c:	77 d0       	rcall	.+238    	; 0x31c <__fp_zero>
 22e:	b1 e0       	ldi	r27, 0x01	; 1
 230:	08 95       	ret
 232:	74 c0       	rjmp	.+232    	; 0x31c <__fp_zero>
 234:	67 2f       	mov	r22, r23
 236:	78 2f       	mov	r23, r24
 238:	88 27       	eor	r24, r24
 23a:	b8 5f       	subi	r27, 0xF8	; 248
 23c:	39 f0       	breq	.+14     	; 0x24c <__fixunssfsi+0x46>
 23e:	b9 3f       	cpi	r27, 0xF9	; 249
 240:	cc f3       	brlt	.-14     	; 0x234 <__fixunssfsi+0x2e>
 242:	86 95       	lsr	r24
 244:	77 95       	ror	r23
 246:	67 95       	ror	r22
 248:	b3 95       	inc	r27
 24a:	d9 f7       	brne	.-10     	; 0x242 <__fixunssfsi+0x3c>
 24c:	3e f4       	brtc	.+14     	; 0x25c <__fixunssfsi+0x56>
 24e:	90 95       	com	r25
 250:	80 95       	com	r24
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255
 258:	8f 4f       	sbci	r24, 0xFF	; 255
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	08 95       	ret

0000025e <__floatunsisf>:
 25e:	e8 94       	clt
 260:	09 c0       	rjmp	.+18     	; 0x274 <__floatsisf+0x12>

00000262 <__floatsisf>:
 262:	97 fb       	bst	r25, 7
 264:	3e f4       	brtc	.+14     	; 0x274 <__floatsisf+0x12>
 266:	90 95       	com	r25
 268:	80 95       	com	r24
 26a:	70 95       	com	r23
 26c:	61 95       	neg	r22
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	8f 4f       	sbci	r24, 0xFF	; 255
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	99 23       	and	r25, r25
 276:	a9 f0       	breq	.+42     	; 0x2a2 <__floatsisf+0x40>
 278:	f9 2f       	mov	r31, r25
 27a:	96 e9       	ldi	r25, 0x96	; 150
 27c:	bb 27       	eor	r27, r27
 27e:	93 95       	inc	r25
 280:	f6 95       	lsr	r31
 282:	87 95       	ror	r24
 284:	77 95       	ror	r23
 286:	67 95       	ror	r22
 288:	b7 95       	ror	r27
 28a:	f1 11       	cpse	r31, r1
 28c:	f8 cf       	rjmp	.-16     	; 0x27e <__floatsisf+0x1c>
 28e:	fa f4       	brpl	.+62     	; 0x2ce <__floatsisf+0x6c>
 290:	bb 0f       	add	r27, r27
 292:	11 f4       	brne	.+4      	; 0x298 <__floatsisf+0x36>
 294:	60 ff       	sbrs	r22, 0
 296:	1b c0       	rjmp	.+54     	; 0x2ce <__floatsisf+0x6c>
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	8f 4f       	sbci	r24, 0xFF	; 255
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	16 c0       	rjmp	.+44     	; 0x2ce <__floatsisf+0x6c>
 2a2:	88 23       	and	r24, r24
 2a4:	11 f0       	breq	.+4      	; 0x2aa <__floatsisf+0x48>
 2a6:	96 e9       	ldi	r25, 0x96	; 150
 2a8:	11 c0       	rjmp	.+34     	; 0x2cc <__floatsisf+0x6a>
 2aa:	77 23       	and	r23, r23
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <__floatsisf+0x54>
 2ae:	9e e8       	ldi	r25, 0x8E	; 142
 2b0:	87 2f       	mov	r24, r23
 2b2:	76 2f       	mov	r23, r22
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <__floatsisf+0x5e>
 2b6:	66 23       	and	r22, r22
 2b8:	71 f0       	breq	.+28     	; 0x2d6 <__floatsisf+0x74>
 2ba:	96 e8       	ldi	r25, 0x86	; 134
 2bc:	86 2f       	mov	r24, r22
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	2a f0       	brmi	.+10     	; 0x2ce <__floatsisf+0x6c>
 2c4:	9a 95       	dec	r25
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	88 1f       	adc	r24, r24
 2cc:	da f7       	brpl	.-10     	; 0x2c4 <__floatsisf+0x62>
 2ce:	88 0f       	add	r24, r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	97 f9       	bld	r25, 7
 2d6:	08 95       	ret

000002d8 <__fp_split3>:
 2d8:	57 fd       	sbrc	r21, 7
 2da:	90 58       	subi	r25, 0x80	; 128
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <__fp_splitA+0x10>
 2e2:	5f 3f       	cpi	r21, 0xFF	; 255
 2e4:	71 f0       	breq	.+28     	; 0x302 <__fp_splitA+0x1a>
 2e6:	47 95       	ror	r20

000002e8 <__fp_splitA>:
 2e8:	88 0f       	add	r24, r24
 2ea:	97 fb       	bst	r25, 7
 2ec:	99 1f       	adc	r25, r25
 2ee:	61 f0       	breq	.+24     	; 0x308 <__fp_splitA+0x20>
 2f0:	9f 3f       	cpi	r25, 0xFF	; 255
 2f2:	79 f0       	breq	.+30     	; 0x312 <__fp_splitA+0x2a>
 2f4:	87 95       	ror	r24
 2f6:	08 95       	ret
 2f8:	12 16       	cp	r1, r18
 2fa:	13 06       	cpc	r1, r19
 2fc:	14 06       	cpc	r1, r20
 2fe:	55 1f       	adc	r21, r21
 300:	f2 cf       	rjmp	.-28     	; 0x2e6 <__fp_split3+0xe>
 302:	46 95       	lsr	r20
 304:	f1 df       	rcall	.-30     	; 0x2e8 <__fp_splitA>
 306:	08 c0       	rjmp	.+16     	; 0x318 <__fp_splitA+0x30>
 308:	16 16       	cp	r1, r22
 30a:	17 06       	cpc	r1, r23
 30c:	18 06       	cpc	r1, r24
 30e:	99 1f       	adc	r25, r25
 310:	f1 cf       	rjmp	.-30     	; 0x2f4 <__fp_splitA+0xc>
 312:	86 95       	lsr	r24
 314:	71 05       	cpc	r23, r1
 316:	61 05       	cpc	r22, r1
 318:	08 94       	sec
 31a:	08 95       	ret

0000031c <__fp_zero>:
 31c:	e8 94       	clt

0000031e <__fp_szero>:
 31e:	bb 27       	eor	r27, r27
 320:	66 27       	eor	r22, r22
 322:	77 27       	eor	r23, r23
 324:	cb 01       	movw	r24, r22
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__mulsf3>:
 32a:	0b d0       	rcall	.+22     	; 0x342 <__mulsf3x>
 32c:	78 c0       	rjmp	.+240    	; 0x41e <__fp_round>
 32e:	69 d0       	rcall	.+210    	; 0x402 <__fp_pscA>
 330:	28 f0       	brcs	.+10     	; 0x33c <__mulsf3+0x12>
 332:	6e d0       	rcall	.+220    	; 0x410 <__fp_pscB>
 334:	18 f0       	brcs	.+6      	; 0x33c <__mulsf3+0x12>
 336:	95 23       	and	r25, r21
 338:	09 f0       	breq	.+2      	; 0x33c <__mulsf3+0x12>
 33a:	5a c0       	rjmp	.+180    	; 0x3f0 <__fp_inf>
 33c:	5f c0       	rjmp	.+190    	; 0x3fc <__fp_nan>
 33e:	11 24       	eor	r1, r1
 340:	ee cf       	rjmp	.-36     	; 0x31e <__fp_szero>

00000342 <__mulsf3x>:
 342:	ca df       	rcall	.-108    	; 0x2d8 <__fp_split3>
 344:	a0 f3       	brcs	.-24     	; 0x32e <__mulsf3+0x4>

00000346 <__mulsf3_pse>:
 346:	95 9f       	mul	r25, r21
 348:	d1 f3       	breq	.-12     	; 0x33e <__mulsf3+0x14>
 34a:	95 0f       	add	r25, r21
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	55 1f       	adc	r21, r21
 350:	62 9f       	mul	r22, r18
 352:	f0 01       	movw	r30, r0
 354:	72 9f       	mul	r23, r18
 356:	bb 27       	eor	r27, r27
 358:	f0 0d       	add	r31, r0
 35a:	b1 1d       	adc	r27, r1
 35c:	63 9f       	mul	r22, r19
 35e:	aa 27       	eor	r26, r26
 360:	f0 0d       	add	r31, r0
 362:	b1 1d       	adc	r27, r1
 364:	aa 1f       	adc	r26, r26
 366:	64 9f       	mul	r22, r20
 368:	66 27       	eor	r22, r22
 36a:	b0 0d       	add	r27, r0
 36c:	a1 1d       	adc	r26, r1
 36e:	66 1f       	adc	r22, r22
 370:	82 9f       	mul	r24, r18
 372:	22 27       	eor	r18, r18
 374:	b0 0d       	add	r27, r0
 376:	a1 1d       	adc	r26, r1
 378:	62 1f       	adc	r22, r18
 37a:	73 9f       	mul	r23, r19
 37c:	b0 0d       	add	r27, r0
 37e:	a1 1d       	adc	r26, r1
 380:	62 1f       	adc	r22, r18
 382:	83 9f       	mul	r24, r19
 384:	a0 0d       	add	r26, r0
 386:	61 1d       	adc	r22, r1
 388:	22 1f       	adc	r18, r18
 38a:	74 9f       	mul	r23, r20
 38c:	33 27       	eor	r19, r19
 38e:	a0 0d       	add	r26, r0
 390:	61 1d       	adc	r22, r1
 392:	23 1f       	adc	r18, r19
 394:	84 9f       	mul	r24, r20
 396:	60 0d       	add	r22, r0
 398:	21 1d       	adc	r18, r1
 39a:	82 2f       	mov	r24, r18
 39c:	76 2f       	mov	r23, r22
 39e:	6a 2f       	mov	r22, r26
 3a0:	11 24       	eor	r1, r1
 3a2:	9f 57       	subi	r25, 0x7F	; 127
 3a4:	50 40       	sbci	r21, 0x00	; 0
 3a6:	8a f0       	brmi	.+34     	; 0x3ca <__mulsf3_pse+0x84>
 3a8:	e1 f0       	breq	.+56     	; 0x3e2 <__mulsf3_pse+0x9c>
 3aa:	88 23       	and	r24, r24
 3ac:	4a f0       	brmi	.+18     	; 0x3c0 <__mulsf3_pse+0x7a>
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	bb 1f       	adc	r27, r27
 3b4:	66 1f       	adc	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	50 40       	sbci	r21, 0x00	; 0
 3be:	a9 f7       	brne	.-22     	; 0x3aa <__mulsf3_pse+0x64>
 3c0:	9e 3f       	cpi	r25, 0xFE	; 254
 3c2:	51 05       	cpc	r21, r1
 3c4:	70 f0       	brcs	.+28     	; 0x3e2 <__mulsf3_pse+0x9c>
 3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <__fp_inf>
 3c8:	aa cf       	rjmp	.-172    	; 0x31e <__fp_szero>
 3ca:	5f 3f       	cpi	r21, 0xFF	; 255
 3cc:	ec f3       	brlt	.-6      	; 0x3c8 <__mulsf3_pse+0x82>
 3ce:	98 3e       	cpi	r25, 0xE8	; 232
 3d0:	dc f3       	brlt	.-10     	; 0x3c8 <__mulsf3_pse+0x82>
 3d2:	86 95       	lsr	r24
 3d4:	77 95       	ror	r23
 3d6:	67 95       	ror	r22
 3d8:	b7 95       	ror	r27
 3da:	f7 95       	ror	r31
 3dc:	e7 95       	ror	r30
 3de:	9f 5f       	subi	r25, 0xFF	; 255
 3e0:	c1 f7       	brne	.-16     	; 0x3d2 <__mulsf3_pse+0x8c>
 3e2:	fe 2b       	or	r31, r30
 3e4:	88 0f       	add	r24, r24
 3e6:	91 1d       	adc	r25, r1
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	97 f9       	bld	r25, 7
 3ee:	08 95       	ret

000003f0 <__fp_inf>:
 3f0:	97 f9       	bld	r25, 7
 3f2:	9f 67       	ori	r25, 0x7F	; 127
 3f4:	80 e8       	ldi	r24, 0x80	; 128
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	08 95       	ret

000003fc <__fp_nan>:
 3fc:	9f ef       	ldi	r25, 0xFF	; 255
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	08 95       	ret

00000402 <__fp_pscA>:
 402:	00 24       	eor	r0, r0
 404:	0a 94       	dec	r0
 406:	16 16       	cp	r1, r22
 408:	17 06       	cpc	r1, r23
 40a:	18 06       	cpc	r1, r24
 40c:	09 06       	cpc	r0, r25
 40e:	08 95       	ret

00000410 <__fp_pscB>:
 410:	00 24       	eor	r0, r0
 412:	0a 94       	dec	r0
 414:	12 16       	cp	r1, r18
 416:	13 06       	cpc	r1, r19
 418:	14 06       	cpc	r1, r20
 41a:	05 06       	cpc	r0, r21
 41c:	08 95       	ret

0000041e <__fp_round>:
 41e:	09 2e       	mov	r0, r25
 420:	03 94       	inc	r0
 422:	00 0c       	add	r0, r0
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0xc>
 426:	88 23       	and	r24, r24
 428:	52 f0       	brmi	.+20     	; 0x43e <__fp_round+0x20>
 42a:	bb 0f       	add	r27, r27
 42c:	40 f4       	brcc	.+16     	; 0x43e <__fp_round+0x20>
 42e:	bf 2b       	or	r27, r31
 430:	11 f4       	brne	.+4      	; 0x436 <__fp_round+0x18>
 432:	60 ff       	sbrs	r22, 0
 434:	04 c0       	rjmp	.+8      	; 0x43e <__fp_round+0x20>
 436:	6f 5f       	subi	r22, 0xFF	; 255
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
