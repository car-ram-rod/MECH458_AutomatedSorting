
SORTING_PROJECT_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000021a2  00002236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005aa  00800182  00800182  000022b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bb2  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001126  00000000  00000000  00006126  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c8  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000071c  00000000  00000000  00008a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c37  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b8  00000000  00000000  00009d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000c01f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c9 c2       	rjmp	.+1426   	; 0x594 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_1>
       8:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_2>
       c:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_3>
      10:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_4>
      14:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__vector_5>
      18:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_6>
      1c:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_7>
      20:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__vector_8>
      24:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_9>
      28:	d3 c2       	rjmp	.+1446   	; 0x5d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	d1 c2       	rjmp	.+1442   	; 0x5d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cf c2       	rjmp	.+1438   	; 0x5d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	cd c2       	rjmp	.+1434   	; 0x5d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	cb c2       	rjmp	.+1430   	; 0x5d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c9 c2       	rjmp	.+1426   	; 0x5d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c7 c2       	rjmp	.+1422   	; 0x5d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	c5 c2       	rjmp	.+1418   	; 0x5d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	c3 c2       	rjmp	.+1414   	; 0x5d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c1 c2       	rjmp	.+1410   	; 0x5d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bf c2       	rjmp	.+1406   	; 0x5d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	bd c2       	rjmp	.+1402   	; 0x5d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	bb c2       	rjmp	.+1398   	; 0x5d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b9 c2       	rjmp	.+1394   	; 0x5d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b7 c2       	rjmp	.+1390   	; 0x5d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	b5 c2       	rjmp	.+1386   	; 0x5d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	b3 c2       	rjmp	.+1382   	; 0x5d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b1 c2       	rjmp	.+1378   	; 0x5d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	af c2       	rjmp	.+1374   	; 0x5d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_29>
      78:	ab c2       	rjmp	.+1366   	; 0x5d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a9 c2       	rjmp	.+1362   	; 0x5d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a7 c2       	rjmp	.+1358   	; 0x5d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	a5 c2       	rjmp	.+1354   	; 0x5d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	a3 c2       	rjmp	.+1350   	; 0x5d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a1 c2       	rjmp	.+1346   	; 0x5d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9f c2       	rjmp	.+1342   	; 0x5d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	9d c2       	rjmp	.+1338   	; 0x5d0 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7564>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	aa 00       	.word	0x00aa	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	aa aa       	std	Y+50, r10	; 0x32
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	00 00       	nop
     414:	00 ff       	sbrs	r16, 0
     416:	00 10       	cpse	r0, r0
     418:	10 10       	cpse	r1, r0
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	14 14       	cp	r1, r4
     41e:	14 ff       	sbrs	r17, 4
     420:	00 10       	cpse	r0, r0
     422:	10 ff       	sbrs	r17, 0
     424:	00 ff       	sbrs	r16, 0
     426:	10 10       	cpse	r1, r0
     428:	f0 10       	cpse	r15, r0
     42a:	f0 14       	cp	r15, r0
     42c:	14 14       	cp	r1, r4
     42e:	fc 00       	.word	0x00fc	; ????
     430:	14 14       	cp	r1, r4
     432:	f7 00       	.word	0x00f7	; ????
     434:	ff 00       	.word	0x00ff	; ????
     436:	00 ff       	sbrs	r16, 0
     438:	00 ff       	sbrs	r16, 0
     43a:	14 14       	cp	r1, r4
     43c:	f4 04       	cpc	r15, r4
     43e:	fc 14       	cp	r15, r12
     440:	14 17       	cp	r17, r20
     442:	10 1f       	adc	r17, r16
     444:	10 10       	cpse	r1, r0
     446:	1f 10       	cpse	r1, r15
     448:	1f 14       	cp	r1, r15
     44a:	14 14       	cp	r1, r4
     44c:	1f 00       	.word	0x001f	; ????
     44e:	10 10       	cpse	r1, r0
     450:	10 f0       	brcs	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     452:	00 00       	nop
     454:	00 00       	nop
     456:	1f 10       	cpse	r1, r15
     458:	10 10       	cpse	r1, r0
     45a:	10 1f       	adc	r17, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	f0 10       	cpse	r15, r0
     462:	00 00       	nop
     464:	00 ff       	sbrs	r16, 0
     466:	10 10       	cpse	r1, r0
     468:	10 10       	cpse	r1, r0
     46a:	10 10       	cpse	r1, r0
     46c:	10 10       	cpse	r1, r0
     46e:	10 ff       	sbrs	r17, 0
     470:	10 00       	.word	0x0010	; ????
     472:	00 00       	nop
     474:	ff 14       	cp	r15, r15
     476:	00 00       	nop
     478:	ff 00       	.word	0x00ff	; ????
     47a:	ff 00       	.word	0x00ff	; ????
     47c:	00 1f       	adc	r16, r16
     47e:	10 17       	cp	r17, r16
     480:	00 00       	nop
     482:	fc 04       	cpc	r15, r12
     484:	f4 14       	cp	r15, r4
     486:	14 17       	cp	r17, r20
     488:	10 17       	cp	r17, r16
     48a:	14 14       	cp	r1, r4
     48c:	f4 04       	cpc	r15, r4
     48e:	f4 00       	.word	0x00f4	; ????
     490:	00 ff       	sbrs	r16, 0
     492:	00 f7       	brcc	.-64     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     494:	14 14       	cp	r1, r4
     496:	14 14       	cp	r1, r4
     498:	14 14       	cp	r1, r4
     49a:	14 f7       	brge	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     49c:	00 f7       	brcc	.-64     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     49e:	14 14       	cp	r1, r4
     4a0:	14 17       	cp	r17, r20
     4a2:	14 10       	cpse	r1, r4
     4a4:	10 1f       	adc	r17, r16
     4a6:	10 1f       	adc	r17, r16
     4a8:	14 14       	cp	r1, r4
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4ac:	14 10       	cpse	r1, r4
     4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	00 00       	nop
     4b4:	1f 10       	cpse	r1, r15
     4b6:	1f 00       	.word	0x001f	; ????
     4b8:	00 00       	nop
     4ba:	1f 14       	cp	r1, r15
     4bc:	00 00       	nop
     4be:	00 fc       	sbrc	r0, 0
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c4:	10 f0       	brcs	.+4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c6:	10 10       	cpse	r1, r0
     4c8:	ff 10       	cpse	r15, r15
     4ca:	ff 14       	cp	r15, r15
     4cc:	14 14       	cp	r1, r4
     4ce:	ff 14       	cp	r15, r15
     4d0:	10 10       	cpse	r1, r0
     4d2:	10 1f       	adc	r17, r16
     4d4:	00 00       	nop
     4d6:	00 00       	nop
     4d8:	f0 10       	cpse	r15, r0
     4da:	ff ff       	.word	0xffff	; ????
     4dc:	ff ff       	.word	0xffff	; ????
     4de:	ff f0       	brie	.+62     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     4e2:	f0 f0       	brcs	.+60     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     4e4:	ff ff       	.word	0xffff	; ????
     4e6:	ff 00       	.word	0x00ff	; ????
     4e8:	00 00       	nop
     4ea:	00 00       	nop
     4ec:	ff ff       	.word	0xffff	; ????
     4ee:	0f 0f       	add	r16, r31
     4f0:	0f 0f       	add	r16, r31
     4f2:	0f 38       	cpi	r16, 0x8F	; 143
     4f4:	44 44       	sbci	r20, 0x44	; 68
     4f6:	38 44       	sbci	r19, 0x48	; 72
     4f8:	fc 4a       	sbci	r31, 0xAC	; 172
     4fa:	4a 4a       	sbci	r20, 0xAA	; 170
     4fc:	34 7e       	andi	r19, 0xE4	; 228
     4fe:	02 02       	muls	r16, r18
     500:	06 06       	cpc	r0, r22
     502:	02 7e       	andi	r16, 0xE2	; 226
     504:	02 7e       	andi	r16, 0xE2	; 226
     506:	02 63       	ori	r16, 0x32	; 50
     508:	55 49       	sbci	r21, 0x95	; 149
     50a:	41 63       	ori	r20, 0x31	; 49
     50c:	38 44       	sbci	r19, 0x48	; 72
     50e:	44 3c       	cpi	r20, 0xC4	; 196
     510:	04 40       	sbci	r16, 0x04	; 4
     512:	7e 20       	and	r7, r14
     514:	1e 20       	and	r1, r14
     516:	06 02       	muls	r16, r22
     518:	7e 02       	muls	r23, r30
     51a:	02 99       	sbic	0x00, 2	; 0
     51c:	a5 e7       	ldi	r26, 0x75	; 117
     51e:	a5 99       	sbic	0x14, 5	; 20
     520:	1c 2a       	or	r1, r28
     522:	49 2a       	or	r4, r25
     524:	1c 4c       	sbci	r17, 0xCC	; 204
     526:	72 01       	movw	r14, r4
     528:	72 4c       	sbci	r23, 0xC2	; 194
     52a:	30 4a       	sbci	r19, 0xA0	; 160
     52c:	4d 4d       	sbci	r20, 0xDD	; 221
     52e:	30 30       	cpi	r19, 0x00	; 0
     530:	48 78       	andi	r20, 0x88	; 136
     532:	48 30       	cpi	r20, 0x08	; 8
     534:	bc 62       	ori	r27, 0x2C	; 44
     536:	5a 46       	sbci	r21, 0x6A	; 106
     538:	3d 3e       	cpi	r19, 0xED	; 237
     53a:	49 49       	sbci	r20, 0x99	; 153
     53c:	49 00       	.word	0x0049	; ????
     53e:	7e 01       	movw	r14, r28
     540:	01 01       	movw	r0, r2
     542:	7e 2a       	or	r7, r30
     544:	2a 2a       	or	r2, r26
     546:	2a 2a       	or	r2, r26
     548:	44 44       	sbci	r20, 0x44	; 68
     54a:	5f 44       	sbci	r21, 0x4F	; 79
     54c:	44 40       	sbci	r20, 0x04	; 4
     54e:	51 4a       	sbci	r21, 0xA1	; 161
     550:	44 40       	sbci	r20, 0x04	; 4
     552:	40 44       	sbci	r20, 0x40	; 64
     554:	4a 51       	subi	r20, 0x1A	; 26
     556:	40 00       	.word	0x0040	; ????
     558:	00 ff       	sbrs	r16, 0
     55a:	01 03       	mulsu	r16, r17
     55c:	e0 80       	ld	r14, Z
     55e:	ff 00       	.word	0x00ff	; ????
     560:	00 08       	sbc	r0, r0
     562:	08 6b       	ori	r16, 0xB8	; 184
     564:	6b 08       	sbc	r6, r11
     566:	36 12       	cpse	r3, r22
     568:	36 24       	eor	r3, r6
     56a:	36 06       	cpc	r3, r22
     56c:	0f 09       	sbc	r16, r15
     56e:	0f 06       	cpc	r0, r31
     570:	00 00       	nop
     572:	18 18       	sub	r1, r8
     574:	00 00       	nop
     576:	00 10       	cpse	r0, r0
     578:	10 00       	.word	0x0010	; ????
     57a:	30 40       	sbci	r19, 0x00	; 0
     57c:	ff 01       	movw	r30, r30
     57e:	01 00       	.word	0x0001	; ????
     580:	1f 01       	movw	r2, r30
     582:	01 1e       	adc	r0, r17
     584:	00 19       	sub	r16, r0
     586:	1d 17       	cp	r17, r29
     588:	12 00       	.word	0x0012	; ????
     58a:	3c 3c       	cpi	r19, 0xCC	; 204
     58c:	3c 3c       	cpi	r19, 0xCC	; 204
     58e:	00 00       	nop
     590:	00 00       	nop
	...

00000594 <__ctors_end>:
     594:	11 24       	eor	r1, r1
     596:	1f be       	out	0x3f, r1	; 63
     598:	cf ef       	ldi	r28, 0xFF	; 255
     59a:	d0 e2       	ldi	r29, 0x20	; 32
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	cd bf       	out	0x3d, r28	; 61

000005a0 <__do_copy_data>:
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	a0 e0       	ldi	r26, 0x00	; 0
     5a4:	b1 e0       	ldi	r27, 0x01	; 1
     5a6:	e2 ea       	ldi	r30, 0xA2	; 162
     5a8:	f1 e2       	ldi	r31, 0x21	; 33
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	0b bf       	out	0x3b, r16	; 59
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <__do_copy_data+0x14>
     5b0:	07 90       	elpm	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	a2 38       	cpi	r26, 0x82	; 130
     5b6:	b1 07       	cpc	r27, r17
     5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__do_copy_data+0x10>

000005ba <__do_clear_bss>:
     5ba:	27 e0       	ldi	r18, 0x07	; 7
     5bc:	a2 e8       	ldi	r26, 0x82	; 130
     5be:	b1 e0       	ldi	r27, 0x01	; 1
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <.do_clear_bss_start>

000005c2 <.do_clear_bss_loop>:
     5c2:	1d 92       	st	X+, r1

000005c4 <.do_clear_bss_start>:
     5c4:	ac 32       	cpi	r26, 0x2C	; 44
     5c6:	b2 07       	cpc	r27, r18
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <.do_clear_bss_loop>
     5ca:	d9 d4       	rcall	.+2482   	; 0xf7e <main>
     5cc:	0c 94 cf 10 	jmp	0x219e	; 0x219e <_exit>

000005d0 <__bad_interrupt>:
     5d0:	17 cd       	rjmp	.-1490   	; 0x0 <__vectors>

000005d2 <drawPixel>:
     5d2:	88 23       	and	r24, r24
     5d4:	d4 f0       	brlt	.+52     	; 0x60a <drawPixel+0x38>
     5d6:	60 34       	cpi	r22, 0x40	; 64
     5d8:	c0 f4       	brcc	.+48     	; 0x60a <drawPixel+0x38>
     5da:	96 2f       	mov	r25, r22
     5dc:	96 95       	lsr	r25
     5de:	96 95       	lsr	r25
     5e0:	96 95       	lsr	r25
     5e2:	e8 2f       	mov	r30, r24
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 e8       	ldi	r24, 0x80	; 128
     5e8:	98 9f       	mul	r25, r24
     5ea:	e0 0d       	add	r30, r0
     5ec:	f1 1d       	adc	r31, r1
     5ee:	11 24       	eor	r1, r1
     5f0:	ee 57       	subi	r30, 0x7E	; 126
     5f2:	fe 4f       	sbci	r31, 0xFE	; 254
     5f4:	67 70       	andi	r22, 0x07	; 7
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <drawPixel+0x2e>
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	6a 95       	dec	r22
     602:	e2 f7       	brpl	.-8      	; 0x5fc <drawPixel+0x2a>
     604:	90 81       	ld	r25, Z
     606:	89 2b       	or	r24, r25
     608:	80 83       	st	Z, r24
     60a:	08 95       	ret

0000060c <drawVLine>:
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	44 23       	and	r20, r20
     614:	51 f0       	breq	.+20     	; 0x62a <drawVLine+0x1e>
     616:	c6 2f       	mov	r28, r22
     618:	18 2f       	mov	r17, r24
     61a:	d4 2f       	mov	r29, r20
     61c:	d6 0f       	add	r29, r22
     61e:	6c 2f       	mov	r22, r28
     620:	81 2f       	mov	r24, r17
     622:	d7 df       	rcall	.-82     	; 0x5d2 <drawPixel>
     624:	cf 5f       	subi	r28, 0xFF	; 255
     626:	cd 13       	cpse	r28, r29
     628:	fa cf       	rjmp	.-12     	; 0x61e <drawVLine+0x12>
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	08 95       	ret

00000632 <drawHLine>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	44 23       	and	r20, r20
     63c:	79 f0       	breq	.+30     	; 0x65c <drawHLine+0x2a>
     63e:	16 2f       	mov	r17, r22
     640:	c8 2f       	mov	r28, r24
     642:	d4 2f       	mov	r29, r20
     644:	d8 0f       	add	r29, r24
     646:	01 e0       	ldi	r16, 0x01	; 1
     648:	06 0f       	add	r16, r22
     64a:	61 2f       	mov	r22, r17
     64c:	8c 2f       	mov	r24, r28
     64e:	c1 df       	rcall	.-126    	; 0x5d2 <drawPixel>
     650:	60 2f       	mov	r22, r16
     652:	8c 2f       	mov	r24, r28
     654:	be df       	rcall	.-132    	; 0x5d2 <drawPixel>
     656:	cf 5f       	subi	r28, 0xFF	; 255
     658:	cd 13       	cpse	r28, r29
     65a:	f7 cf       	rjmp	.-18     	; 0x64a <drawHLine+0x18>
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	08 95       	ret

00000666 <drawRectangle>:
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	d8 2f       	mov	r29, r24
     674:	c6 2f       	mov	r28, r22
     676:	04 2f       	mov	r16, r20
     678:	e2 2e       	mov	r14, r18
     67a:	14 2f       	mov	r17, r20
     67c:	18 1b       	sub	r17, r24
     67e:	1f 5f       	subi	r17, 0xFF	; 255
     680:	f2 2e       	mov	r15, r18
     682:	f6 1a       	sub	r15, r22
     684:	41 2f       	mov	r20, r17
     686:	d5 df       	rcall	.-86     	; 0x632 <drawHLine>
     688:	41 2f       	mov	r20, r17
     68a:	6e 2d       	mov	r22, r14
     68c:	8d 2f       	mov	r24, r29
     68e:	d1 df       	rcall	.-94     	; 0x632 <drawHLine>
     690:	4f 2d       	mov	r20, r15
     692:	6c 2f       	mov	r22, r28
     694:	8d 2f       	mov	r24, r29
     696:	ba df       	rcall	.-140    	; 0x60c <drawVLine>
     698:	4f 2d       	mov	r20, r15
     69a:	6c 2f       	mov	r22, r28
     69c:	80 2f       	mov	r24, r16
     69e:	b6 df       	rcall	.-148    	; 0x60c <drawVLine>
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	08 95       	ret

000006ae <drawRectangleFilled>:
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	96 2e       	mov	r9, r22
     6c6:	01 11       	cpse	r16, r1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <drawRectangleFilled+0x20>
     6ca:	cd df       	rcall	.-102    	; 0x666 <drawRectangle>
     6cc:	22 c0       	rjmp	.+68     	; 0x712 <drawRectangleFilled+0x64>
     6ce:	26 1b       	sub	r18, r22
     6d0:	4f 5f       	subi	r20, 0xFF	; 255
     6d2:	48 1b       	sub	r20, r24
     6d4:	c4 2e       	mov	r12, r20
     6d6:	d1 2c       	mov	r13, r1
     6d8:	1c 14       	cp	r1, r12
     6da:	1d 04       	cpc	r1, r13
     6dc:	8c f0       	brlt	.+34     	; 0x700 <drawRectangleFilled+0x52>
     6de:	19 c0       	rjmp	.+50     	; 0x712 <drawRectangleFilled+0x64>
     6e0:	61 2f       	mov	r22, r17
     6e2:	80 2f       	mov	r24, r16
     6e4:	76 df       	rcall	.-276    	; 0x5d2 <drawPixel>
     6e6:	21 96       	adiw	r28, 0x01	; 1
     6e8:	1f 5f       	subi	r17, 0xFF	; 255
     6ea:	ec 16       	cp	r14, r28
     6ec:	fd 06       	cpc	r15, r29
     6ee:	c4 f7       	brge	.-16     	; 0x6e0 <drawRectangleFilled+0x32>
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	a8 1a       	sub	r10, r24
     6f4:	b8 0a       	sbc	r11, r24
     6f6:	0f 5f       	subi	r16, 0xFF	; 255
     6f8:	ac 14       	cp	r10, r12
     6fa:	bd 04       	cpc	r11, r13
     6fc:	31 f4       	brne	.+12     	; 0x70a <drawRectangleFilled+0x5c>
     6fe:	09 c0       	rjmp	.+18     	; 0x712 <drawRectangleFilled+0x64>
     700:	08 2f       	mov	r16, r24
     702:	a1 2c       	mov	r10, r1
     704:	b1 2c       	mov	r11, r1
     706:	e2 2e       	mov	r14, r18
     708:	f1 2c       	mov	r15, r1
     70a:	19 2d       	mov	r17, r9
     70c:	c0 e0       	ldi	r28, 0x00	; 0
     70e:	d0 e0       	ldi	r29, 0x00	; 0
     710:	e7 cf       	rjmp	.-50     	; 0x6e0 <drawRectangleFilled+0x32>
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	cf 90       	pop	r12
     722:	bf 90       	pop	r11
     724:	af 90       	pop	r10
     726:	9f 90       	pop	r9
     728:	08 95       	ret

0000072a <clear>:
     72a:	e2 e8       	ldi	r30, 0x82	; 130
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	82 e8       	ldi	r24, 0x82	; 130
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	11 92       	st	Z+, r1
     734:	e8 17       	cp	r30, r24
     736:	f9 07       	cpc	r31, r25
     738:	e1 f7       	brne	.-8      	; 0x732 <clear+0x8>
     73a:	08 95       	ret

0000073c <show>:
     73c:	82 e8       	ldi	r24, 0x82	; 130
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <sendFramebuffer>
     744:	08 95       	ret

00000746 <drawChar>:
     746:	2f 92       	push	r2
     748:	3f 92       	push	r3
     74a:	4f 92       	push	r4
     74c:	5f 92       	push	r5
     74e:	6f 92       	push	r6
     750:	7f 92       	push	r7
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	56 2e       	mov	r5, r22
     76c:	59 01       	movw	r10, r18
     76e:	48 01       	movw	r8, r16
     770:	de 2d       	mov	r29, r14
     772:	38 2e       	mov	r3, r24
     774:	4e 2c       	mov	r4, r14
     776:	48 0e       	add	r4, r24
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	6a 01       	movw	r12, r20
     77c:	cc 0c       	add	r12, r12
     77e:	dd 1c       	adc	r13, r13
     780:	cc 0c       	add	r12, r12
     782:	dd 1c       	adc	r13, r13
     784:	4c 0d       	add	r20, r12
     786:	5d 1d       	adc	r21, r13
     788:	9a 01       	movw	r18, r20
     78a:	28 56       	subi	r18, 0x68	; 104
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	69 01       	movw	r12, r18
     790:	68 2e       	mov	r6, r24
     792:	21 2c       	mov	r2, r1
     794:	68 94       	set
     796:	77 24       	eor	r7, r7
     798:	73 f8       	bld	r7, 3
     79a:	76 0e       	add	r7, r22
     79c:	35 e0       	ldi	r19, 0x05	; 5
     79e:	23 16       	cp	r2, r19
     7a0:	91 f1       	breq	.+100    	; 0x806 <drawChar+0xc0>
     7a2:	f6 01       	movw	r30, r12
     7a4:	14 91       	lpm	r17, Z
     7a6:	30 c0       	rjmp	.+96     	; 0x808 <drawChar+0xc2>
     7a8:	10 ff       	sbrs	r17, 0
     7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <drawChar+0x80>
     7ac:	d1 30       	cpi	r29, 0x01	; 1
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <drawChar+0x72>
     7b0:	6c 2f       	mov	r22, r28
     7b2:	83 2d       	mov	r24, r3
     7b4:	0e df       	rcall	.-484    	; 0x5d2 <drawPixel>
     7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <drawChar+0x9e>
     7b8:	01 e0       	ldi	r16, 0x01	; 1
     7ba:	2e 2d       	mov	r18, r14
     7bc:	44 2d       	mov	r20, r4
     7be:	6f 2d       	mov	r22, r15
     7c0:	86 2d       	mov	r24, r6
     7c2:	75 df       	rcall	.-278    	; 0x6ae <drawRectangleFilled>
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <drawChar+0x9e>
     7c6:	8a 14       	cp	r8, r10
     7c8:	9b 04       	cpc	r9, r11
     7ca:	61 f0       	breq	.+24     	; 0x7e4 <drawChar+0x9e>
     7cc:	d1 30       	cpi	r29, 0x01	; 1
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <drawChar+0x92>
     7d0:	6c 2f       	mov	r22, r28
     7d2:	83 2d       	mov	r24, r3
     7d4:	fe de       	rcall	.-516    	; 0x5d2 <drawPixel>
     7d6:	06 c0       	rjmp	.+12     	; 0x7e4 <drawChar+0x9e>
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	2e 2d       	mov	r18, r14
     7dc:	44 2d       	mov	r20, r4
     7de:	6f 2d       	mov	r22, r15
     7e0:	86 2d       	mov	r24, r6
     7e2:	65 df       	rcall	.-310    	; 0x6ae <drawRectangleFilled>
     7e4:	16 95       	lsr	r17
     7e6:	fd 0e       	add	r15, r29
     7e8:	ed 0e       	add	r14, r29
     7ea:	cf 5f       	subi	r28, 0xFF	; 255
     7ec:	c7 11       	cpse	r28, r7
     7ee:	dc cf       	rjmp	.-72     	; 0x7a8 <drawChar+0x62>
     7f0:	23 94       	inc	r2
     7f2:	6d 0e       	add	r6, r29
     7f4:	4d 0e       	add	r4, r29
     7f6:	33 94       	inc	r3
     7f8:	ff ef       	ldi	r31, 0xFF	; 255
     7fa:	cf 1a       	sub	r12, r31
     7fc:	df 0a       	sbc	r13, r31
     7fe:	26 e0       	ldi	r18, 0x06	; 6
     800:	22 12       	cpse	r2, r18
     802:	cc cf       	rjmp	.-104    	; 0x79c <drawChar+0x56>
     804:	06 c0       	rjmp	.+12     	; 0x812 <drawChar+0xcc>
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	c5 2d       	mov	r28, r5
     80a:	e5 2c       	mov	r14, r5
     80c:	ed 0e       	add	r14, r29
     80e:	f5 2c       	mov	r15, r5
     810:	cb cf       	rjmp	.-106    	; 0x7a8 <drawChar+0x62>
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	bf 90       	pop	r11
     824:	af 90       	pop	r10
     826:	9f 90       	pop	r9
     828:	8f 90       	pop	r8
     82a:	7f 90       	pop	r7
     82c:	6f 90       	pop	r6
     82e:	5f 90       	pop	r5
     830:	4f 90       	pop	r4
     832:	3f 90       	pop	r3
     834:	2f 90       	pop	r2
     836:	08 95       	ret

00000838 <drawString>:
     838:	af 92       	push	r10
     83a:	bf 92       	push	r11
     83c:	cf 92       	push	r12
     83e:	df 92       	push	r13
     840:	ef 92       	push	r14
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	5b 01       	movw	r10, r22
     84a:	fa 01       	movw	r30, r20
     84c:	c8 2f       	mov	r28, r24
     84e:	40 81       	ld	r20, Z
     850:	44 23       	and	r20, r20
     852:	a9 f0       	breq	.+42     	; 0x87e <drawString+0x46>
     854:	6f 01       	movw	r12, r30
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	c8 1a       	sub	r12, r24
     85a:	d8 0a       	sbc	r13, r24
     85c:	68 94       	set
     85e:	ee 24       	eor	r14, r14
     860:	e1 f8       	bld	r14, 1
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	b5 01       	movw	r22, r10
     86c:	8c 2f       	mov	r24, r28
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	6a df       	rcall	.-300    	; 0x746 <drawChar>
     872:	c4 5f       	subi	r28, 0xF4	; 244
     874:	f6 01       	movw	r30, r12
     876:	41 91       	ld	r20, Z+
     878:	6f 01       	movw	r12, r30
     87a:	41 11       	cpse	r20, r1
     87c:	ef cf       	rjmp	.-34     	; 0x85c <drawString+0x24>
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	08 95       	ret

00000890 <drawNumber>:
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	6c 01       	movw	r12, r24
     8aa:	5b 01       	movw	r10, r22
     8ac:	ed b6       	in	r14, 0x3d	; 61
     8ae:	fe b6       	in	r15, 0x3e	; 62
     8b0:	4a 30       	cpi	r20, 0x0A	; 10
     8b2:	51 05       	cpc	r21, r1
     8b4:	4c f0       	brlt	.+18     	; 0x8c8 <drawNumber+0x38>
     8b6:	44 36       	cpi	r20, 0x64	; 100
     8b8:	51 05       	cpc	r21, r1
     8ba:	44 f0       	brlt	.+16     	; 0x8cc <drawNumber+0x3c>
     8bc:	48 3e       	cpi	r20, 0xE8	; 232
     8be:	23 e0       	ldi	r18, 0x03	; 3
     8c0:	52 07       	cpc	r21, r18
     8c2:	34 f0       	brlt	.+12     	; 0x8d0 <drawNumber+0x40>
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <drawNumber+0x42>
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <drawNumber+0x42>
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <drawNumber+0x42>
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	2d b7       	in	r18, 0x3d	; 61
     8d4:	3e b7       	in	r19, 0x3e	; 62
     8d6:	28 1b       	sub	r18, r24
     8d8:	31 09       	sbc	r19, r1
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	3e bf       	out	0x3e, r19	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	2d bf       	out	0x3d, r18	; 61
     8e4:	0d b7       	in	r16, 0x3d	; 61
     8e6:	1e b7       	in	r17, 0x3e	; 62
     8e8:	0f 5f       	subi	r16, 0xFF	; 255
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	5f 93       	push	r21
     8ee:	4f 93       	push	r20
     8f0:	82 e1       	ldi	r24, 0x12	; 18
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	1f 93       	push	r17
     8fa:	0f 93       	push	r16
     8fc:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <sprintf>
     900:	40 2f       	mov	r20, r16
     902:	51 2f       	mov	r21, r17
     904:	b5 01       	movw	r22, r10
     906:	c6 01       	movw	r24, r12
     908:	97 df       	rcall	.-210    	; 0x838 <drawString>
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	fe be       	out	0x3e, r15	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	ed be       	out	0x3d, r14	; 61
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	bf 90       	pop	r11
     932:	af 90       	pop	r10
     934:	08 95       	ret

00000936 <drawRunning>:
     936:	f9 de       	rcall	.-526    	; 0x72a <clear>
     938:	45 e1       	ldi	r20, 0x15	; 21
     93a:	51 e0       	ldi	r21, 0x01	; 1
     93c:	68 e1       	ldi	r22, 0x18	; 24
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	88 e1       	ldi	r24, 0x18	; 24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	79 df       	rcall	.-270    	; 0x838 <drawString>
     946:	fa ce       	rjmp	.-524    	; 0x73c <show>
     948:	08 95       	ret

0000094a <drawPause>:
     94a:	cf 93       	push	r28
     94c:	c8 2f       	mov	r28, r24
     94e:	ed de       	rcall	.-550    	; 0x72a <clear>
     950:	42 e1       	ldi	r20, 0x12	; 18
     952:	66 e0       	ldi	r22, 0x06	; 6
     954:	8c e0       	ldi	r24, 0x0C	; 12
     956:	5a de       	rcall	.-844    	; 0x60c <drawVLine>
     958:	42 e1       	ldi	r20, 0x12	; 18
     95a:	66 e0       	ldi	r22, 0x06	; 6
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	56 de       	rcall	.-852    	; 0x60c <drawVLine>
     960:	4d e1       	ldi	r20, 0x1D	; 29
     962:	51 e0       	ldi	r21, 0x01	; 1
     964:	68 e0       	ldi	r22, 0x08	; 8
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	65 df       	rcall	.-310    	; 0x838 <drawString>
     96e:	4f e1       	ldi	r20, 0x1F	; 31
     970:	51 e0       	ldi	r21, 0x01	; 1
     972:	68 e0       	ldi	r22, 0x08	; 8
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	81 e2       	ldi	r24, 0x21	; 33
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	5e df       	rcall	.-324    	; 0x838 <drawString>
     97c:	41 e2       	ldi	r20, 0x21	; 33
     97e:	51 e0       	ldi	r21, 0x01	; 1
     980:	68 e0       	ldi	r22, 0x08	; 8
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	83 e3       	ldi	r24, 0x33	; 51
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	57 df       	rcall	.-338    	; 0x838 <drawString>
     98a:	43 e2       	ldi	r20, 0x23	; 35
     98c:	51 e0       	ldi	r21, 0x01	; 1
     98e:	68 e0       	ldi	r22, 0x08	; 8
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	83 e4       	ldi	r24, 0x43	; 67
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	50 df       	rcall	.-352    	; 0x838 <drawString>
     998:	45 e2       	ldi	r20, 0x25	; 37
     99a:	51 e0       	ldi	r21, 0x01	; 1
     99c:	68 e0       	ldi	r22, 0x08	; 8
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	85 e5       	ldi	r24, 0x55	; 85
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	49 df       	rcall	.-366    	; 0x838 <drawString>
     9a6:	47 e2       	ldi	r20, 0x27	; 39
     9a8:	51 e0       	ldi	r21, 0x01	; 1
     9aa:	68 e0       	ldi	r22, 0x08	; 8
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	87 e6       	ldi	r24, 0x67	; 103
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	42 df       	rcall	.-380    	; 0x838 <drawString>
     9b4:	42 e1       	ldi	r20, 0x12	; 18
     9b6:	66 e0       	ldi	r22, 0x06	; 6
     9b8:	84 e7       	ldi	r24, 0x74	; 116
     9ba:	28 de       	rcall	.-944    	; 0x60c <drawVLine>
     9bc:	42 e1       	ldi	r20, 0x12	; 18
     9be:	66 e0       	ldi	r22, 0x06	; 6
     9c0:	85 e7       	ldi	r24, 0x75	; 117
     9c2:	24 de       	rcall	.-952    	; 0x60c <drawVLine>
     9c4:	49 e2       	ldi	r20, 0x29	; 41
     9c6:	51 e0       	ldi	r21, 0x01	; 1
     9c8:	6c e1       	ldi	r22, 0x1C	; 28
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	33 df       	rcall	.-410    	; 0x838 <drawString>
     9d2:	41 e3       	ldi	r20, 0x31	; 49
     9d4:	51 e0       	ldi	r21, 0x01	; 1
     9d6:	6c e1       	ldi	r22, 0x1C	; 28
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	8a e5       	ldi	r24, 0x5A	; 90
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	2c df       	rcall	.-424    	; 0x838 <drawString>
     9e0:	45 e3       	ldi	r20, 0x35	; 53
     9e2:	51 e0       	ldi	r21, 0x01	; 1
     9e4:	6c e2       	ldi	r22, 0x2C	; 44
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	25 df       	rcall	.-438    	; 0x838 <drawString>
     9ee:	4c 2f       	mov	r20, r28
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	6c e2       	ldi	r22, 0x2C	; 44
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	84 e6       	ldi	r24, 0x64	; 100
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	4a df       	rcall	.-364    	; 0x890 <drawNumber>
     9fc:	9f de       	rcall	.-706    	; 0x73c <show>
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <drawCalibrateADC>:
     a02:	4a e4       	ldi	r20, 0x4A	; 74
     a04:	51 e0       	ldi	r21, 0x01	; 1
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	8c e0       	ldi	r24, 0x0C	; 12
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	14 df       	rcall	.-472    	; 0x838 <drawString>
     a10:	40 e2       	ldi	r20, 0x20	; 32
     a12:	64 e1       	ldi	r22, 0x14	; 20
     a14:	89 e0       	ldi	r24, 0x09	; 9
     a16:	fa dd       	rcall	.-1036   	; 0x60c <drawVLine>
     a18:	4e e3       	ldi	r20, 0x3E	; 62
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	64 e1       	ldi	r22, 0x14	; 20
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	8c e0       	ldi	r24, 0x0C	; 12
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	09 df       	rcall	.-494    	; 0x838 <drawString>
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	64 e1       	ldi	r22, 0x14	; 20
     a2a:	85 e2       	ldi	r24, 0x25	; 37
     a2c:	ef dd       	rcall	.-1058   	; 0x60c <drawVLine>
     a2e:	41 e4       	ldi	r20, 0x41	; 65
     a30:	51 e0       	ldi	r21, 0x01	; 1
     a32:	64 e1       	ldi	r22, 0x14	; 20
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	88 e2       	ldi	r24, 0x28	; 40
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	fe de       	rcall	.-516    	; 0x838 <drawString>
     a3c:	40 e2       	ldi	r20, 0x20	; 32
     a3e:	64 e1       	ldi	r22, 0x14	; 20
     a40:	81 e4       	ldi	r24, 0x41	; 65
     a42:	e4 dd       	rcall	.-1080   	; 0x60c <drawVLine>
     a44:	44 e4       	ldi	r20, 0x44	; 68
     a46:	51 e0       	ldi	r21, 0x01	; 1
     a48:	64 e1       	ldi	r22, 0x14	; 20
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	84 e4       	ldi	r24, 0x44	; 68
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	f3 de       	rcall	.-538    	; 0x838 <drawString>
     a52:	40 e2       	ldi	r20, 0x20	; 32
     a54:	64 e1       	ldi	r22, 0x14	; 20
     a56:	8d e5       	ldi	r24, 0x5D	; 93
     a58:	d9 dd       	rcall	.-1102   	; 0x60c <drawVLine>
     a5a:	47 e4       	ldi	r20, 0x47	; 71
     a5c:	51 e0       	ldi	r21, 0x01	; 1
     a5e:	64 e1       	ldi	r22, 0x14	; 20
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e6       	ldi	r24, 0x60	; 96
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	e8 de       	rcall	.-560    	; 0x838 <drawString>
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	64 e1       	ldi	r22, 0x14	; 20
     a6c:	89 e7       	ldi	r24, 0x79	; 121
     a6e:	ce cd       	rjmp	.-1124   	; 0x60c <drawVLine>
     a70:	08 95       	ret

00000a72 <drawSelectBar>:
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	b1 f0       	breq	.+44     	; 0xaa2 <drawSelectBar+0x30>
     a76:	18 f4       	brcc	.+6      	; 0xa7e <drawSelectBar+0xc>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	31 f0       	breq	.+12     	; 0xa88 <drawSelectBar+0x16>
     a7c:	08 95       	ret
     a7e:	83 30       	cpi	r24, 0x03	; 3
     a80:	e9 f0       	breq	.+58     	; 0xabc <drawSelectBar+0x4a>
     a82:	84 30       	cpi	r24, 0x04	; 4
     a84:	41 f1       	breq	.+80     	; 0xad6 <drawSelectBar+0x64>
     a86:	08 95       	ret
     a88:	47 e1       	ldi	r20, 0x17	; 23
     a8a:	66 e2       	ldi	r22, 0x26	; 38
     a8c:	8c e0       	ldi	r24, 0x0C	; 12
     a8e:	d1 dd       	rcall	.-1118   	; 0x632 <drawHLine>
     a90:	47 e1       	ldi	r20, 0x17	; 23
     a92:	68 e2       	ldi	r22, 0x28	; 40
     a94:	8c e0       	ldi	r24, 0x0C	; 12
     a96:	cd dd       	rcall	.-1126   	; 0x632 <drawHLine>
     a98:	47 e1       	ldi	r20, 0x17	; 23
     a9a:	6a e2       	ldi	r22, 0x2A	; 42
     a9c:	8c e0       	ldi	r24, 0x0C	; 12
     a9e:	c9 cd       	rjmp	.-1134   	; 0x632 <drawHLine>
     aa0:	08 95       	ret
     aa2:	47 e1       	ldi	r20, 0x17	; 23
     aa4:	66 e2       	ldi	r22, 0x26	; 38
     aa6:	88 e2       	ldi	r24, 0x28	; 40
     aa8:	c4 dd       	rcall	.-1144   	; 0x632 <drawHLine>
     aaa:	47 e1       	ldi	r20, 0x17	; 23
     aac:	68 e2       	ldi	r22, 0x28	; 40
     aae:	88 e2       	ldi	r24, 0x28	; 40
     ab0:	c0 dd       	rcall	.-1152   	; 0x632 <drawHLine>
     ab2:	47 e1       	ldi	r20, 0x17	; 23
     ab4:	6a e2       	ldi	r22, 0x2A	; 42
     ab6:	88 e2       	ldi	r24, 0x28	; 40
     ab8:	bc cd       	rjmp	.-1160   	; 0x632 <drawHLine>
     aba:	08 95       	ret
     abc:	47 e1       	ldi	r20, 0x17	; 23
     abe:	66 e2       	ldi	r22, 0x26	; 38
     ac0:	84 e4       	ldi	r24, 0x44	; 68
     ac2:	b7 dd       	rcall	.-1170   	; 0x632 <drawHLine>
     ac4:	47 e1       	ldi	r20, 0x17	; 23
     ac6:	68 e2       	ldi	r22, 0x28	; 40
     ac8:	84 e4       	ldi	r24, 0x44	; 68
     aca:	b3 dd       	rcall	.-1178   	; 0x632 <drawHLine>
     acc:	47 e1       	ldi	r20, 0x17	; 23
     ace:	6a e2       	ldi	r22, 0x2A	; 42
     ad0:	84 e4       	ldi	r24, 0x44	; 68
     ad2:	af cd       	rjmp	.-1186   	; 0x632 <drawHLine>
     ad4:	08 95       	ret
     ad6:	47 e1       	ldi	r20, 0x17	; 23
     ad8:	66 e2       	ldi	r22, 0x26	; 38
     ada:	80 e6       	ldi	r24, 0x60	; 96
     adc:	aa dd       	rcall	.-1196   	; 0x632 <drawHLine>
     ade:	47 e1       	ldi	r20, 0x17	; 23
     ae0:	68 e2       	ldi	r22, 0x28	; 40
     ae2:	80 e6       	ldi	r24, 0x60	; 96
     ae4:	a6 dd       	rcall	.-1204   	; 0x632 <drawHLine>
     ae6:	47 e1       	ldi	r20, 0x17	; 23
     ae8:	6a e2       	ldi	r22, 0x2A	; 42
     aea:	80 e6       	ldi	r24, 0x60	; 96
     aec:	a2 cd       	rjmp	.-1212   	; 0x632 <drawHLine>
     aee:	08 95       	ret

00000af0 <drawBlackCali>:
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	ec 01       	movw	r28, r24
     af6:	19 de       	rcall	.-974    	; 0x72a <clear>
     af8:	44 e5       	ldi	r20, 0x54	; 84
     afa:	51 e0       	ldi	r21, 0x01	; 1
     afc:	60 e2       	ldi	r22, 0x20	; 32
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	99 de       	rcall	.-718    	; 0x838 <drawString>
     b06:	ae 01       	movw	r20, r28
     b08:	60 e2       	ldi	r22, 0x20	; 32
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e5       	ldi	r24, 0x50	; 80
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	bf de       	rcall	.-642    	; 0x890 <drawNumber>
     b12:	14 de       	rcall	.-984    	; 0x73c <show>
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <drawWhiteCali>:
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
     b20:	04 de       	rcall	.-1016   	; 0x72a <clear>
     b22:	4b e5       	ldi	r20, 0x5B	; 91
     b24:	51 e0       	ldi	r21, 0x01	; 1
     b26:	60 e2       	ldi	r22, 0x20	; 32
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	84 de       	rcall	.-760    	; 0x838 <drawString>
     b30:	ae 01       	movw	r20, r28
     b32:	60 e2       	ldi	r22, 0x20	; 32
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	80 e5       	ldi	r24, 0x50	; 80
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	aa de       	rcall	.-684    	; 0x890 <drawNumber>
     b3c:	ff dd       	rcall	.-1026   	; 0x73c <show>
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <drawAluminumCali>:
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ec 01       	movw	r28, r24
     b4a:	ef dd       	rcall	.-1058   	; 0x72a <clear>
     b4c:	42 e6       	ldi	r20, 0x62	; 98
     b4e:	51 e0       	ldi	r21, 0x01	; 1
     b50:	60 e2       	ldi	r22, 0x20	; 32
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	85 e0       	ldi	r24, 0x05	; 5
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	6f de       	rcall	.-802    	; 0x838 <drawString>
     b5a:	ae 01       	movw	r20, r28
     b5c:	60 e2       	ldi	r22, 0x20	; 32
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e5       	ldi	r24, 0x50	; 80
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	95 de       	rcall	.-726    	; 0x890 <drawNumber>
     b66:	ea dd       	rcall	.-1068   	; 0x73c <show>
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <drawSteelCali>:
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
     b74:	da dd       	rcall	.-1100   	; 0x72a <clear>
     b76:	48 e6       	ldi	r20, 0x68	; 104
     b78:	51 e0       	ldi	r21, 0x01	; 1
     b7a:	60 e2       	ldi	r22, 0x20	; 32
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	85 e0       	ldi	r24, 0x05	; 5
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	5a de       	rcall	.-844    	; 0x838 <drawString>
     b84:	ae 01       	movw	r20, r28
     b86:	60 e2       	ldi	r22, 0x20	; 32
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e5       	ldi	r24, 0x50	; 80
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	80 de       	rcall	.-768    	; 0x890 <drawNumber>
     b90:	d5 dd       	rcall	.-1110   	; 0x73c <show>
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <i2cInit>:
     b98:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     ba2:	08 95       	ret

00000ba4 <i2cStart>:
     ba4:	94 ea       	ldi	r25, 0xA4	; 164
     ba6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     baa:	ec eb       	ldi	r30, 0xBC	; 188
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	90 81       	ld	r25, Z
     bb0:	99 23       	and	r25, r25
     bb2:	ec f7       	brge	.-6      	; 0xbae <i2cStart+0xa>
     bb4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     bb8:	98 7f       	andi	r25, 0xF8	; 248
     bba:	98 30       	cpi	r25, 0x08	; 8
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <i2cStart+0x1e>
     bbe:	90 31       	cpi	r25, 0x10	; 16
     bc0:	a1 f4       	brne	.+40     	; 0xbea <i2cStart+0x46>
     bc2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     bc6:	84 e8       	ldi	r24, 0x84	; 132
     bc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bcc:	ec eb       	ldi	r30, 0xBC	; 188
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	88 23       	and	r24, r24
     bd4:	ec f7       	brge	.-6      	; 0xbd0 <i2cStart+0x2c>
     bd6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     bda:	98 7f       	andi	r25, 0xF8	; 248
     bdc:	98 31       	cpi	r25, 0x18	; 24
     bde:	39 f0       	breq	.+14     	; 0xbee <i2cStart+0x4a>
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 34       	cpi	r25, 0x40	; 64
     be4:	29 f4       	brne	.+10     	; 0xbf0 <i2cStart+0x4c>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	08 95       	ret

00000bf2 <i2cWrite>:
     bf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     bf6:	84 e8       	ldi	r24, 0x84	; 132
     bf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     bfc:	ec eb       	ldi	r30, 0xBC	; 188
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	88 23       	and	r24, r24
     c04:	ec f7       	brge	.-6      	; 0xc00 <i2cWrite+0xe>
     c06:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c0a:	98 7f       	andi	r25, 0xF8	; 248
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	98 32       	cpi	r25, 0x28	; 40
     c10:	09 f4       	brne	.+2      	; 0xc14 <i2cWrite+0x22>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret

00000c16 <i2cStop>:
     c16:	84 e9       	ldi	r24, 0x94	; 148
     c18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     c1c:	ec eb       	ldi	r30, 0xBC	; 188
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	84 fd       	sbrc	r24, 4
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <i2cStop+0xa>
     c26:	08 95       	ret

00000c28 <timer1Init>:
     c28:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     c2c:	08 95       	ret

00000c2e <timer0Init>:
     c2e:	14 bc       	out	0x24, r1	; 36
     c30:	08 95       	ret

00000c32 <mTimer0>:
     c32:	25 b5       	in	r18, 0x25	; 37
     c34:	22 60       	ori	r18, 0x02	; 2
     c36:	25 bd       	out	0x25, r18	; 37
     c38:	16 bc       	out	0x26, r1	; 38
     c3a:	a8 9b       	sbis	0x15, 0	; 21
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <mTimer0+0x3a>
     c3e:	a8 9a       	sbi	0x15, 0	; 21
     c40:	15 c0       	rjmp	.+42     	; 0xc6c <mTimer0+0x3a>
     c42:	a8 9b       	sbis	0x15, 0	; 21
     c44:	fe cf       	rjmp	.-4      	; 0xc42 <mTimer0+0x10>
     c46:	a8 9a       	sbi	0x15, 0	; 21
     c48:	2f 5f       	subi	r18, 0xFF	; 255
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	1c f4       	brge	.+6      	; 0xc58 <mTimer0+0x26>
     c52:	a8 9b       	sbis	0x15, 0	; 21
     c54:	f6 cf       	rjmp	.-20     	; 0xc42 <mTimer0+0x10>
     c56:	f7 cf       	rjmp	.-18     	; 0xc46 <mTimer0+0x14>
     c58:	41 50       	subi	r20, 0x01	; 1
     c5a:	51 09       	sbc	r21, r1
     c5c:	19 f0       	breq	.+6      	; 0xc64 <mTimer0+0x32>
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f4 cf       	rjmp	.-24     	; 0xc4c <mTimer0+0x1a>
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	88 7f       	andi	r24, 0xF8	; 248
     c68:	85 bd       	out	0x25, r24	; 37
     c6a:	08 95       	ret
     c6c:	44 e0       	ldi	r20, 0x04	; 4
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	f6 cf       	rjmp	.-20     	; 0xc5e <mTimer0+0x2c>

00000c72 <timer3Init>:
     c72:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     c76:	08 95       	ret

00000c78 <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
     c78:	8f 92       	push	r8
     c7a:	9f 92       	push	r9
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	7b 01       	movw	r14, r22
     c92:	5a 01       	movw	r10, r20
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
     c94:	da 01       	movw	r26, r20
     c96:	ed 91       	ld	r30, X+
     c98:	fc 91       	ld	r31, X
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
     c9a:	ec 01       	movw	r28, r24
     c9c:	99 23       	and	r25, r25
     c9e:	24 f4       	brge	.+8      	; 0xca8 <stepperControl+0x30>
     ca0:	cc 27       	eor	r28, r28
     ca2:	dd 27       	eor	r29, r29
     ca4:	c8 1b       	sub	r28, r24
     ca6:	d9 0b       	sbc	r29, r25
     ca8:	4e 01       	movw	r8, r28
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
     caa:	18 16       	cp	r1, r24
     cac:	19 06       	cpc	r1, r25
     cae:	3c f0       	brlt	.+14     	; 0xcbe <stepperControl+0x46>
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise
     cb0:	c9 2e       	mov	r12, r25
     cb2:	cc 0c       	add	r12, r12
     cb4:	cc 08       	sbc	r12, r12
     cb6:	0c 2c       	mov	r0, r12
     cb8:	00 0c       	add	r0, r0
     cba:	dd 08       	sbc	r13, r13
     cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <stepperControl+0x4c>
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
	if (steps > 0) DIRECTION = 1;// positive or clock-wise
     cbe:	cc 24       	eor	r12, r12
     cc0:	c3 94       	inc	r12
     cc2:	d1 2c       	mov	r13, r1
	else if (steps < 0) DIRECTION = -1; //negative or counter-clock-wise
	else DIRECTION=0;		
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
     cc4:	b0 e1       	ldi	r27, 0x10	; 16
     cc6:	8b 16       	cp	r8, r27
     cc8:	91 04       	cpc	r9, r1
     cca:	40 f4       	brcc	.+16     	; 0xcdc <stepperControl+0x64>
		minDelay=maxDelay-absSteps/2;
     ccc:	94 01       	movw	r18, r8
     cce:	36 95       	lsr	r19
     cd0:	27 95       	ror	r18
     cd2:	02 2f       	mov	r16, r18
     cd4:	3f e0       	ldi	r19, 0x0F	; 15
     cd6:	53 2f       	mov	r21, r19
     cd8:	52 1b       	sub	r21, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <stepperControl+0x68>
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
     cdc:	08 e0       	ldi	r16, 0x08	; 8
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
     cde:	57 e0       	ldi	r21, 0x07	; 7
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	/*perform one stepper cycle before "for" loop so there is no wasted delay at beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
     ce0:	ec 0d       	add	r30, r12
     ce2:	fd 1d       	adc	r31, r13
	if(PORTAREGSet==4)PORTAREGSet=0;
     ce4:	e4 30       	cpi	r30, 0x04	; 4
     ce6:	f1 05       	cpc	r31, r1
     ce8:	39 f0       	breq	.+14     	; 0xcf8 <stepperControl+0x80>
	if(PORTAREGSet==-1)PORTAREGSet=3;
     cea:	ef 3f       	cpi	r30, 0xFF	; 255
     cec:	cf ef       	ldi	r28, 0xFF	; 255
     cee:	fc 07       	cpc	r31, r28
     cf0:	29 f4       	brne	.+10     	; 0xcfc <stepperControl+0x84>
     cf2:	e3 e0       	ldi	r30, 0x03	; 3
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <stepperControl+0x84>
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	/*perform one stepper cycle before "for" loop so there is no wasted delay at beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
	if(PORTAREGSet==4)PORTAREGSet=0;
     cf8:	e0 e0       	ldi	r30, 0x00	; 0
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR0B |= _BV(CS01); //clock pre-scalar (clk/8)
     cfc:	25 b5       	in	r18, 0x25	; 37
     cfe:	22 60       	ori	r18, 0x02	; 2
     d00:	25 bd       	out	0x25, r18	; 37
	TCNT0=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
     d02:	16 bc       	out	0x26, r1	; 38
	if ((TIFR0 & 0x01) == 0x01)TIFR0|=0x01; //if TOV0 flag is set to 1, reset it to zero
     d04:	a8 99       	sbic	0x15, 0	; 21
     d06:	a8 9a       	sbi	0x15, 0	; 21
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
     d08:	df 01       	movw	r26, r30
     d0a:	aa 0f       	add	r26, r26
     d0c:	bb 1f       	adc	r27, r27
     d0e:	a6 5f       	subi	r26, 0xF6	; 246
     d10:	be 4f       	sbci	r27, 0xFE	; 254
     d12:	2c 91       	ld	r18, X
     d14:	22 b9       	out	0x02, r18	; 2
	for(i=2;i<=absSteps;i++){	
     d16:	d2 e0       	ldi	r29, 0x02	; 2
     d18:	8d 16       	cp	r8, r29
     d1a:	91 04       	cpc	r9, r1
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <stepperControl+0xa8>
     d1e:	42 c0       	rjmp	.+132    	; 0xda4 <stepperControl+0x12c>
     d20:	4f e0       	ldi	r20, 0x0F	; 15
     d22:	a2 e0       	ldi	r26, 0x02	; 2
     d24:	b0 e0       	ldi	r27, 0x00	; 0
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
     d26:	10 e0       	ldi	r17, 0x00	; 0
     d28:	0f 5f       	subi	r16, 0xFF	; 255
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	94 01       	movw	r18, r8
     d2e:	2a 1b       	sub	r18, r26
     d30:	3b 0b       	sbc	r19, r27
     d32:	02 17       	cp	r16, r18
     d34:	13 07       	cpc	r17, r19
     d36:	20 f4       	brcc	.+8      	; 0xd40 <stepperControl+0xc8>
			if(delay>minDelay)delay -= 1;
     d38:	54 17       	cp	r21, r20
     d3a:	30 f4       	brcc	.+12     	; 0xd48 <stepperControl+0xd0>
     d3c:	41 50       	subi	r20, 0x01	; 1
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <stepperControl+0xd6>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
     d40:	4f 30       	cpi	r20, 0x0F	; 15
     d42:	20 f4       	brcc	.+8      	; 0xd4c <stepperControl+0xd4>
     d44:	4f 5f       	subi	r20, 0xFF	; 255
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <stepperControl+0xd6>
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
     d48:	45 2f       	mov	r20, r21
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <stepperControl+0xd6>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
     d4c:	4f e0       	ldi	r20, 0x0F	; 15
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
     d4e:	ec 0d       	add	r30, r12
     d50:	fd 1d       	adc	r31, r13
		if(PORTAREGSet==4)PORTAREGSet=0;
     d52:	e4 30       	cpi	r30, 0x04	; 4
     d54:	f1 05       	cpc	r31, r1
     d56:	39 f0       	breq	.+14     	; 0xd66 <stepperControl+0xee>
		if(PORTAREGSet==-1)PORTAREGSet=3;
     d58:	ef 3f       	cpi	r30, 0xFF	; 255
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	f2 07       	cpc	r31, r18
     d5e:	29 f4       	brne	.+10     	; 0xd6a <stepperControl+0xf2>
     d60:	e3 e0       	ldi	r30, 0x03	; 3
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <stepperControl+0xf2>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f0 e0       	ldi	r31, 0x00	; 0
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<(delay*4)){ //iterate through given count; multiplied by four as it is now a 250ms timer
     d6a:	24 2f       	mov	r18, r20
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
		while (k<(delay*4)){ //iterate through given count; multiplied by four as it is now a 250ms timer
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <stepperControl+0x10e>
			if ((TIFR0 & 0x01) == 0x01){ //if overflow has occurred in counter
     d7c:	a8 9b       	sbis	0x15, 0	; 21
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <stepperControl+0x10e>
				TIFR0|=0x01; //reset overflow flag by writing a 1 to TOV2 bit;equivalent => TIFR2 |= _BV(TOV2)
     d80:	a8 9a       	sbi	0x15, 0	; 21
				k++;
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<(delay*4)){ //iterate through given count; multiplied by four as it is now a 250ms timer
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	c4 f3       	brlt	.-16     	; 0xd7c <stepperControl+0x104>
			if ((TIFR0 & 0x01) == 0x01){ //if overflow has occurred in counter
				TIFR0|=0x01; //reset overflow flag by writing a 1 to TOV2 bit;equivalent => TIFR2 |= _BV(TOV2)
				k++;
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
     d8c:	9f 01       	movw	r18, r30
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	26 5f       	subi	r18, 0xF6	; 246
     d94:	3e 4f       	sbci	r19, 0xFE	; 254
     d96:	e9 01       	movw	r28, r18
     d98:	28 81       	ld	r18, Y
     d9a:	22 b9       	out	0x02, r18	; 2
	if(PORTAREGSet==-1)PORTAREGSet=3;
	TCCR0B |= _BV(CS01); //clock pre-scalar (clk/8)
	TCNT0=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
	if ((TIFR0 & 0x01) == 0x01)TIFR0|=0x01; //if TOV0 flag is set to 1, reset it to zero
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	8a 16       	cp	r8, r26
     da0:	9b 06       	cpc	r9, r27
     da2:	20 f6       	brcc	.-120    	; 0xd2c <stepperControl+0xb4>
				k++;
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
	}
	TCCR0B&=0b11111000; //disable timer 0
     da4:	25 b5       	in	r18, 0x25	; 37
     da6:	28 7f       	andi	r18, 0xF8	; 248
     da8:	25 bd       	out	0x25, r18	; 37
	*stepperIt=PORTAREGSet;//set value of current iteration to variable address of stepperIteration Variable
     daa:	d5 01       	movw	r26, r10
     dac:	ed 93       	st	X+, r30
     dae:	fc 93       	st	X, r31
	*stepperPos -= steps; //iterating through steps positively is clockwise; however, when moving clockwise position is decremented
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
     db0:	e7 01       	movw	r28, r14
     db2:	28 81       	ld	r18, Y
     db4:	39 81       	ldd	r19, Y+1	; 0x01
     db6:	f9 01       	movw	r30, r18
     db8:	e8 1b       	sub	r30, r24
     dba:	f9 0b       	sbc	r31, r25
     dbc:	cf 01       	movw	r24, r30
     dbe:	68 ec       	ldi	r22, 0xC8	; 200
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	eb d6       	rcall	.+3542   	; 0x1b9a <__divmodhi4>
     dc4:	99 83       	std	Y+1, r25	; 0x01
     dc6:	88 83       	st	Y, r24
	return; //returns nothing
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	9f 90       	pop	r9
     dde:	8f 90       	pop	r8
     de0:	08 95       	ret

00000de2 <stepperHome>:
////--ODA: CHANGE SO NO INTERRUPT IS USED FOR HALL EFFECT, simply check for voltage on an input pin
void stepperHome(int *stepperPos, int *stepperIt){
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	8c 01       	movw	r16, r24
     df0:	7b 01       	movw	r14, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
     df2:	12 b8       	out	0x02, r1	; 2
	return; //returns nothing
}
////--ODA: CHANGE SO NO INTERRUPT IS USED FOR HALL EFFECT, simply check for voltage on an input pin
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (PINA&0b10000000){ //Active low for hall effect sensor triggering
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <stepperHome+0x38>
		PORTA = stepperSigOrd[i];
     dfa:	fe 01       	movw	r30, r28
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e6 5f       	subi	r30, 0xF6	; 246
     e02:	fe 4f       	sbci	r31, 0xFE	; 254
     e04:	80 81       	ld	r24, Z
     e06:	82 b9       	out	0x02, r24	; 2
		mTimer0(delay);
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	12 df       	rcall	.-476    	; 0xc32 <mTimer0>
		i++;
     e0e:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
     e10:	c4 30       	cpi	r28, 0x04	; 4
     e12:	d1 05       	cpc	r29, r1
     e14:	11 f4       	brne	.+4      	; 0xe1a <stepperHome+0x38>
     e16:	c0 e0       	ldi	r28, 0x00	; 0
     e18:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (PINA&0b10000000){ //Active low for hall effect sensor triggering
     e1a:	07 99       	sbic	0x00, 7	; 0
     e1c:	ee cf       	rjmp	.-36     	; 0xdfa <stepperHome+0x18>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
     e1e:	c4 30       	cpi	r28, 0x04	; 4
     e20:	d1 05       	cpc	r29, r1
     e22:	a9 f1       	breq	.+106    	; 0xe8e <stepperHome+0xac>
		if (i==-1)i=3;
     e24:	cf 3f       	cpi	r28, 0xFF	; 255
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	d8 07       	cpc	r29, r24
     e2a:	41 f1       	breq	.+80     	; 0xe7c <stepperHome+0x9a>
		PORTA = stepperSigOrd[i];
     e2c:	fe 01       	movw	r30, r28
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	e6 5f       	subi	r30, 0xF6	; 246
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
     e38:	82 b9       	out	0x02, r24	; 2
		mTimer0(delay);
     e3a:	8e e1       	ldi	r24, 0x1E	; 30
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	f9 de       	rcall	.-526    	; 0xc32 <mTimer0>
		if (i==4)i=0;
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
     e40:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
     e42:	c4 30       	cpi	r28, 0x04	; 4
     e44:	d1 05       	cpc	r29, r1
     e46:	39 f0       	breq	.+14     	; 0xe56 <stepperHome+0x74>
		if (i==-1)i=3;
     e48:	cf 3f       	cpi	r28, 0xFF	; 255
     e4a:	ef ef       	ldi	r30, 0xFF	; 255
     e4c:	de 07       	cpc	r29, r30
     e4e:	29 f4       	brne	.+10     	; 0xe5a <stepperHome+0x78>
     e50:	c3 e0       	ldi	r28, 0x03	; 3
     e52:	d0 e0       	ldi	r29, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <stepperHome+0x78>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
     e56:	c0 e0       	ldi	r28, 0x00	; 0
     e58:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
     e5a:	fe 01       	movw	r30, r28
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e6 5f       	subi	r30, 0xF6	; 246
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	80 81       	ld	r24, Z
     e66:	82 b9       	out	0x02, r24	; 2
		mTimer0(delay);
     e68:	8e e1       	ldi	r24, 0x1E	; 30
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	e2 de       	rcall	.-572    	; 0xc32 <mTimer0>
	}
	*stepperIt = i;//set current stepper iteration
     e6e:	f7 01       	movw	r30, r14
     e70:	d1 83       	std	Z+1, r29	; 0x01
     e72:	c0 83       	st	Z, r28
	*stepperPos=0; //base stepper position (on black)
     e74:	f8 01       	movw	r30, r16
     e76:	11 82       	std	Z+1, r1	; 0x01
     e78:	10 82       	st	Z, r1
}
     e7a:	12 c0       	rjmp	.+36     	; 0xea0 <stepperHome+0xbe>
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
     e7c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <stepperSigOrd+0x6>
		mTimer0(delay);
     e80:	82 b9       	out	0x02, r24	; 2
     e82:	8e e1       	ldi	r24, 0x1E	; 30
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	d5 de       	rcall	.-598    	; 0xc32 <mTimer0>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
     e88:	c0 e0       	ldi	r28, 0x00	; 0
     e8a:	d0 e0       	ldi	r29, 0x00	; 0
     e8c:	e6 cf       	rjmp	.-52     	; 0xe5a <stepperHome+0x78>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
     e8e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <stepperSigOrd>
		mTimer0(delay);
     e92:	82 b9       	out	0x02, r24	; 2
     e94:	8e e1       	ldi	r24, 0x1E	; 30
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	cc de       	rcall	.-616    	; 0xc32 <mTimer0>
		if (i==4)i=0;
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
     e9a:	c1 e0       	ldi	r28, 0x01	; 1
     e9c:	d0 e0       	ldi	r29, 0x00	; 0
     e9e:	dd cf       	rjmp	.-70     	; 0xe5a <stepperHome+0x78>
		PORTA = stepperSigOrd[i];
		mTimer0(delay);
	}
	*stepperIt = i;//set current stepper iteration
	*stepperPos=0; //base stepper position (on black)
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	08 95       	ret

00000eae <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
     eae:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR2A |= _BV(WGM20) | _BV(WGM21) | _BV(COM2A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
     eb0:	e0 eb       	ldi	r30, 0xB0	; 176
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	83 68       	ori	r24, 0x83	; 131
     eb8:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS22);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB4*
     eba:	e1 eb       	ldi	r30, 0xB1	; 177
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	84 60       	ori	r24, 0x04	; 4
     ec2:	80 83       	st	Z, r24
	dutyCycle = motorDuty*2.55;
     ec4:	07 2e       	mov	r0, r23
     ec6:	00 0c       	add	r0, r0
     ec8:	88 0b       	sbc	r24, r24
     eca:	99 0b       	sbc	r25, r25
     ecc:	77 d5       	rcall	.+2798   	; 0x19bc <__floatsisf>
     ece:	23 e3       	ldi	r18, 0x33	; 51
     ed0:	33 e3       	ldi	r19, 0x33	; 51
     ed2:	43 e2       	ldi	r20, 0x23	; 35
     ed4:	50 e4       	ldi	r21, 0x40	; 64
     ed6:	d6 d5       	rcall	.+2988   	; 0x1a84 <__mulsf3>
     ed8:	43 d5       	rcall	.+2694   	; 0x1960 <__fixunssfsi>
	OCR2A = dutyCycle;//set duty cycle/start motor
     eda:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	PORTE &= 0xF0; //Apply Vcc brake to conveyor
     ede:	8e b1       	in	r24, 0x0e	; 14
     ee0:	80 7f       	andi	r24, 0xF0	; 240
     ee2:	8e b9       	out	0x0e, r24	; 14
     ee4:	08 95       	ret

00000ee6 <setupISR>:
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//Ex: rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//Ex: falling edge on INT2: EICRA |= _BV(ISC21);
	//see ISR routines interrupt functions
	EIMSK |= _BV(INT7) |_BV(INT6)|_BV(INT5)|_BV(INT4)|_BV(INT3)|_BV(INT2);//initialize INT 7,6,3,2
     ee6:	8d b3       	in	r24, 0x1d	; 29
     ee8:	8c 6f       	ori	r24, 0xFC	; 252
     eea:	8d bb       	out	0x1d, r24	; 29
	EICRA |= _BV(ISC21) | _BV(ISC20) | _BV(ISC31);
     eec:	e9 e6       	ldi	r30, 0x69	; 105
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 6b       	ori	r24, 0xB0	; 176
     ef4:	80 83       	st	Z, r24
	//EICRA |= 0b10110000; //rising edge trigger (active low) for OI (INT2); falling edge detection (active low) for IN (INT3)
	EICRB |= _BV(ISC71) | _BV(ISC61) | _BV(ISC60) | _BV(ISC51) | _BV(ISC41);
     ef6:	ea e6       	ldi	r30, 0x6A	; 106
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8a 6b       	ori	r24, 0xBA	; 186
     efe:	80 83       	st	Z, r24
	PCICR |= _BV(PCIE0); // Enable PC Interrupt
     f00:	e8 e6       	ldi	r30, 0x68	; 104
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	80 83       	st	Z, r24
	PCMSK0 |= 0b11101110; // Select PCINT7, PCINT6, PCINT5, PCINT3, PCINT2, PCINT1
     f0a:	eb e6       	ldi	r30, 0x6B	; 107
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8e 6e       	ori	r24, 0xEE	; 238
     f12:	80 83       	st	Z, r24
     f14:	08 95       	ret

00000f16 <setupADC>:
	//EICRB |= 0b00001011; //rising edge trigger (active high) for OR (INT6); falling edge detection (active low) for EX (INT7)
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
     f16:	ea e7       	ldi	r30, 0x7A	; 122
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8d 68       	ori	r24, 0x8D	; 141
     f1e:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
     f20:	ec e7       	ldi	r30, 0x7C	; 124
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	81 64       	ori	r24, 0x41	; 65
     f28:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
     f2a:	80 81       	ld	r24, Z
     f2c:	81 7e       	andi	r24, 0xE1	; 225
     f2e:	80 83       	st	Z, r24
     f30:	08 95       	ret

00000f32 <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
     f32:	26 2f       	mov	r18, r22
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 91 82 05 	lds	r20, 0x0582	; 0x800582 <oldDirection.2264>
     f3a:	43 70       	andi	r20, 0x03	; 3
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	42 17       	cp	r20, r18
     f40:	53 07       	cpc	r21, r19
     f42:	81 f0       	breq	.+32     	; 0xf64 <motorControl+0x32>
		PORTE &= 0b11110000; //apply Vcc Brake
     f44:	4e b1       	in	r20, 0x0e	; 14
     f46:	40 7f       	andi	r20, 0xF0	; 240
     f48:	4e b9       	out	0x0e, r20	; 14
		PORTE |= ((~d & 0b11) << 2); //start motor in specified direction
     f4a:	4e b1       	in	r20, 0x0e	; 14
     f4c:	20 95       	com	r18
     f4e:	30 95       	com	r19
     f50:	23 70       	andi	r18, 0x03	; 3
     f52:	33 27       	eor	r19, r19
     f54:	22 0f       	add	r18, r18
     f56:	33 1f       	adc	r19, r19
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	24 2b       	or	r18, r20
     f5e:	2e b9       	out	0x0e, r18	; 14
		oldDirection=d;
     f60:	60 93 82 05 	sts	0x0582, r22	; 0x800582 <oldDirection.2264>
	}
	dutyCycle = s*2.55;
     f64:	bc 01       	movw	r22, r24
     f66:	99 0f       	add	r25, r25
     f68:	88 0b       	sbc	r24, r24
     f6a:	99 0b       	sbc	r25, r25
     f6c:	27 d5       	rcall	.+2638   	; 0x19bc <__floatsisf>
     f6e:	23 e3       	ldi	r18, 0x33	; 51
     f70:	33 e3       	ldi	r19, 0x33	; 51
     f72:	43 e2       	ldi	r20, 0x23	; 35
     f74:	50 e4       	ldi	r21, 0x40	; 64
     f76:	86 d5       	rcall	.+2828   	; 0x1a84 <__mulsf3>
     f78:	f3 d4       	rcall	.+2534   	; 0x1960 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
     f7a:	67 bd       	out	0x27, r22	; 39
     f7c:	08 95       	ret

00000f7e <main>:
volatile uint16_t blkCali = 990;
volatile uint16_t whtCali = 960;
volatile uint16_t almCali = 300;
volatile uint16_t stlCali = 700;
/* Main Routine */
int main(int argc, char *argv[]){
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <main+0x6>
     f84:	00 d0       	rcall	.+0      	; 0xf86 <main+0x8>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
     f8a:	e1 e6       	ldi	r30, 0x61	; 97
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	80 83       	st	Z, r24
	CLKPR = 0;
     f92:	10 82       	st	Z, r1
	/*User Variables*/
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
     f98:	1c 82       	std	Y+4, r1	; 0x04
     f9a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t minADCTest=0xFFFF;
	uint16_t maxADCTest=0xFFFF;
	uint16_t aveADCTest=0;
	uint16_t ADCTestArray[8]={0};
	/*initializations*/
	cli(); //disable interrupts
     f9c:	f8 94       	cli
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
     f9e:	83 e2       	ldi	r24, 0x23	; 35
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	85 df       	rcall	.-246    	; 0xeae <setupPWM>
	setupISR();
     fa4:	a0 df       	rcall	.-192    	; 0xee6 <setupISR>
	setupADC();
     fa6:	b7 df       	rcall	.-146    	; 0xf16 <setupADC>
	i2cInit();	// I2C initialization
     fa8:	f7 dd       	rcall	.-1042   	; 0xb98 <i2cInit>
	SSD1306Init();	// OLED Initialization
     faa:	79 d4       	rcall	.+2290   	; 0x189e <SSD1306Init>
	clear();	// Clear display buffer
     fac:	be db       	rcall	.-2180   	; 0x72a <clear>
	show();		// Send data/command to OLED
     fae:	c6 db       	rcall	.-2164   	; 0x73c <show>
     fb0:	c2 dc       	rcall	.-1660   	; 0x936 <drawRunning>
	drawRunning();
     fb2:	3d de       	rcall	.-902    	; 0xc2e <timer0Init>
     fb4:	39 de       	rcall	.-910    	; 0xc28 <timer1Init>
	timer0Init();
     fb6:	5d de       	rcall	.-838    	; 0xc72 <timer3Init>
     fb8:	8f e3       	ldi	r24, 0x3F	; 63
	timer1Init();
     fba:	81 b9       	out	0x01, r24	; 1
     fbc:	80 e1       	ldi	r24, 0x10	; 16
	timer3Init();
     fbe:	84 b9       	out	0x04, r24	; 4
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
	/*Port I/O Definitions*/
	DDRA = 0x3F; /* Sets pins 5:0 on Port A to output: stepper motor control */
     fc2:	87 b9       	out	0x07, r24	; 7
     fc4:	83 ef       	ldi	r24, 0xF3	; 243
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
		/*Hall effect sensor on PA7*/
	DDRB = 0x10; /*controls dc motor: PB4=PWM signal*/
     fc6:	8a b9       	out	0x0a, r24	; 10
     fc8:	1f e0       	ldi	r17, 0x0F	; 15
	DDRC = 0xFF; //LEDs Debugging
     fca:	1d b9       	out	0x0d, r17	; 13
     fcc:	10 ba       	out	0x10, r1	; 16
	DDRD = 0xF3; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
     fce:	85 b1       	in	r24, 0x05	; 5
     fd0:	8e 6e       	ori	r24, 0xEE	; 238
	DDRE = 0x0F; /*interrupts on upper nibble;PE3:0={INA,INB,ENA,ENB}*/
     fd2:	85 b9       	out	0x05, r24	; 5
     fd4:	8e b1       	in	r24, 0x0e	; 14
	DDRF = 0x00; /*PF1=ADC1 pin*/	
     fd6:	80 63       	ori	r24, 0x30	; 48
	PORTB |= _BV(PB7) | _BV(PB6) | _BV(PB5)|_BV(PB3)|_BV(PB2)|_BV(PB1);//menu code
     fd8:	8e b9       	out	0x0e, r24	; 14
     fda:	78 94       	sei
     fdc:	10 92 99 06 	sts	0x0699, r1	; 0x800699 <OR_Count+0x1>
	PORTE |= _BV(PE5) | _BV(PE4); //menu code
     fe0:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <OR_Count>
	sei(); //enable interrupts
     fe4:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <RL_Count+0x1>
	/*initialize flags and counters */
	OR_Count=0;
     fe8:	10 92 0c 06 	sts	0x060C, r1	; 0x80060c <RL_Count>
     fec:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <OI_Count+0x1>
	RL_Count=0;
     ff0:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <OI_Count>
     ff4:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <EX_Count+0x1>
	OI_Count=0;
     ff8:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <EX_Count>
     ffc:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <OIRL_Count+0x1>
	EX_Count=0;
    1000:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <OIRL_Count>
    1004:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <inductiveFlag>
	OIRL_Count=0;
    1008:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <optExitFlag>
	falseInductFlag=0;
	inductiveFlag=0x00;
    100c:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <ADCResultFlag>
	optExitFlag=0x00;
    1010:	8a ea       	ldi	r24, 0xAA	; 170
	ADCResultFlag=0x00;	
    1012:	88 b9       	out	0x08, r24	; 8
    1014:	80 ed       	ldi	r24, 0xD0	; 208
	//HallEffect=0x00; 
	//stepEarlyCount=0x00;
	PORTC=0b10101010;
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	0c de       	rcall	.-1000   	; 0xc32 <mTimer0>
	mTimer0(2000);
    101a:	18 b9       	out	0x08, r17	; 8
    101c:	80 ed       	ldi	r24, 0xD0	; 208
    101e:	97 e0       	ldi	r25, 0x07	; 7
	PORTC=0b00001111;
    1020:	08 de       	rcall	.-1008   	; 0xc32 <mTimer0>
	mTimer0(2000);
    1022:	be 01       	movw	r22, r28
    1024:	6d 5f       	subi	r22, 0xFD	; 253
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	da de       	rcall	.-588    	; 0xde2 <stepperHome>
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	83 e2       	ldi	r24, 0x23	; 35
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	7e df       	rcall	.-260    	; 0xf32 <motorControl>
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
    1036:	66 24       	eor	r6, r6
    1038:	6a 94       	dec	r6
    103a:	76 2c       	mov	r7, r6
    103c:	44 24       	eor	r4, r4
    103e:	4a 94       	dec	r4
	uint8_t AL_Count = 0x00;
	int RLEX_Count = 0x00; //count of objects that have had their reflectivity measured, but not reached sensor 3 (EX)
	uint8_t tempFerrous=0;
	uint8_t objTestCount=0;//variables used in menuState==5 to show min, max, and average "minimum" ADC values of objects
	uint16_t minADCTest=0xFFFF;
	uint16_t maxADCTest=0xFFFF;
    1040:	54 2c       	mov	r5, r4
    1042:	21 2c       	mov	r2, r1
    1044:	33 24       	eor	r3, r3
	uint8_t ST_Count = 0x00;
	uint8_t AL_Count = 0x00;
	int RLEX_Count = 0x00; //count of objects that have had their reflectivity measured, but not reached sensor 3 (EX)
	uint8_t tempFerrous=0;
	uint8_t objTestCount=0;//variables used in menuState==5 to show min, max, and average "minimum" ADC values of objects
	uint16_t minADCTest=0xFFFF;
    1046:	33 94       	inc	r3
    1048:	0f 2e       	mov	r0, r31
    104a:	f2 e3       	ldi	r31, 0x32	; 50
	OR_Count=0;
	RL_Count=0;
	OI_Count=0;
	EX_Count=0;
	OIRL_Count=0;
	falseInductFlag=0;
    104c:	8f 2e       	mov	r8, r31
			menuState=1;		
		} // End menuState 2
		
		// Calibrate Menu
		if(menuState==3){
			programPause = 1;
    104e:	91 2c       	mov	r9, r1
    1050:	f0 2d       	mov	r31, r0
				PORTD|=((ADCAverage&0x0300)>>3);
				tempFerrous=inductiveArray[RL_Count]; //store whether object was ferrous or non-ferrous
				inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
				//sorting objects by reflectivity
				if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
				else if(ADCAverage<850)typeArray[RL_Count]=50;//object is steel
    1052:	0f 2e       	mov	r0, r31
    1054:	f6 e9       	ldi	r31, 0x96	; 150
    1056:	af 2e       	mov	r10, r31
    1058:	b1 2c       	mov	r11, r1
    105a:	f0 2d       	mov	r31, r0
				PORTD&=0x0F;
				PORTD|=((ADCAverage&0x0300)>>3);
				tempFerrous=inductiveArray[RL_Count]; //store whether object was ferrous or non-ferrous
				inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
				//sorting objects by reflectivity
				if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
    105c:	01 e9       	ldi	r16, 0x91	; 145
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	cc 24       	eor	r12, r12
    1062:	c3 94       	inc	r12
    1064:	d1 2c       	mov	r13, r1
					TCNT3=0x00; //set timer equal to zero
					if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
				} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
				if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
					inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
					TCCR3B&=0b11111000; //disable timer 3
    1066:	0f 2e       	mov	r0, r31
    1068:	f4 e9       	ldi	r31, 0x94	; 148
					falseInductFlag=0x00; //reset flag
					inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
    106a:	ef 2e       	mov	r14, r31
    106c:	f1 2c       	mov	r15, r1
    106e:	f0 2d       	mov	r31, r0
			programPause = 1;
			if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
				if (falseInductFlag==0x00){
					falseInductFlag=0x01;
					TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
					TCNT3=0x00; //set timer equal to zero
    1070:	5e c1       	rjmp	.+700    	; 0x132e <main+0x3b0>
    1072:	30 92 89 05 	sts	0x0589, r3	; 0x800589 <programPause>
    1076:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <inductiveFlag>
    107a:	88 23       	and	r24, r24
	mTimer0(2000);
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		while(menuState==0){
			programPause = 1;
    107c:	29 f1       	breq	.+74     	; 0x10c8 <main+0x14a>
    107e:	21 10       	cpse	r2, r1
			if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
    1080:	0d c0       	rjmp	.+26     	; 0x109c <main+0x11e>
    1082:	f8 01       	movw	r30, r16
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
				if (falseInductFlag==0x00){
    1088:	80 83       	st	Z, r24
    108a:	f7 01       	movw	r30, r14
					falseInductFlag=0x01;
					TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1
    1090:	c0 9b       	sbis	0x18, 0	; 24
    1092:	03 c0       	rjmp	.+6      	; 0x109a <main+0x11c>
					TCNT3=0x00; //set timer equal to zero
    1094:	c0 9a       	sbi	0x18, 0	; 24
    1096:	23 2c       	mov	r2, r3
    1098:	01 c0       	rjmp	.+2      	; 0x109c <main+0x11e>
					if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
    109a:	23 2c       	mov	r2, r3
    109c:	c0 9b       	sbis	0x18, 0	; 24
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <main+0x14a>
	while(1){
		while(menuState==0){
			programPause = 1;
			if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
				if (falseInductFlag==0x00){
					falseInductFlag=0x01;
    10a0:	10 92 0f 06 	sts	0x060F, r1	; 0x80060f <inductiveFlag>
    10a4:	f8 01       	movw	r30, r16
					TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
					TCNT3=0x00; //set timer equal to zero
					if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
				} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
				if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
    10a6:	80 81       	ld	r24, Z
    10a8:	88 7f       	andi	r24, 0xF8	; 248
					inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
    10aa:	80 83       	st	Z, r24
    10ac:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <OI_Count>
					TCCR3B&=0b11111000; //disable timer 3
    10b0:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <OI_Count+0x1>
    10b4:	31 97       	sbiw	r30, 0x01	; 1
					falseInductFlag=0x00; //reset flag
					inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
    10b6:	ef 73       	andi	r30, 0x3F	; 63
    10b8:	ff 27       	eor	r31, r31
    10ba:	ee 0f       	add	r30, r30
    10bc:	ff 1f       	adc	r31, r31
    10be:	ea 5e       	subi	r30, 0xEA	; 234
    10c0:	f9 4f       	sbci	r31, 0xF9	; 249
    10c2:	d1 82       	std	Z+1, r13	; 0x01
    10c4:	c0 82       	st	Z, r12
    10c6:	21 2c       	mov	r2, r1
    10c8:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <ADCResultFlag>
    10cc:	88 23       	and	r24, r24
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <main+0x154>
					if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
				} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
				if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
					inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
					TCCR3B&=0b11111000; //disable timer 3
					falseInductFlag=0x00; //reset flag
    10d0:	bd c0       	rjmp	.+378    	; 0x124c <main+0x2ce>
					inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
				}
			} 
			if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
    10d2:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <ADCResultFlag>
    10d6:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <ADCAverage+0x1>
    10da:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <ADCAverage>
				ADCResultFlag=0; //reset flag
    10de:	84 e0       	ldi	r24, 0x04	; 4
				//ADCAverage=lowADC;
				ADCAverage=0;
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <ADCFilterCount>
    10e6:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    10ea:	ee 0f       	add	r30, r30
				//ADCAverage=lowADC;
				for(i=0;i<4;i++){
					ADCAverage+=lowADCArray[ADCFilterCount];
    10ec:	ff 1f       	adc	r31, r31
    10ee:	e6 56       	subi	r30, 0x66	; 102
    10f0:	f9 4f       	sbci	r31, 0xF9	; 249
    10f2:	40 81       	ld	r20, Z
    10f4:	51 81       	ldd	r21, Z+1	; 0x01
    10f6:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <ADCAverage>
    10fa:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <ADCAverage+0x1>
    10fe:	24 0f       	add	r18, r20
    1100:	35 1f       	adc	r19, r21
    1102:	30 93 15 06 	sts	0x0615, r19	; 0x800615 <ADCAverage+0x1>
    1106:	20 93 14 06 	sts	0x0614, r18	; 0x800614 <ADCAverage>
    110a:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <ADCFilterCount>
    110e:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1112:	2f 5f       	subi	r18, 0xFF	; 255
					ADCFilterCount++;
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	30 93 97 06 	sts	0x0697, r19	; 0x800697 <ADCFilterCount+0x1>
    111a:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <ADCFilterCount>
    111e:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <ADCFilterCount>
    1122:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1126:	23 70       	andi	r18, 0x03	; 3
					ADCFilterCount&=0b00000011; //modulus of 8 with positive incrementing variables
    1128:	33 27       	eor	r19, r19
    112a:	30 93 97 06 	sts	0x0697, r19	; 0x800697 <ADCFilterCount+0x1>
    112e:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <ADCFilterCount>
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	b1 f6       	brne	.-84     	; 0x10e2 <main+0x164>
    1136:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    113a:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
			if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
				ADCResultFlag=0; //reset flag
				//ADCAverage=lowADC;
				ADCAverage=0;
				//ADCAverage=lowADC;
				for(i=0;i<4;i++){
    113e:	96 95       	lsr	r25
				/*for(i=0;i<16;i++){
					ADCAverage+=lowADCArray[ADCFilterCount];
					ADCFilterCount++;
					ADCFilterCount&=0b00001111; //modulus of 16 with positive incrementing variables
				}*/	
				ADCAverage>>=2; //division by 4 with chopping arithmetic
    1140:	87 95       	ror	r24
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <ADCAverage+0x1>
    114a:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <ADCAverage>
    114e:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    1152:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    1156:	88 b9       	out	0x08, r24	; 8
				//ADCAverage>>=3; //division by 8 with chopping arithmetic
				//ADCAverage>>=4; //division by 16 with chopping arithmetic
				//ADCAverage>>=5; //division by 32 with chopping arithmetic
				PORTC=ADCAverage&0x00FF;
    1158:	8b b1       	in	r24, 0x0b	; 11
    115a:	8f 70       	andi	r24, 0x0F	; 15
    115c:	8b b9       	out	0x0b, r24	; 11
    115e:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
				PORTD&=0x0F;
    1162:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    1166:	2b b1       	in	r18, 0x0b	; 11
				PORTD|=((ADCAverage&0x0300)>>3);
    1168:	88 27       	eor	r24, r24
    116a:	93 70       	andi	r25, 0x03	; 3
    116c:	96 95       	lsr	r25
    116e:	87 95       	ror	r24
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	82 2b       	or	r24, r18
    117a:	8b b9       	out	0x0b, r24	; 11
    117c:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    1180:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    1184:	ee 0f       	add	r30, r30
				tempFerrous=inductiveArray[RL_Count]; //store whether object was ferrous or non-ferrous
    1186:	ff 1f       	adc	r31, r31
    1188:	ea 5e       	subi	r30, 0xEA	; 234
    118a:	f9 4f       	sbci	r31, 0xF9	; 249
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    1194:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    1198:	ee 0f       	add	r30, r30
				inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
    119a:	ff 1f       	adc	r31, r31
    119c:	ea 5e       	subi	r30, 0xEA	; 234
    119e:	f9 4f       	sbci	r31, 0xF9	; 249
    11a0:	11 82       	std	Z+1, r1	; 0x01
    11a2:	10 82       	st	Z, r1
    11a4:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    11a8:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    11ac:	8c 32       	cpi	r24, 0x2C	; 44
				//sorting objects by reflectivity
				if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
    11ae:	91 40       	sbci	r25, 0x01	; 1
    11b0:	58 f4       	brcc	.+22     	; 0x11c8 <main+0x24a>
    11b2:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    11b6:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	e4 57       	subi	r30, 0x74	; 116
    11c0:	fa 4f       	sbci	r31, 0xFA	; 250
    11c2:	b1 82       	std	Z+1, r11	; 0x01
    11c4:	a0 82       	st	Z, r10
    11c6:	30 c0       	rjmp	.+96     	; 0x1228 <main+0x2aa>
    11c8:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    11cc:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    11d0:	82 35       	cpi	r24, 0x52	; 82
				else if(ADCAverage<850)typeArray[RL_Count]=50;//object is steel
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	58 f4       	brcc	.+22     	; 0x11ec <main+0x26e>
    11d6:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    11da:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e4 57       	subi	r30, 0x74	; 116
    11e4:	fa 4f       	sbci	r31, 0xFA	; 250
    11e6:	91 82       	std	Z+1, r9	; 0x01
    11e8:	80 82       	st	Z, r8
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <main+0x2aa>
    11ec:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    11f0:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    11f4:	80 3c       	cpi	r24, 0xC0	; 192
				else if(ADCAverage<960){
    11f6:	93 40       	sbci	r25, 0x03	; 3
    11f8:	68 f4       	brcc	.+26     	; 0x1214 <main+0x296>
    11fa:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    11fe:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    1202:	ee 0f       	add	r30, r30
					typeArray[RL_Count]=100;//object is white
    1204:	ff 1f       	adc	r31, r31
    1206:	e4 57       	subi	r30, 0x74	; 116
    1208:	fa 4f       	sbci	r31, 0xFA	; 250
    120a:	84 e6       	ldi	r24, 0x64	; 100
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <main+0x2aa>
    1214:	e0 91 0c 06 	lds	r30, 0x060C	; 0x80060c <RL_Count>
    1218:	f0 91 0d 06 	lds	r31, 0x060D	; 0x80060d <RL_Count+0x1>
    121c:	ee 0f       	add	r30, r30
					//if(!tempFerrous)typeArray[RL_Count]=100;//object is white
					//else typeArray[RL_Count]=50;//object is steel when it is dark
				}
				else{//object is non-reflective
					typeArray[RL_Count]=0;//object is black plastic when no ferrous material exists
    121e:	ff 1f       	adc	r31, r31
    1220:	e4 57       	subi	r30, 0x74	; 116
    1222:	fa 4f       	sbci	r31, 0xFA	; 250
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	10 82       	st	Z, r1
    1228:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <RL_Count>
    122c:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <RL_Count+0x1>
    1230:	01 96       	adiw	r24, 0x01	; 1
					//if(!tempFerrous) typeArray[RL_Count]=0;//object is black plastic when no ferrous material exists
					//else typeArray[RL_Count]=50;//object is steel when it is dark			 
				}
				RL_Count++;//add one to amount of objects that have had their reflectivity's measured
    1232:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <RL_Count+0x1>
    1236:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <RL_Count>
    123a:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <OIRL_Count>
    123e:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <OIRL_Count+0x1>
    1242:	01 97       	sbiw	r24, 0x01	; 1
				RLEX_Count+=1;
				OIRL_Count-=1;			
    1244:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <OIRL_Count+0x1>
    1248:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <OIRL_Count>
    124c:	80 91 2a 07 	lds	r24, 0x072A	; 0x80072a <optExitFlag>
    1250:	88 23       	and	r24, r24
    1252:	b1 f1       	breq	.+108    	; 0x12c0 <main+0x342>
    1254:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <EX_Count>
				//ADCCompleteFlag=0x01; //set flag to tell system there is no ADC conversions occurring
			}
			if(optExitFlag){ //object has hit sensor at end of conveyor
    1258:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <EX_Count+0x1>
    125c:	ee 0f       	add	r30, r30
				//mTimer2(1000);
				//PORTC = OI_Count;
				//mTimer2(500);
				//PORTC = RL_Count;
				//mTimer2(500);
				tempType=typeArray[EX_Count];
    125e:	ff 1f       	adc	r31, r31
    1260:	e4 57       	subi	r30, 0x74	; 116
    1262:	fa 4f       	sbci	r31, 0xFA	; 250
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	e1 f0       	breq	.+56     	; 0x12aa <main+0x32c>
				stepperMovement=stepperPosition-tempType;
    1272:	2e b1       	in	r18, 0x0e	; 14
    1274:	20 7f       	andi	r18, 0xF0	; 240
    1276:	2e b9       	out	0x0e, r18	; 14
    1278:	9c 01       	movw	r18, r24
				if (stepperMovement){//if object type doesn't match stepper location; stop motor, move stepper, start motor
    127a:	99 23       	and	r25, r25
					//PORTC=0b00111100;
					PORTE &=0xF0; //Apply Vcc brake to motor
    127c:	24 f4       	brge	.+8      	; 0x1286 <main+0x308>
    127e:	22 27       	eor	r18, r18
    1280:	33 27       	eor	r19, r19
					//stepper rotation logic; value of steps to rotate stepper is kept between 1:100)		
					if (abs(stepperMovement)>100){
    1282:	28 1b       	sub	r18, r24
    1284:	39 0b       	sbc	r19, r25
    1286:	25 36       	cpi	r18, 0x65	; 101
    1288:	31 05       	cpc	r19, r1
    128a:	3c f0       	brlt	.+14     	; 0x129a <main+0x31c>
    128c:	99 23       	and	r25, r25
    128e:	1c f4       	brge	.+6      	; 0x1296 <main+0x318>
    1290:	88 53       	subi	r24, 0x38	; 56
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
						if (stepperMovement<0) stepperMovement+=200;
    1294:	02 c0       	rjmp	.+4      	; 0x129a <main+0x31c>
    1296:	88 5c       	subi	r24, 0xC8	; 200
    1298:	91 09       	sbc	r25, r1
    129a:	ae 01       	movw	r20, r28
    129c:	4d 5f       	subi	r20, 0xFD	; 253
						else stepperMovement-=200;
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	be 01       	movw	r22, r28
					}
					stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
    12a2:	6f 5f       	subi	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	e8 dc       	rcall	.-1584   	; 0xc78 <stepperControl>
    12a8:	72 9a       	sbi	0x0e, 2	; 14
    12aa:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <EX_Count>
    12ae:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <EX_Count+0x1>
					PORTE |=0b00000100; //start motor forwards
    12b2:	01 96       	adiw	r24, 0x01	; 1
				if (tempType==0)BL_Count += 0x01;
				else if (tempType==50)ST_Count += 0x01;
				else if (tempType==100)WH_Count += 0x01;
				else if (tempType==150)AL_Count += 0x01;
				RLEX_Count-=1;
				EX_Count++;
    12b4:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <EX_Count+0x1>
    12b8:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <EX_Count>
    12bc:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <optExitFlag>
    12c0:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <OIRL_Count>
    12c4:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <OIRL_Count+0x1>
				optExitFlag=0; //reset flag
    12c8:	18 16       	cp	r1, r24
			}
			if(OIRL_Count<=0)OI_Count=RL_Count; //OI optical sensor is unreliable;set equal to RL sensor count if no objects between sensors
    12ca:	19 06       	cpc	r1, r25
    12cc:	44 f0       	brlt	.+16     	; 0x12de <main+0x360>
    12ce:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <RL_Count>
    12d2:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <RL_Count+0x1>
    12d6:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <OI_Count+0x1>
    12da:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <OI_Count>
    12de:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <OI_Count>
    12e2:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <OI_Count+0x1>
    12e6:	8f 73       	andi	r24, 0x3F	; 63
			//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
			OI_Count &= 0b00111111;//modulus of 64
    12e8:	99 27       	eor	r25, r25
    12ea:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <OI_Count+0x1>
    12ee:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <OI_Count>
    12f2:	80 91 0c 06 	lds	r24, 0x060C	; 0x80060c <RL_Count>
    12f6:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <RL_Count+0x1>
    12fa:	8f 73       	andi	r24, 0x3F	; 63
			RL_Count &= 0b00111111;
    12fc:	99 27       	eor	r25, r25
    12fe:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <RL_Count+0x1>
    1302:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <RL_Count>
    1306:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <OR_Count>
    130a:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <OR_Count+0x1>
    130e:	8f 73       	andi	r24, 0x3F	; 63
			OR_Count &= 0b00111111;
    1310:	99 27       	eor	r25, r25
    1312:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <OR_Count+0x1>
    1316:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <OR_Count>
    131a:	80 91 12 06 	lds	r24, 0x0612	; 0x800612 <EX_Count>
    131e:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <EX_Count+0x1>
    1322:	8f 73       	andi	r24, 0x3F	; 63
			EX_Count &= 0b00111111;
    1324:	99 27       	eor	r25, r25
    1326:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <EX_Count+0x1>
    132a:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <EX_Count>
    132e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <main+0x3ba>
	PORTC=0b00001111;
	mTimer0(2000);
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		while(menuState==0){
    1336:	9d ce       	rjmp	.-710    	; 0x1072 <main+0xf4>
    1338:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	c1 f4       	brne	.+48     	; 0x1370 <main+0x3f2>
			OI_Count &= 0b00111111;//modulus of 64
			RL_Count &= 0b00111111;
			OR_Count &= 0b00111111;
			EX_Count &= 0b00111111;
		}//end of sort code
		if(menuState==1){//pause function
    1340:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <rampDownSet>
    1344:	81 11       	cpse	r24, r1
			if(rampDownSet==0){
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <main+0x3d4>
    1348:	82 e2       	ldi	r24, 0x22	; 34
    134a:	ff da       	rcall	.-2562   	; 0x94a <drawPause>
    134c:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <programPause>
				drawPause(34);
				programPause = 0;
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <main+0x3f2>
    1352:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <rampDownSet>
				}else if(rampDownSet==1){
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	59 f4       	brne	.+22     	; 0x1370 <main+0x3f2>
    135a:	e7 d9       	rcall	.-3122   	; 0x72a <clear>
				clear();
    135c:	4f e6       	ldi	r20, 0x6F	; 111
    135e:	51 e0       	ldi	r21, 0x01	; 1
				drawString(24,24, "Complete");
    1360:	68 e1       	ldi	r22, 0x18	; 24
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	88 e1       	ldi	r24, 0x18	; 24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	67 da       	rcall	.-2866   	; 0x838 <drawString>
    136a:	e8 d9       	rcall	.-3120   	; 0x73c <show>
				show();
    136c:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <programPause>
				programPause = 0;
    1370:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
			}
		} // End menuState 1
		
		// Ramp Down
		if(menuState==2){			
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	59 f4       	brne	.+22     	; 0x138e <main+0x410>
			clear(); //to clear display buffer
    1378:	d8 d9       	rcall	.-3152   	; 0x72a <clear>
			drawString(12,16, "Ramp Down");
    137a:	48 e7       	ldi	r20, 0x78	; 120
    137c:	51 e0       	ldi	r21, 0x01	; 1
    137e:	60 e1       	ldi	r22, 0x10	; 16
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	8c e0       	ldi	r24, 0x0C	; 12
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	58 da       	rcall	.-2896   	; 0x838 <drawString>
			show();			
    1388:	d9 d9       	rcall	.-3150   	; 0x73c <show>
    138a:	30 92 88 05 	sts	0x0588, r3	; 0x800588 <menuState>
			//When finished Ramp Down
			//mTimer(10); // Remove, placeholder to simulated that sorting has finished
			menuState=1;		
    138e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
		} // End menuState 2
		
		// Calibrate Menu
		if(menuState==3){
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	59 f5       	brne	.+86     	; 0x13ec <main+0x46e>
    1396:	30 92 89 05 	sts	0x0589, r3	; 0x800589 <programPause>
			programPause = 1;
    139a:	c7 d9       	rcall	.-3186   	; 0x72a <clear>
			clear();
    139c:	32 db       	rcall	.-2460   	; 0xa02 <drawCalibrateADC>
    139e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
			drawCalibrateADC();
    13a2:	67 db       	rcall	.-2354   	; 0xa72 <drawSelectBar>
			drawSelectBar(barState);
    13a4:	cb d9       	rcall	.-3178   	; 0x73c <show>
    13a6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <right_key_press>
    13aa:	88 23       	and	r24, r24
			show();		
    13ac:	69 f0       	breq	.+26     	; 0x13c8 <main+0x44a>
    13ae:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <right_key_press>
			if(right_key_press){
    13b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
				right_key_press = 0;
    13b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <barState>
				barState=barState+1;
    13bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
    13c0:	85 30       	cpi	r24, 0x05	; 5
    13c2:	10 f0       	brcs	.+4      	; 0x13c8 <main+0x44a>
    13c4:	30 92 09 01 	sts	0x0109, r3	; 0x800109 <barState>
				if(barState > 4) {
    13c8:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <left_key_press>
    13cc:	88 23       	and	r24, r24
					barState = 1;
    13ce:	71 f0       	breq	.+28     	; 0x13ec <main+0x46e>
    13d0:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <left_key_press>
				}
			}		
			if(left_key_press){
    13d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
    13d8:	81 50       	subi	r24, 0x01	; 1
				left_key_press = 0;
    13da:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <barState>
				barState = barState -1;
    13de:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
    13e2:	81 11       	cpse	r24, r1
    13e4:	03 c0       	rjmp	.+6      	; 0x13ec <main+0x46e>
    13e6:	94 e0       	ldi	r25, 0x04	; 4
				if(barState < 1) {
    13e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <barState>
    13ec:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
					barState = 4;
    13f0:	84 30       	cpi	r24, 0x04	; 4
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <main+0x478>
    13f4:	a2 c0       	rjmp	.+324    	; 0x153a <main+0x5bc>
				}
			}
		} // End menuState 3
		// Object Colour Calibration
		if(menuState==4){		
    13f6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <barState>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	81 f1       	breq	.+96     	; 0x145e <main+0x4e0>
    13fe:	18 f4       	brcc	.+6      	; 0x1406 <main+0x488>
			switch(barState)
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	41 f0       	breq	.+16     	; 0x1414 <main+0x496>
    1404:	9a c0       	rjmp	.+308    	; 0x153a <main+0x5bc>
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	09 f4       	brne	.+2      	; 0x140c <main+0x48e>
    140a:	4e c0       	rjmp	.+156    	; 0x14a8 <main+0x52a>
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	09 f4       	brne	.+2      	; 0x1412 <main+0x494>
    1410:	70 c0       	rjmp	.+224    	; 0x14f2 <main+0x574>
    1412:	93 c0       	rjmp	.+294    	; 0x153a <main+0x5bc>
    1414:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <up_key_press>
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	61 f4       	brne	.+24     	; 0x1434 <main+0x4b6>
    141c:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <up_key_press>
			{
				// Draw Black
				case selBlack:
				if(up_key_press==1){
    1420:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <blkCali>
    1424:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <blkCali+0x1>
					up_key_press=0;
    1428:	01 96       	adiw	r24, 0x01	; 1
					blkCali++;
    142a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <blkCali+0x1>
    142e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <blkCali>
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <main+0x4d4>
    1434:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <down_key_press>
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	59 f4       	brne	.+22     	; 0x1452 <main+0x4d4>
					}else if(down_key_press==1){
    143c:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <down_key_press>
    1440:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <blkCali>
					down_key_press=0;
    1444:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <blkCali+0x1>
					blkCali--;
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <blkCali+0x1>
    144e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <blkCali>
    1452:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <blkCali>
    1456:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <blkCali+0x1>
				}
				drawBlackCali(blkCali);
    145a:	4a db       	rcall	.-2412   	; 0xaf0 <drawBlackCali>
    145c:	6e c0       	rjmp	.+220    	; 0x153a <main+0x5bc>
    145e:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <up_key_press>
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	61 f4       	brne	.+24     	; 0x147e <main+0x500>
				break;
    1466:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <up_key_press>
				// Draw White
				case selWhite:
					if(up_key_press==1){
    146a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <whtCali>
    146e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <whtCali+0x1>
						up_key_press=0;
    1472:	01 96       	adiw	r24, 0x01	; 1
						whtCali++;
    1474:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <whtCali+0x1>
    1478:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <whtCali>
    147c:	0f c0       	rjmp	.+30     	; 0x149c <main+0x51e>
    147e:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <down_key_press>
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	59 f4       	brne	.+22     	; 0x149c <main+0x51e>
						}else if(down_key_press==1){
    1486:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <down_key_press>
    148a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <whtCali>
						down_key_press=0;
    148e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <whtCali+0x1>
						whtCali--;
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <whtCali+0x1>
    1498:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <whtCali>
    149c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <whtCali>
    14a0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <whtCali+0x1>
					}
					drawWhiteCali(whtCali);
    14a4:	3a db       	rcall	.-2444   	; 0xb1a <drawWhiteCali>
    14a6:	49 c0       	rjmp	.+146    	; 0x153a <main+0x5bc>
    14a8:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <up_key_press>
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	61 f4       	brne	.+24     	; 0x14c8 <main+0x54a>
					break;
    14b0:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <up_key_press>
				// Draw Aluminum
				case selAlum:
					if(up_key_press==1){
    14b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <almCali>
    14b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <almCali+0x1>
						up_key_press=0;
    14bc:	01 96       	adiw	r24, 0x01	; 1
						almCali++;
    14be:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <almCali+0x1>
    14c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <almCali>
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <main+0x568>
    14c8:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <down_key_press>
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	59 f4       	brne	.+22     	; 0x14e6 <main+0x568>
						}else if(down_key_press==1){
    14d0:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <down_key_press>
    14d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <almCali>
						down_key_press=0;
    14d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <almCali+0x1>
						almCali--;
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <almCali+0x1>
    14e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <almCali>
    14e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <almCali>
    14ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <almCali+0x1>
					}
					drawAluminumCali(almCali);
    14ee:	2a db       	rcall	.-2476   	; 0xb44 <drawAluminumCali>
    14f0:	24 c0       	rjmp	.+72     	; 0x153a <main+0x5bc>
    14f2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <up_key_press>
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	61 f4       	brne	.+24     	; 0x1512 <main+0x594>
					break;
    14fa:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <up_key_press>
				// Draw Steel
				case selSteel:
					if(up_key_press==1){
    14fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1502:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
						up_key_press=0;
						stlCali++;
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    150c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <main+0x5b2>
    1512:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <down_key_press>
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	59 f4       	brne	.+22     	; 0x1530 <main+0x5b2>
						}else if(down_key_press==1){
    151a:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <down_key_press>
    151e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
						down_key_press=0;
    1522:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
						stlCali--;
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    152c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1530:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1534:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
					}
					drawSteelCali(stlCali);
    1538:	1a db       	rcall	.-2508   	; 0xb6e <drawSteelCali>
    153a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
    153e:	85 30       	cpi	r24, 0x05	; 5
    1540:	09 f0       	breq	.+2      	; 0x1544 <main+0x5c6>
    1542:	f5 ce       	rjmp	.-534    	; 0x132e <main+0x3b0>
					break;			
			}// end switch
		}//end menuState 4	
		if (menuState==5){
    1544:	65 c0       	rjmp	.+202    	; 0x1610 <main+0x692>
    1546:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <ADCResultFlag>
    154a:	88 23       	and	r24, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <main+0x5d2>
    154e:	61 c0       	rjmp	.+194    	; 0x1612 <main+0x694>
			objTestCount=0;
			while((menuState==5) && (objTestCount<8)){
				if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
    1550:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <ADCResultFlag>
    1554:	10 92 15 06 	sts	0x0615, r1	; 0x800615 <ADCAverage+0x1>
    1558:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <ADCAverage>
					ADCResultFlag=0; //reset flag
    155c:	84 e0       	ldi	r24, 0x04	; 4
					ADCAverage=0;
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <ADCFilterCount>
    1564:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1568:	ee 0f       	add	r30, r30
					for(i=0;i<4;i++){
						ADCAverage+=lowADCArray[ADCFilterCount];
    156a:	ff 1f       	adc	r31, r31
    156c:	e6 56       	subi	r30, 0x66	; 102
    156e:	f9 4f       	sbci	r31, 0xF9	; 249
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	40 91 14 06 	lds	r20, 0x0614	; 0x800614 <ADCAverage>
    1578:	50 91 15 06 	lds	r21, 0x0615	; 0x800615 <ADCAverage+0x1>
    157c:	46 0f       	add	r20, r22
    157e:	57 1f       	adc	r21, r23
    1580:	50 93 15 06 	sts	0x0615, r21	; 0x800615 <ADCAverage+0x1>
    1584:	40 93 14 06 	sts	0x0614, r20	; 0x800614 <ADCAverage>
    1588:	40 91 96 06 	lds	r20, 0x0696	; 0x800696 <ADCFilterCount>
    158c:	50 91 97 06 	lds	r21, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1590:	4f 5f       	subi	r20, 0xFF	; 255
						ADCFilterCount++;
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	50 93 97 06 	sts	0x0697, r21	; 0x800697 <ADCFilterCount+0x1>
    1598:	40 93 96 06 	sts	0x0696, r20	; 0x800696 <ADCFilterCount>
    159c:	40 91 96 06 	lds	r20, 0x0696	; 0x800696 <ADCFilterCount>
    15a0:	50 91 97 06 	lds	r21, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    15a4:	43 70       	andi	r20, 0x03	; 3
						ADCFilterCount&=0b00000011; //modulus of 8 with positive incrementing variables
    15a6:	55 27       	eor	r21, r21
    15a8:	50 93 97 06 	sts	0x0697, r21	; 0x800697 <ADCFilterCount+0x1>
    15ac:	40 93 96 06 	sts	0x0696, r20	; 0x800696 <ADCFilterCount>
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	b1 f6       	brne	.-84     	; 0x1560 <main+0x5e2>
    15b4:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    15b8:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
			objTestCount=0;
			while((menuState==5) && (objTestCount<8)){
				if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
					ADCResultFlag=0; //reset flag
					ADCAverage=0;
					for(i=0;i<4;i++){
    15bc:	96 95       	lsr	r25
						ADCAverage+=lowADCArray[ADCFilterCount];
						ADCFilterCount++;
						ADCFilterCount&=0b00000011; //modulus of 8 with positive incrementing variables
					}	
					ADCAverage>>=2; //division by 4 with chopping arithmetic
    15be:	87 95       	ror	r24
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <ADCAverage+0x1>
    15c8:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <ADCAverage>
    15cc:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    15d0:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    15d4:	21 11       	cpse	r18, r1
					ADCTestArray[objTestCount]=ADCAverage;
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <main+0x662>
    15d8:	60 90 14 06 	lds	r6, 0x0614	; 0x800614 <ADCAverage>
    15dc:	70 90 15 06 	lds	r7, 0x0615	; 0x800615 <ADCAverage+0x1>
					if(objTestCount==0)maxADCTest=ADCAverage;//initialize max value found on first object
    15e0:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    15e4:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    15e8:	84 15       	cp	r24, r4
					if(ADCAverage<minADCTest)minADCTest=ADCAverage;
    15ea:	95 05       	cpc	r25, r5
    15ec:	20 f4       	brcc	.+8      	; 0x15f6 <main+0x678>
    15ee:	40 90 14 06 	lds	r4, 0x0614	; 0x800614 <ADCAverage>
    15f2:	50 90 15 06 	lds	r5, 0x0615	; 0x800615 <ADCAverage+0x1>
    15f6:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <ADCAverage>
    15fa:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <ADCAverage+0x1>
    15fe:	68 16       	cp	r6, r24
					if(ADCAverage>maxADCTest)maxADCTest=ADCAverage;					
    1600:	79 06       	cpc	r7, r25
    1602:	20 f4       	brcc	.+8      	; 0x160c <main+0x68e>
    1604:	60 90 14 06 	lds	r6, 0x0614	; 0x800614 <ADCAverage>
    1608:	70 90 15 06 	lds	r7, 0x0615	; 0x800615 <ADCAverage+0x1>
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <main+0x694>
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
					objTestCount++;
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	09 f0       	breq	.+2      	; 0x161c <main+0x69e>
    161a:	89 ce       	rjmp	.-750    	; 0x132e <main+0x3b0>
					break;			
			}// end switch
		}//end menuState 4	
		if (menuState==5){
			objTestCount=0;
			while((menuState==5) && (objTestCount<8)){
    161c:	28 30       	cpi	r18, 0x08	; 8
    161e:	09 f0       	breq	.+2      	; 0x1622 <main+0x6a4>
    1620:	92 cf       	rjmp	.-220    	; 0x1546 <main+0x5c8>
    1622:	85 ce       	rjmp	.-758    	; 0x132e <main+0x3b0>

00001624 <__vector_1>:
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
}

/**********INTERRUPT SERVICE ROUTINES**********/

ISR(INT0_vect){ // on PD0; taken for LCD Screen
}
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_2>:
ISR(INT1_vect){ // on PD1; taken for LCD Screen
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
}
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <__vector_3>:
/*sensor 1: OI: 1st Optical-Inductive-Near Inductive sensor*/
ISR(INT2_vect){ // on PD2; active low; triggered on rising-edge
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
	if(menuState<2){ //only adds to counters if in sorting mode or pause mode
    165a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuState>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	90 f4       	brcc	.+36     	; 0x1686 <__vector_3+0x3a>
		OI_Count+=1;
    1662:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <OI_Count>
    1666:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <OI_Count+0x1>
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <OI_Count+0x1>
    1670:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <OI_Count>
		OIRL_Count+=1;	
    1674:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <OIRL_Count>
    1678:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <OIRL_Count+0x1>
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <OIRL_Count+0x1>
    1682:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <OIRL_Count>
	}
}
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_4>:
/*sensor 2: IN: Inductive sensor*/
ISR(INT3_vect){ //on PD3; active low; triggered on falling-edge
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	8f 93       	push	r24
	inductiveFlag=0x01;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <inductiveFlag>
}
    16a6:	8f 91       	pop	r24
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_7>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Reflective sensor*/
ISR(INT6_vect){ // on PD6; active high; triggered on rising-edge
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	0b b6       	in	r0, 0x3b	; 59
    16be:	0f 92       	push	r0
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
	lowADC=0xFFFF;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <lowADC+0x1>
    16d0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <lowADC>
	ADCSRA|= _BV(ADSC); //trigger ADC (i.e. begin ADC conversion)
    16d4:	ea e7       	ldi	r30, 0x7A	; 122
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	80 64       	ori	r24, 0x40	; 64
    16dc:	80 83       	st	Z, r24
	//OR_Count+=1;	
	//ADCCompleteFlag=0x00; // tell system ADC conversions are occurring
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	9f 91       	pop	r25
    16e4:	8f 91       	pop	r24
    16e6:	0f 90       	pop	r0
    16e8:	0b be       	out	0x3b, r0	; 59
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f 90       	pop	r0
    16f0:	1f 90       	pop	r1
    16f2:	18 95       	reti

000016f4 <__vector_8>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT7_vect){ //on PE7; active low; triggered on falling-edge
    16f4:	1f 92       	push	r1
    16f6:	0f 92       	push	r0
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	0f 92       	push	r0
    16fc:	11 24       	eor	r1, r1
    16fe:	8f 93       	push	r24
	optExitFlag=0x01;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <optExitFlag>
}
    1706:	8f 91       	pop	r24
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_29>:
/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	0b b6       	in	r0, 0x3b	; 59
    171e:	0f 92       	push	r0
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	8f 93       	push	r24
    1726:	9f 93       	push	r25
    1728:	ef 93       	push	r30
    172a:	ff 93       	push	r31
	if (lowADC>ADC){ //if ADC result is still decreasing (i.e. if object's reflectivity is increasing)
    172c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1730:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1734:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <lowADC>
    1738:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <lowADC+0x1>
    173c:	28 17       	cp	r18, r24
    173e:	39 07       	cpc	r19, r25
    1740:	48 f5       	brcc	.+82     	; 0x1794 <__vector_29+0x82>
		lowADC=ADC; //ADC holds the entire 10 bit value in a 16bit variable; lowADC set for future comparison
    1742:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1746:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    174a:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <lowADC+0x1>
    174e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <lowADC>
		lowADCArray[ADCFilterCount]=lowADC;
    1752:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <ADCFilterCount>
    1756:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    175a:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <lowADC>
    175e:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <lowADC+0x1>
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	e6 56       	subi	r30, 0x66	; 102
    1768:	f9 4f       	sbci	r31, 0xF9	; 249
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
		ADCFilterCount++; //increment array location being set
    176e:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <ADCFilterCount>
    1772:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <ADCFilterCount+0x1>
    177c:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <ADCFilterCount>
		//ADCFilterCount&=0b00000111; //modulus of 8
		//ADCFilterCount&=0b00001111; //modulus of 16
		//ADCFilterCount&=0b00011111; //modulus of 32
		ADCFilterCount&=0b000000011; //modulus of 4
    1780:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <ADCFilterCount>
    1784:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <ADCFilterCount+0x1>
    1788:	83 70       	andi	r24, 0x03	; 3
    178a:	99 27       	eor	r25, r25
    178c:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <ADCFilterCount+0x1>
    1790:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <ADCFilterCount>
		//highByteADC=ADCH;
		//lowByteADC=ADCL;
	}
	if (PINE&0b01000000) ADCSRA|= _BV(ADSC); //if there is still an object in OR beam keep initializing ADC conversions
    1794:	66 9b       	sbis	0x0c, 6	; 12
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <__vector_29+0x92>
    1798:	ea e7       	ldi	r30, 0x7A	; 122
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	80 83       	st	Z, r24
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <__vector_29+0x98>
	//if (ADC<(lowADC+40)) ADCSRA|= _BV(ADSC); //if there is still an object keep initializing ADC conversions
	else ADCResultFlag = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <ADCResultFlag>
}
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	3f 91       	pop	r19
    17b4:	2f 91       	pop	r18
    17b6:	0f 90       	pop	r0
    17b8:	0b be       	out	0x3b, r0	; 59
    17ba:	0f 90       	pop	r0
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	0f 90       	pop	r0
    17c0:	1f 90       	pop	r1
    17c2:	18 95       	reti

000017c4 <__vector_5>:
// Joystick - Right
ISR(INT4_vect){ //on PD3; active low
    17c4:	1f 92       	push	r1
    17c6:	0f 92       	push	r0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	8f 93       	push	r24
	right_key_press=1;
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <right_key_press>
}
    17d6:	8f 91       	pop	r24
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_6>:

// Joystick - Down
ISR(INT5_vect){ //on PE4; active low
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	8f 93       	push	r24
	//PORTC ^= _BV(PC6);
	down_key_press=1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <down_key_press>
}
    17f4:	8f 91       	pop	r24
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_9>:

ISR(PCINT0_vect){
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
	uint8_t changedbits;
	changedbits = PINB ^ portbhistory;
    180e:	93 b1       	in	r25, 0x03	; 3
    1810:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <portbhistory>
    1814:	89 27       	eor	r24, r25
	portbhistory = PINB;
    1816:	93 b1       	in	r25, 0x03	; 3
    1818:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <portbhistory>
	// Joystick UP - PORTB7
	if(changedbits & (1 << PB7)) up_key_press=1;
    181c:	88 23       	and	r24, r24
    181e:	1c f4       	brge	.+6      	; 0x1826 <__vector_9+0x26>
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <up_key_press>
	// Joystick LEFT - PORTB6
	if(changedbits & (1 << PB6)) left_key_press=1;
    1826:	86 ff       	sbrs	r24, 6
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <__vector_9+0x30>
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <left_key_press>
	// Joystick SELECT - PORTB5
	if(changedbits & (1 << PB5)) if(menuState==3) menuState = 4;
    1830:	85 ff       	sbrs	r24, 5
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <__vector_9+0x42>
    1834:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <menuState>
    1838:	93 30       	cpi	r25, 0x03	; 3
    183a:	19 f4       	brne	.+6      	; 0x1842 <__vector_9+0x42>
    183c:	94 e0       	ldi	r25, 0x04	; 4
    183e:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <menuState>
	// Calibrate Screen Button - PORTB3
	if(changedbits & (1 << PB3)) menuState = 3;	
    1842:	83 ff       	sbrs	r24, 3
    1844:	03 c0       	rjmp	.+6      	; 0x184c <__vector_9+0x4c>
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <menuState>
	// Ramp Down - PORTB2
	if(changedbits & (1 << PB2))
    184c:	82 ff       	sbrs	r24, 2
    184e:	06 c0       	rjmp	.+12     	; 0x185c <__vector_9+0x5c>
	{
		rampDownSet = 1;
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <rampDownSet>
		menuState = 2;
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <menuState>
	}	
	// Pause/Resume Button - PORTB1
	if(changedbits & (1 << PB1))
    185c:	81 ff       	sbrs	r24, 1
    185e:	0d c0       	rjmp	.+26     	; 0x187a <__vector_9+0x7a>
	{
		if(programPause==0)menuState = 0; 
    1860:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <programPause>
    1864:	81 11       	cpse	r24, r1
    1866:	03 c0       	rjmp	.+6      	; 0x186e <__vector_9+0x6e>
    1868:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <menuState>
    186c:	06 c0       	rjmp	.+12     	; 0x187a <__vector_9+0x7a>
		else if(programPause==1) menuState = 1;
    186e:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <programPause>
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	11 f4       	brne	.+4      	; 0x187a <__vector_9+0x7a>
    1876:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <menuState>
	}	
}// End PCINT0
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <sendCommand>:
    1888:	cf 93       	push	r28
    188a:	c8 2f       	mov	r28, r24
    188c:	88 e7       	ldi	r24, 0x78	; 120
    188e:	8a d9       	rcall	.-3308   	; 0xba4 <i2cStart>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	af d9       	rcall	.-3234   	; 0xbf2 <i2cWrite>
    1894:	8c 2f       	mov	r24, r28
    1896:	ad d9       	rcall	.-3238   	; 0xbf2 <i2cWrite>
    1898:	be d9       	rcall	.-3204   	; 0xc16 <i2cStop>
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <SSD1306Init>:
    189e:	8e ea       	ldi	r24, 0xAE	; 174
    18a0:	f3 df       	rcall	.-26     	; 0x1888 <sendCommand>
    18a2:	85 ed       	ldi	r24, 0xD5	; 213
    18a4:	f1 df       	rcall	.-30     	; 0x1888 <sendCommand>
    18a6:	80 e8       	ldi	r24, 0x80	; 128
    18a8:	ef df       	rcall	.-34     	; 0x1888 <sendCommand>
    18aa:	88 ea       	ldi	r24, 0xA8	; 168
    18ac:	ed df       	rcall	.-38     	; 0x1888 <sendCommand>
    18ae:	8f e3       	ldi	r24, 0x3F	; 63
    18b0:	eb df       	rcall	.-42     	; 0x1888 <sendCommand>
    18b2:	83 ed       	ldi	r24, 0xD3	; 211
    18b4:	e9 df       	rcall	.-46     	; 0x1888 <sendCommand>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	e7 df       	rcall	.-50     	; 0x1888 <sendCommand>
    18ba:	80 e4       	ldi	r24, 0x40	; 64
    18bc:	e5 df       	rcall	.-54     	; 0x1888 <sendCommand>
    18be:	8d e8       	ldi	r24, 0x8D	; 141
    18c0:	e3 df       	rcall	.-58     	; 0x1888 <sendCommand>
    18c2:	84 e1       	ldi	r24, 0x14	; 20
    18c4:	e1 df       	rcall	.-62     	; 0x1888 <sendCommand>
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	df df       	rcall	.-66     	; 0x1888 <sendCommand>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	dd df       	rcall	.-70     	; 0x1888 <sendCommand>
    18ce:	81 ea       	ldi	r24, 0xA1	; 161
    18d0:	db df       	rcall	.-74     	; 0x1888 <sendCommand>
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	d9 df       	rcall	.-78     	; 0x1888 <sendCommand>
    18d6:	8a ed       	ldi	r24, 0xDA	; 218
    18d8:	d7 df       	rcall	.-82     	; 0x1888 <sendCommand>
    18da:	82 e1       	ldi	r24, 0x12	; 18
    18dc:	d5 df       	rcall	.-86     	; 0x1888 <sendCommand>
    18de:	81 e8       	ldi	r24, 0x81	; 129
    18e0:	d3 df       	rcall	.-90     	; 0x1888 <sendCommand>
    18e2:	8f ec       	ldi	r24, 0xCF	; 207
    18e4:	d1 df       	rcall	.-94     	; 0x1888 <sendCommand>
    18e6:	89 ed       	ldi	r24, 0xD9	; 217
    18e8:	cf df       	rcall	.-98     	; 0x1888 <sendCommand>
    18ea:	81 ef       	ldi	r24, 0xF1	; 241
    18ec:	cd df       	rcall	.-102    	; 0x1888 <sendCommand>
    18ee:	8b ed       	ldi	r24, 0xDB	; 219
    18f0:	cb df       	rcall	.-106    	; 0x1888 <sendCommand>
    18f2:	80 e4       	ldi	r24, 0x40	; 64
    18f4:	c9 df       	rcall	.-110    	; 0x1888 <sendCommand>
    18f6:	84 ea       	ldi	r24, 0xA4	; 164
    18f8:	c7 df       	rcall	.-114    	; 0x1888 <sendCommand>
    18fa:	86 ea       	ldi	r24, 0xA6	; 166
    18fc:	c5 df       	rcall	.-118    	; 0x1888 <sendCommand>
    18fe:	8f ea       	ldi	r24, 0xAF	; 175
    1900:	c3 cf       	rjmp	.-122    	; 0x1888 <sendCommand>
    1902:	08 95       	ret

00001904 <sendFramebuffer>:
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	7c 01       	movw	r14, r24
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	b9 df       	rcall	.-142    	; 0x1888 <sendCommand>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	b7 df       	rcall	.-146    	; 0x1888 <sendCommand>
    191a:	8f e7       	ldi	r24, 0x7F	; 127
    191c:	b5 df       	rcall	.-150    	; 0x1888 <sendCommand>
    191e:	82 e2       	ldi	r24, 0x22	; 34
    1920:	b3 df       	rcall	.-154    	; 0x1888 <sendCommand>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	b1 df       	rcall	.-158    	; 0x1888 <sendCommand>
    1926:	87 e0       	ldi	r24, 0x07	; 7
    1928:	af df       	rcall	.-162    	; 0x1888 <sendCommand>
    192a:	e7 01       	movw	r28, r14
    192c:	8c ef       	ldi	r24, 0xFC	; 252
    192e:	f8 1a       	sub	r15, r24
    1930:	88 e7       	ldi	r24, 0x78	; 120
    1932:	38 d9       	rcall	.-3472   	; 0xba4 <i2cStart>
    1934:	80 e4       	ldi	r24, 0x40	; 64
    1936:	5d d9       	rcall	.-3398   	; 0xbf2 <i2cWrite>
    1938:	8e 01       	movw	r16, r28
    193a:	00 5f       	subi	r16, 0xF0	; 240
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	89 91       	ld	r24, Y+
    1940:	58 d9       	rcall	.-3408   	; 0xbf2 <i2cWrite>
    1942:	c0 17       	cp	r28, r16
    1944:	d1 07       	cpc	r29, r17
    1946:	d9 f7       	brne	.-10     	; 0x193e <sendFramebuffer+0x3a>
    1948:	66 d9       	rcall	.-3380   	; 0xc16 <i2cStop>
    194a:	e8 01       	movw	r28, r16
    194c:	0e 15       	cp	r16, r14
    194e:	1f 05       	cpc	r17, r15
    1950:	79 f7       	brne	.-34     	; 0x1930 <sendFramebuffer+0x2c>
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	08 95       	ret

00001960 <__fixunssfsi>:
    1960:	70 d0       	rcall	.+224    	; 0x1a42 <__fp_splitA>
    1962:	88 f0       	brcs	.+34     	; 0x1986 <__fixunssfsi+0x26>
    1964:	9f 57       	subi	r25, 0x7F	; 127
    1966:	90 f0       	brcs	.+36     	; 0x198c <__fixunssfsi+0x2c>
    1968:	b9 2f       	mov	r27, r25
    196a:	99 27       	eor	r25, r25
    196c:	b7 51       	subi	r27, 0x17	; 23
    196e:	a0 f0       	brcs	.+40     	; 0x1998 <__fixunssfsi+0x38>
    1970:	d1 f0       	breq	.+52     	; 0x19a6 <__fixunssfsi+0x46>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	1a f0       	brmi	.+6      	; 0x1982 <__fixunssfsi+0x22>
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__fixunssfsi+0x12>
    1980:	12 c0       	rjmp	.+36     	; 0x19a6 <__fixunssfsi+0x46>
    1982:	b1 30       	cpi	r27, 0x01	; 1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <__fixunssfsi+0x46>
    1986:	77 d0       	rcall	.+238    	; 0x1a76 <__fp_zero>
    1988:	b1 e0       	ldi	r27, 0x01	; 1
    198a:	08 95       	ret
    198c:	74 c0       	rjmp	.+232    	; 0x1a76 <__fp_zero>
    198e:	67 2f       	mov	r22, r23
    1990:	78 2f       	mov	r23, r24
    1992:	88 27       	eor	r24, r24
    1994:	b8 5f       	subi	r27, 0xF8	; 248
    1996:	39 f0       	breq	.+14     	; 0x19a6 <__fixunssfsi+0x46>
    1998:	b9 3f       	cpi	r27, 0xF9	; 249
    199a:	cc f3       	brlt	.-14     	; 0x198e <__fixunssfsi+0x2e>
    199c:	86 95       	lsr	r24
    199e:	77 95       	ror	r23
    19a0:	67 95       	ror	r22
    19a2:	b3 95       	inc	r27
    19a4:	d9 f7       	brne	.-10     	; 0x199c <__fixunssfsi+0x3c>
    19a6:	3e f4       	brtc	.+14     	; 0x19b6 <__fixunssfsi+0x56>
    19a8:	90 95       	com	r25
    19aa:	80 95       	com	r24
    19ac:	70 95       	com	r23
    19ae:	61 95       	neg	r22
    19b0:	7f 4f       	sbci	r23, 0xFF	; 255
    19b2:	8f 4f       	sbci	r24, 0xFF	; 255
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	08 95       	ret

000019b8 <__floatunsisf>:
    19b8:	e8 94       	clt
    19ba:	09 c0       	rjmp	.+18     	; 0x19ce <__floatsisf+0x12>

000019bc <__floatsisf>:
    19bc:	97 fb       	bst	r25, 7
    19be:	3e f4       	brtc	.+14     	; 0x19ce <__floatsisf+0x12>
    19c0:	90 95       	com	r25
    19c2:	80 95       	com	r24
    19c4:	70 95       	com	r23
    19c6:	61 95       	neg	r22
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	99 23       	and	r25, r25
    19d0:	a9 f0       	breq	.+42     	; 0x19fc <__floatsisf+0x40>
    19d2:	f9 2f       	mov	r31, r25
    19d4:	96 e9       	ldi	r25, 0x96	; 150
    19d6:	bb 27       	eor	r27, r27
    19d8:	93 95       	inc	r25
    19da:	f6 95       	lsr	r31
    19dc:	87 95       	ror	r24
    19de:	77 95       	ror	r23
    19e0:	67 95       	ror	r22
    19e2:	b7 95       	ror	r27
    19e4:	f1 11       	cpse	r31, r1
    19e6:	f8 cf       	rjmp	.-16     	; 0x19d8 <__floatsisf+0x1c>
    19e8:	fa f4       	brpl	.+62     	; 0x1a28 <__floatsisf+0x6c>
    19ea:	bb 0f       	add	r27, r27
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <__floatsisf+0x36>
    19ee:	60 ff       	sbrs	r22, 0
    19f0:	1b c0       	rjmp	.+54     	; 0x1a28 <__floatsisf+0x6c>
    19f2:	6f 5f       	subi	r22, 0xFF	; 255
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	8f 4f       	sbci	r24, 0xFF	; 255
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	16 c0       	rjmp	.+44     	; 0x1a28 <__floatsisf+0x6c>
    19fc:	88 23       	and	r24, r24
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <__floatsisf+0x48>
    1a00:	96 e9       	ldi	r25, 0x96	; 150
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <__floatsisf+0x6a>
    1a04:	77 23       	and	r23, r23
    1a06:	21 f0       	breq	.+8      	; 0x1a10 <__floatsisf+0x54>
    1a08:	9e e8       	ldi	r25, 0x8E	; 142
    1a0a:	87 2f       	mov	r24, r23
    1a0c:	76 2f       	mov	r23, r22
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <__floatsisf+0x5e>
    1a10:	66 23       	and	r22, r22
    1a12:	71 f0       	breq	.+28     	; 0x1a30 <__floatsisf+0x74>
    1a14:	96 e8       	ldi	r25, 0x86	; 134
    1a16:	86 2f       	mov	r24, r22
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	2a f0       	brmi	.+10     	; 0x1a28 <__floatsisf+0x6c>
    1a1e:	9a 95       	dec	r25
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	da f7       	brpl	.-10     	; 0x1a1e <__floatsisf+0x62>
    1a28:	88 0f       	add	r24, r24
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	97 f9       	bld	r25, 7
    1a30:	08 95       	ret

00001a32 <__fp_split3>:
    1a32:	57 fd       	sbrc	r21, 7
    1a34:	90 58       	subi	r25, 0x80	; 128
    1a36:	44 0f       	add	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	59 f0       	breq	.+22     	; 0x1a52 <__fp_splitA+0x10>
    1a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3e:	71 f0       	breq	.+28     	; 0x1a5c <__fp_splitA+0x1a>
    1a40:	47 95       	ror	r20

00001a42 <__fp_splitA>:
    1a42:	88 0f       	add	r24, r24
    1a44:	97 fb       	bst	r25, 7
    1a46:	99 1f       	adc	r25, r25
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <__fp_splitA+0x20>
    1a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4c:	79 f0       	breq	.+30     	; 0x1a6c <__fp_splitA+0x2a>
    1a4e:	87 95       	ror	r24
    1a50:	08 95       	ret
    1a52:	12 16       	cp	r1, r18
    1a54:	13 06       	cpc	r1, r19
    1a56:	14 06       	cpc	r1, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	f2 cf       	rjmp	.-28     	; 0x1a40 <__fp_split3+0xe>
    1a5c:	46 95       	lsr	r20
    1a5e:	f1 df       	rcall	.-30     	; 0x1a42 <__fp_splitA>
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <__fp_splitA+0x30>
    1a62:	16 16       	cp	r1, r22
    1a64:	17 06       	cpc	r1, r23
    1a66:	18 06       	cpc	r1, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	f1 cf       	rjmp	.-30     	; 0x1a4e <__fp_splitA+0xc>
    1a6c:	86 95       	lsr	r24
    1a6e:	71 05       	cpc	r23, r1
    1a70:	61 05       	cpc	r22, r1
    1a72:	08 94       	sec
    1a74:	08 95       	ret

00001a76 <__fp_zero>:
    1a76:	e8 94       	clt

00001a78 <__fp_szero>:
    1a78:	bb 27       	eor	r27, r27
    1a7a:	66 27       	eor	r22, r22
    1a7c:	77 27       	eor	r23, r23
    1a7e:	cb 01       	movw	r24, r22
    1a80:	97 f9       	bld	r25, 7
    1a82:	08 95       	ret

00001a84 <__mulsf3>:
    1a84:	0b d0       	rcall	.+22     	; 0x1a9c <__mulsf3x>
    1a86:	78 c0       	rjmp	.+240    	; 0x1b78 <__fp_round>
    1a88:	69 d0       	rcall	.+210    	; 0x1b5c <__fp_pscA>
    1a8a:	28 f0       	brcs	.+10     	; 0x1a96 <__mulsf3+0x12>
    1a8c:	6e d0       	rcall	.+220    	; 0x1b6a <__fp_pscB>
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <__mulsf3+0x12>
    1a90:	95 23       	and	r25, r21
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <__mulsf3+0x12>
    1a94:	5a c0       	rjmp	.+180    	; 0x1b4a <__fp_inf>
    1a96:	5f c0       	rjmp	.+190    	; 0x1b56 <__fp_nan>
    1a98:	11 24       	eor	r1, r1
    1a9a:	ee cf       	rjmp	.-36     	; 0x1a78 <__fp_szero>

00001a9c <__mulsf3x>:
    1a9c:	ca df       	rcall	.-108    	; 0x1a32 <__fp_split3>
    1a9e:	a0 f3       	brcs	.-24     	; 0x1a88 <__mulsf3+0x4>

00001aa0 <__mulsf3_pse>:
    1aa0:	95 9f       	mul	r25, r21
    1aa2:	d1 f3       	breq	.-12     	; 0x1a98 <__mulsf3+0x14>
    1aa4:	95 0f       	add	r25, r21
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	55 1f       	adc	r21, r21
    1aaa:	62 9f       	mul	r22, r18
    1aac:	f0 01       	movw	r30, r0
    1aae:	72 9f       	mul	r23, r18
    1ab0:	bb 27       	eor	r27, r27
    1ab2:	f0 0d       	add	r31, r0
    1ab4:	b1 1d       	adc	r27, r1
    1ab6:	63 9f       	mul	r22, r19
    1ab8:	aa 27       	eor	r26, r26
    1aba:	f0 0d       	add	r31, r0
    1abc:	b1 1d       	adc	r27, r1
    1abe:	aa 1f       	adc	r26, r26
    1ac0:	64 9f       	mul	r22, r20
    1ac2:	66 27       	eor	r22, r22
    1ac4:	b0 0d       	add	r27, r0
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	66 1f       	adc	r22, r22
    1aca:	82 9f       	mul	r24, r18
    1acc:	22 27       	eor	r18, r18
    1ace:	b0 0d       	add	r27, r0
    1ad0:	a1 1d       	adc	r26, r1
    1ad2:	62 1f       	adc	r22, r18
    1ad4:	73 9f       	mul	r23, r19
    1ad6:	b0 0d       	add	r27, r0
    1ad8:	a1 1d       	adc	r26, r1
    1ada:	62 1f       	adc	r22, r18
    1adc:	83 9f       	mul	r24, r19
    1ade:	a0 0d       	add	r26, r0
    1ae0:	61 1d       	adc	r22, r1
    1ae2:	22 1f       	adc	r18, r18
    1ae4:	74 9f       	mul	r23, r20
    1ae6:	33 27       	eor	r19, r19
    1ae8:	a0 0d       	add	r26, r0
    1aea:	61 1d       	adc	r22, r1
    1aec:	23 1f       	adc	r18, r19
    1aee:	84 9f       	mul	r24, r20
    1af0:	60 0d       	add	r22, r0
    1af2:	21 1d       	adc	r18, r1
    1af4:	82 2f       	mov	r24, r18
    1af6:	76 2f       	mov	r23, r22
    1af8:	6a 2f       	mov	r22, r26
    1afa:	11 24       	eor	r1, r1
    1afc:	9f 57       	subi	r25, 0x7F	; 127
    1afe:	50 40       	sbci	r21, 0x00	; 0
    1b00:	8a f0       	brmi	.+34     	; 0x1b24 <__mulsf3_pse+0x84>
    1b02:	e1 f0       	breq	.+56     	; 0x1b3c <__mulsf3_pse+0x9c>
    1b04:	88 23       	and	r24, r24
    1b06:	4a f0       	brmi	.+18     	; 0x1b1a <__mulsf3_pse+0x7a>
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	66 1f       	adc	r22, r22
    1b10:	77 1f       	adc	r23, r23
    1b12:	88 1f       	adc	r24, r24
    1b14:	91 50       	subi	r25, 0x01	; 1
    1b16:	50 40       	sbci	r21, 0x00	; 0
    1b18:	a9 f7       	brne	.-22     	; 0x1b04 <__mulsf3_pse+0x64>
    1b1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b1c:	51 05       	cpc	r21, r1
    1b1e:	70 f0       	brcs	.+28     	; 0x1b3c <__mulsf3_pse+0x9c>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <__fp_inf>
    1b22:	aa cf       	rjmp	.-172    	; 0x1a78 <__fp_szero>
    1b24:	5f 3f       	cpi	r21, 0xFF	; 255
    1b26:	ec f3       	brlt	.-6      	; 0x1b22 <__mulsf3_pse+0x82>
    1b28:	98 3e       	cpi	r25, 0xE8	; 232
    1b2a:	dc f3       	brlt	.-10     	; 0x1b22 <__mulsf3_pse+0x82>
    1b2c:	86 95       	lsr	r24
    1b2e:	77 95       	ror	r23
    1b30:	67 95       	ror	r22
    1b32:	b7 95       	ror	r27
    1b34:	f7 95       	ror	r31
    1b36:	e7 95       	ror	r30
    1b38:	9f 5f       	subi	r25, 0xFF	; 255
    1b3a:	c1 f7       	brne	.-16     	; 0x1b2c <__mulsf3_pse+0x8c>
    1b3c:	fe 2b       	or	r31, r30
    1b3e:	88 0f       	add	r24, r24
    1b40:	91 1d       	adc	r25, r1
    1b42:	96 95       	lsr	r25
    1b44:	87 95       	ror	r24
    1b46:	97 f9       	bld	r25, 7
    1b48:	08 95       	ret

00001b4a <__fp_inf>:
    1b4a:	97 f9       	bld	r25, 7
    1b4c:	9f 67       	ori	r25, 0x7F	; 127
    1b4e:	80 e8       	ldi	r24, 0x80	; 128
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	08 95       	ret

00001b56 <__fp_nan>:
    1b56:	9f ef       	ldi	r25, 0xFF	; 255
    1b58:	80 ec       	ldi	r24, 0xC0	; 192
    1b5a:	08 95       	ret

00001b5c <__fp_pscA>:
    1b5c:	00 24       	eor	r0, r0
    1b5e:	0a 94       	dec	r0
    1b60:	16 16       	cp	r1, r22
    1b62:	17 06       	cpc	r1, r23
    1b64:	18 06       	cpc	r1, r24
    1b66:	09 06       	cpc	r0, r25
    1b68:	08 95       	ret

00001b6a <__fp_pscB>:
    1b6a:	00 24       	eor	r0, r0
    1b6c:	0a 94       	dec	r0
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	14 06       	cpc	r1, r20
    1b74:	05 06       	cpc	r0, r21
    1b76:	08 95       	ret

00001b78 <__fp_round>:
    1b78:	09 2e       	mov	r0, r25
    1b7a:	03 94       	inc	r0
    1b7c:	00 0c       	add	r0, r0
    1b7e:	11 f4       	brne	.+4      	; 0x1b84 <__fp_round+0xc>
    1b80:	88 23       	and	r24, r24
    1b82:	52 f0       	brmi	.+20     	; 0x1b98 <__fp_round+0x20>
    1b84:	bb 0f       	add	r27, r27
    1b86:	40 f4       	brcc	.+16     	; 0x1b98 <__fp_round+0x20>
    1b88:	bf 2b       	or	r27, r31
    1b8a:	11 f4       	brne	.+4      	; 0x1b90 <__fp_round+0x18>
    1b8c:	60 ff       	sbrs	r22, 0
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <__fp_round+0x20>
    1b90:	6f 5f       	subi	r22, 0xFF	; 255
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	8f 4f       	sbci	r24, 0xFF	; 255
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	08 95       	ret

00001b9a <__divmodhi4>:
    1b9a:	97 fb       	bst	r25, 7
    1b9c:	07 2e       	mov	r0, r23
    1b9e:	16 f4       	brtc	.+4      	; 0x1ba4 <__divmodhi4+0xa>
    1ba0:	00 94       	com	r0
    1ba2:	06 d0       	rcall	.+12     	; 0x1bb0 <__divmodhi4_neg1>
    1ba4:	77 fd       	sbrc	r23, 7
    1ba6:	08 d0       	rcall	.+16     	; 0x1bb8 <__divmodhi4_neg2>
    1ba8:	0b d0       	rcall	.+22     	; 0x1bc0 <__udivmodhi4>
    1baa:	07 fc       	sbrc	r0, 7
    1bac:	05 d0       	rcall	.+10     	; 0x1bb8 <__divmodhi4_neg2>
    1bae:	3e f4       	brtc	.+14     	; 0x1bbe <__divmodhi4_exit>

00001bb0 <__divmodhi4_neg1>:
    1bb0:	90 95       	com	r25
    1bb2:	81 95       	neg	r24
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__divmodhi4_neg2>:
    1bb8:	70 95       	com	r23
    1bba:	61 95       	neg	r22
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255

00001bbe <__divmodhi4_exit>:
    1bbe:	08 95       	ret

00001bc0 <__udivmodhi4>:
    1bc0:	aa 1b       	sub	r26, r26
    1bc2:	bb 1b       	sub	r27, r27
    1bc4:	51 e1       	ldi	r21, 0x11	; 17
    1bc6:	07 c0       	rjmp	.+14     	; 0x1bd6 <__udivmodhi4_ep>

00001bc8 <__udivmodhi4_loop>:
    1bc8:	aa 1f       	adc	r26, r26
    1bca:	bb 1f       	adc	r27, r27
    1bcc:	a6 17       	cp	r26, r22
    1bce:	b7 07       	cpc	r27, r23
    1bd0:	10 f0       	brcs	.+4      	; 0x1bd6 <__udivmodhi4_ep>
    1bd2:	a6 1b       	sub	r26, r22
    1bd4:	b7 0b       	sbc	r27, r23

00001bd6 <__udivmodhi4_ep>:
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	5a 95       	dec	r21
    1bdc:	a9 f7       	brne	.-22     	; 0x1bc8 <__udivmodhi4_loop>
    1bde:	80 95       	com	r24
    1be0:	90 95       	com	r25
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	08 95       	ret

00001be8 <sprintf>:
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	2e 97       	sbiw	r28, 0x0e	; 14
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	0d 89       	ldd	r16, Y+21	; 0x15
    1c02:	1e 89       	ldd	r17, Y+22	; 0x16
    1c04:	86 e0       	ldi	r24, 0x06	; 6
    1c06:	8c 83       	std	Y+4, r24	; 0x04
    1c08:	1a 83       	std	Y+2, r17	; 0x02
    1c0a:	09 83       	std	Y+1, r16	; 0x01
    1c0c:	8f ef       	ldi	r24, 0xFF	; 255
    1c0e:	9f e7       	ldi	r25, 0x7F	; 127
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	ae 01       	movw	r20, r28
    1c16:	47 5e       	subi	r20, 0xE7	; 231
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	6f 89       	ldd	r22, Y+23	; 0x17
    1c1c:	78 8d       	ldd	r23, Y+24	; 0x18
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	10 d0       	rcall	.+32     	; 0x1c44 <vfprintf>
    1c24:	ef 81       	ldd	r30, Y+7	; 0x07
    1c26:	f8 85       	ldd	r31, Y+8	; 0x08
    1c28:	e0 0f       	add	r30, r16
    1c2a:	f1 1f       	adc	r31, r17
    1c2c:	10 82       	st	Z, r1
    1c2e:	2e 96       	adiw	r28, 0x0e	; 14
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <vfprintf>:
    1c44:	2f 92       	push	r2
    1c46:	3f 92       	push	r3
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	6c 01       	movw	r12, r24
    1c7a:	7b 01       	movw	r14, r22
    1c7c:	8a 01       	movw	r16, r20
    1c7e:	fc 01       	movw	r30, r24
    1c80:	17 82       	std	Z+7, r1	; 0x07
    1c82:	16 82       	std	Z+6, r1	; 0x06
    1c84:	83 81       	ldd	r24, Z+3	; 0x03
    1c86:	81 ff       	sbrs	r24, 1
    1c88:	bf c1       	rjmp	.+894    	; 0x2008 <vfprintf+0x3c4>
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	3c 01       	movw	r6, r24
    1c90:	f6 01       	movw	r30, r12
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	f7 01       	movw	r30, r14
    1c96:	93 fd       	sbrc	r25, 3
    1c98:	85 91       	lpm	r24, Z+
    1c9a:	93 ff       	sbrs	r25, 3
    1c9c:	81 91       	ld	r24, Z+
    1c9e:	7f 01       	movw	r14, r30
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <vfprintf+0x62>
    1ca4:	ad c1       	rjmp	.+858    	; 0x2000 <vfprintf+0x3bc>
    1ca6:	85 32       	cpi	r24, 0x25	; 37
    1ca8:	39 f4       	brne	.+14     	; 0x1cb8 <vfprintf+0x74>
    1caa:	93 fd       	sbrc	r25, 3
    1cac:	85 91       	lpm	r24, Z+
    1cae:	93 ff       	sbrs	r25, 3
    1cb0:	81 91       	ld	r24, Z+
    1cb2:	7f 01       	movw	r14, r30
    1cb4:	85 32       	cpi	r24, 0x25	; 37
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <vfprintf+0x7c>
    1cb8:	b6 01       	movw	r22, r12
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	d6 d1       	rcall	.+940    	; 0x206a <fputc>
    1cbe:	e8 cf       	rjmp	.-48     	; 0x1c90 <vfprintf+0x4c>
    1cc0:	91 2c       	mov	r9, r1
    1cc2:	21 2c       	mov	r2, r1
    1cc4:	31 2c       	mov	r3, r1
    1cc6:	ff e1       	ldi	r31, 0x1F	; 31
    1cc8:	f3 15       	cp	r31, r3
    1cca:	d8 f0       	brcs	.+54     	; 0x1d02 <vfprintf+0xbe>
    1ccc:	8b 32       	cpi	r24, 0x2B	; 43
    1cce:	79 f0       	breq	.+30     	; 0x1cee <vfprintf+0xaa>
    1cd0:	38 f4       	brcc	.+14     	; 0x1ce0 <vfprintf+0x9c>
    1cd2:	80 32       	cpi	r24, 0x20	; 32
    1cd4:	79 f0       	breq	.+30     	; 0x1cf4 <vfprintf+0xb0>
    1cd6:	83 32       	cpi	r24, 0x23	; 35
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <vfprintf+0xbe>
    1cda:	23 2d       	mov	r18, r3
    1cdc:	20 61       	ori	r18, 0x10	; 16
    1cde:	1d c0       	rjmp	.+58     	; 0x1d1a <vfprintf+0xd6>
    1ce0:	8d 32       	cpi	r24, 0x2D	; 45
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <vfprintf+0xb8>
    1ce4:	80 33       	cpi	r24, 0x30	; 48
    1ce6:	69 f4       	brne	.+26     	; 0x1d02 <vfprintf+0xbe>
    1ce8:	23 2d       	mov	r18, r3
    1cea:	21 60       	ori	r18, 0x01	; 1
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <vfprintf+0xd6>
    1cee:	83 2d       	mov	r24, r3
    1cf0:	82 60       	ori	r24, 0x02	; 2
    1cf2:	38 2e       	mov	r3, r24
    1cf4:	e3 2d       	mov	r30, r3
    1cf6:	e4 60       	ori	r30, 0x04	; 4
    1cf8:	3e 2e       	mov	r3, r30
    1cfa:	2a c0       	rjmp	.+84     	; 0x1d50 <vfprintf+0x10c>
    1cfc:	f3 2d       	mov	r31, r3
    1cfe:	f8 60       	ori	r31, 0x08	; 8
    1d00:	1d c0       	rjmp	.+58     	; 0x1d3c <vfprintf+0xf8>
    1d02:	37 fc       	sbrc	r3, 7
    1d04:	2d c0       	rjmp	.+90     	; 0x1d60 <vfprintf+0x11c>
    1d06:	20 ed       	ldi	r18, 0xD0	; 208
    1d08:	28 0f       	add	r18, r24
    1d0a:	2a 30       	cpi	r18, 0x0A	; 10
    1d0c:	40 f0       	brcs	.+16     	; 0x1d1e <vfprintf+0xda>
    1d0e:	8e 32       	cpi	r24, 0x2E	; 46
    1d10:	b9 f4       	brne	.+46     	; 0x1d40 <vfprintf+0xfc>
    1d12:	36 fc       	sbrc	r3, 6
    1d14:	75 c1       	rjmp	.+746    	; 0x2000 <vfprintf+0x3bc>
    1d16:	23 2d       	mov	r18, r3
    1d18:	20 64       	ori	r18, 0x40	; 64
    1d1a:	32 2e       	mov	r3, r18
    1d1c:	19 c0       	rjmp	.+50     	; 0x1d50 <vfprintf+0x10c>
    1d1e:	36 fe       	sbrs	r3, 6
    1d20:	06 c0       	rjmp	.+12     	; 0x1d2e <vfprintf+0xea>
    1d22:	8a e0       	ldi	r24, 0x0A	; 10
    1d24:	98 9e       	mul	r9, r24
    1d26:	20 0d       	add	r18, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	92 2e       	mov	r9, r18
    1d2c:	11 c0       	rjmp	.+34     	; 0x1d50 <vfprintf+0x10c>
    1d2e:	ea e0       	ldi	r30, 0x0A	; 10
    1d30:	2e 9e       	mul	r2, r30
    1d32:	20 0d       	add	r18, r0
    1d34:	11 24       	eor	r1, r1
    1d36:	22 2e       	mov	r2, r18
    1d38:	f3 2d       	mov	r31, r3
    1d3a:	f0 62       	ori	r31, 0x20	; 32
    1d3c:	3f 2e       	mov	r3, r31
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <vfprintf+0x10c>
    1d40:	8c 36       	cpi	r24, 0x6C	; 108
    1d42:	21 f4       	brne	.+8      	; 0x1d4c <vfprintf+0x108>
    1d44:	83 2d       	mov	r24, r3
    1d46:	80 68       	ori	r24, 0x80	; 128
    1d48:	38 2e       	mov	r3, r24
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0x10c>
    1d4c:	88 36       	cpi	r24, 0x68	; 104
    1d4e:	41 f4       	brne	.+16     	; 0x1d60 <vfprintf+0x11c>
    1d50:	f7 01       	movw	r30, r14
    1d52:	93 fd       	sbrc	r25, 3
    1d54:	85 91       	lpm	r24, Z+
    1d56:	93 ff       	sbrs	r25, 3
    1d58:	81 91       	ld	r24, Z+
    1d5a:	7f 01       	movw	r14, r30
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	b3 cf       	rjmp	.-154    	; 0x1cc6 <vfprintf+0x82>
    1d60:	98 2f       	mov	r25, r24
    1d62:	9f 7d       	andi	r25, 0xDF	; 223
    1d64:	95 54       	subi	r25, 0x45	; 69
    1d66:	93 30       	cpi	r25, 0x03	; 3
    1d68:	28 f4       	brcc	.+10     	; 0x1d74 <vfprintf+0x130>
    1d6a:	0c 5f       	subi	r16, 0xFC	; 252
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	9f e3       	ldi	r25, 0x3F	; 63
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	0d c0       	rjmp	.+26     	; 0x1d8e <vfprintf+0x14a>
    1d74:	83 36       	cpi	r24, 0x63	; 99
    1d76:	31 f0       	breq	.+12     	; 0x1d84 <vfprintf+0x140>
    1d78:	83 37       	cpi	r24, 0x73	; 115
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <vfprintf+0x154>
    1d7c:	83 35       	cpi	r24, 0x53	; 83
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <vfprintf+0x13e>
    1d80:	55 c0       	rjmp	.+170    	; 0x1e2c <vfprintf+0x1e8>
    1d82:	20 c0       	rjmp	.+64     	; 0x1dc4 <vfprintf+0x180>
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 81       	ld	r24, Z
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0e 5f       	subi	r16, 0xFE	; 254
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	88 24       	eor	r8, r8
    1d90:	83 94       	inc	r8
    1d92:	91 2c       	mov	r9, r1
    1d94:	53 01       	movw	r10, r6
    1d96:	12 c0       	rjmp	.+36     	; 0x1dbc <vfprintf+0x178>
    1d98:	28 01       	movw	r4, r16
    1d9a:	f2 e0       	ldi	r31, 0x02	; 2
    1d9c:	4f 0e       	add	r4, r31
    1d9e:	51 1c       	adc	r5, r1
    1da0:	f8 01       	movw	r30, r16
    1da2:	a0 80       	ld	r10, Z
    1da4:	b1 80       	ldd	r11, Z+1	; 0x01
    1da6:	36 fe       	sbrs	r3, 6
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <vfprintf+0x16c>
    1daa:	69 2d       	mov	r22, r9
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vfprintf+0x170>
    1db0:	6f ef       	ldi	r22, 0xFF	; 255
    1db2:	7f ef       	ldi	r23, 0xFF	; 255
    1db4:	c5 01       	movw	r24, r10
    1db6:	4e d1       	rcall	.+668    	; 0x2054 <strnlen>
    1db8:	4c 01       	movw	r8, r24
    1dba:	82 01       	movw	r16, r4
    1dbc:	f3 2d       	mov	r31, r3
    1dbe:	ff 77       	andi	r31, 0x7F	; 127
    1dc0:	3f 2e       	mov	r3, r31
    1dc2:	15 c0       	rjmp	.+42     	; 0x1dee <vfprintf+0x1aa>
    1dc4:	28 01       	movw	r4, r16
    1dc6:	22 e0       	ldi	r18, 0x02	; 2
    1dc8:	42 0e       	add	r4, r18
    1dca:	51 1c       	adc	r5, r1
    1dcc:	f8 01       	movw	r30, r16
    1dce:	a0 80       	ld	r10, Z
    1dd0:	b1 80       	ldd	r11, Z+1	; 0x01
    1dd2:	36 fe       	sbrs	r3, 6
    1dd4:	03 c0       	rjmp	.+6      	; 0x1ddc <vfprintf+0x198>
    1dd6:	69 2d       	mov	r22, r9
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <vfprintf+0x19c>
    1ddc:	6f ef       	ldi	r22, 0xFF	; 255
    1dde:	7f ef       	ldi	r23, 0xFF	; 255
    1de0:	c5 01       	movw	r24, r10
    1de2:	2d d1       	rcall	.+602    	; 0x203e <strnlen_P>
    1de4:	4c 01       	movw	r8, r24
    1de6:	f3 2d       	mov	r31, r3
    1de8:	f0 68       	ori	r31, 0x80	; 128
    1dea:	3f 2e       	mov	r3, r31
    1dec:	82 01       	movw	r16, r4
    1dee:	33 fc       	sbrc	r3, 3
    1df0:	19 c0       	rjmp	.+50     	; 0x1e24 <vfprintf+0x1e0>
    1df2:	82 2d       	mov	r24, r2
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	88 16       	cp	r8, r24
    1df8:	99 06       	cpc	r9, r25
    1dfa:	a0 f4       	brcc	.+40     	; 0x1e24 <vfprintf+0x1e0>
    1dfc:	b6 01       	movw	r22, r12
    1dfe:	80 e2       	ldi	r24, 0x20	; 32
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	33 d1       	rcall	.+614    	; 0x206a <fputc>
    1e04:	2a 94       	dec	r2
    1e06:	f5 cf       	rjmp	.-22     	; 0x1df2 <vfprintf+0x1ae>
    1e08:	f5 01       	movw	r30, r10
    1e0a:	37 fc       	sbrc	r3, 7
    1e0c:	85 91       	lpm	r24, Z+
    1e0e:	37 fe       	sbrs	r3, 7
    1e10:	81 91       	ld	r24, Z+
    1e12:	5f 01       	movw	r10, r30
    1e14:	b6 01       	movw	r22, r12
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	28 d1       	rcall	.+592    	; 0x206a <fputc>
    1e1a:	21 10       	cpse	r2, r1
    1e1c:	2a 94       	dec	r2
    1e1e:	21 e0       	ldi	r18, 0x01	; 1
    1e20:	82 1a       	sub	r8, r18
    1e22:	91 08       	sbc	r9, r1
    1e24:	81 14       	cp	r8, r1
    1e26:	91 04       	cpc	r9, r1
    1e28:	79 f7       	brne	.-34     	; 0x1e08 <vfprintf+0x1c4>
    1e2a:	e1 c0       	rjmp	.+450    	; 0x1fee <vfprintf+0x3aa>
    1e2c:	84 36       	cpi	r24, 0x64	; 100
    1e2e:	11 f0       	breq	.+4      	; 0x1e34 <vfprintf+0x1f0>
    1e30:	89 36       	cpi	r24, 0x69	; 105
    1e32:	39 f5       	brne	.+78     	; 0x1e82 <vfprintf+0x23e>
    1e34:	f8 01       	movw	r30, r16
    1e36:	37 fe       	sbrs	r3, 7
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <vfprintf+0x204>
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	0c 5f       	subi	r16, 0xFC	; 252
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	08 c0       	rjmp	.+16     	; 0x1e58 <vfprintf+0x214>
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	07 2e       	mov	r0, r23
    1e4e:	00 0c       	add	r0, r0
    1e50:	88 0b       	sbc	r24, r24
    1e52:	99 0b       	sbc	r25, r25
    1e54:	0e 5f       	subi	r16, 0xFE	; 254
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	f3 2d       	mov	r31, r3
    1e5a:	ff 76       	andi	r31, 0x6F	; 111
    1e5c:	3f 2e       	mov	r3, r31
    1e5e:	97 ff       	sbrs	r25, 7
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <vfprintf+0x230>
    1e62:	90 95       	com	r25
    1e64:	80 95       	com	r24
    1e66:	70 95       	com	r23
    1e68:	61 95       	neg	r22
    1e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e70:	f0 68       	ori	r31, 0x80	; 128
    1e72:	3f 2e       	mov	r3, r31
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	a3 01       	movw	r20, r6
    1e7a:	33 d1       	rcall	.+614    	; 0x20e2 <__ultoa_invert>
    1e7c:	88 2e       	mov	r8, r24
    1e7e:	86 18       	sub	r8, r6
    1e80:	44 c0       	rjmp	.+136    	; 0x1f0a <vfprintf+0x2c6>
    1e82:	85 37       	cpi	r24, 0x75	; 117
    1e84:	31 f4       	brne	.+12     	; 0x1e92 <vfprintf+0x24e>
    1e86:	23 2d       	mov	r18, r3
    1e88:	2f 7e       	andi	r18, 0xEF	; 239
    1e8a:	b2 2e       	mov	r11, r18
    1e8c:	2a e0       	ldi	r18, 0x0A	; 10
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	25 c0       	rjmp	.+74     	; 0x1edc <vfprintf+0x298>
    1e92:	93 2d       	mov	r25, r3
    1e94:	99 7f       	andi	r25, 0xF9	; 249
    1e96:	b9 2e       	mov	r11, r25
    1e98:	8f 36       	cpi	r24, 0x6F	; 111
    1e9a:	c1 f0       	breq	.+48     	; 0x1ecc <vfprintf+0x288>
    1e9c:	18 f4       	brcc	.+6      	; 0x1ea4 <vfprintf+0x260>
    1e9e:	88 35       	cpi	r24, 0x58	; 88
    1ea0:	79 f0       	breq	.+30     	; 0x1ec0 <vfprintf+0x27c>
    1ea2:	ae c0       	rjmp	.+348    	; 0x2000 <vfprintf+0x3bc>
    1ea4:	80 37       	cpi	r24, 0x70	; 112
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <vfprintf+0x26a>
    1ea8:	88 37       	cpi	r24, 0x78	; 120
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <vfprintf+0x270>
    1eac:	a9 c0       	rjmp	.+338    	; 0x2000 <vfprintf+0x3bc>
    1eae:	e9 2f       	mov	r30, r25
    1eb0:	e0 61       	ori	r30, 0x10	; 16
    1eb2:	be 2e       	mov	r11, r30
    1eb4:	b4 fe       	sbrs	r11, 4
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <vfprintf+0x28e>
    1eb8:	fb 2d       	mov	r31, r11
    1eba:	f4 60       	ori	r31, 0x04	; 4
    1ebc:	bf 2e       	mov	r11, r31
    1ebe:	09 c0       	rjmp	.+18     	; 0x1ed2 <vfprintf+0x28e>
    1ec0:	34 fe       	sbrs	r3, 4
    1ec2:	0a c0       	rjmp	.+20     	; 0x1ed8 <vfprintf+0x294>
    1ec4:	29 2f       	mov	r18, r25
    1ec6:	26 60       	ori	r18, 0x06	; 6
    1ec8:	b2 2e       	mov	r11, r18
    1eca:	06 c0       	rjmp	.+12     	; 0x1ed8 <vfprintf+0x294>
    1ecc:	28 e0       	ldi	r18, 0x08	; 8
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <vfprintf+0x298>
    1ed2:	20 e1       	ldi	r18, 0x10	; 16
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x298>
    1ed8:	20 e1       	ldi	r18, 0x10	; 16
    1eda:	32 e0       	ldi	r19, 0x02	; 2
    1edc:	f8 01       	movw	r30, r16
    1ede:	b7 fe       	sbrs	r11, 7
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <vfprintf+0x2ac>
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	0c 5f       	subi	r16, 0xFC	; 252
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <vfprintf+0x2b8>
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 5f       	subi	r16, 0xFE	; 254
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	a3 01       	movw	r20, r6
    1efe:	f1 d0       	rcall	.+482    	; 0x20e2 <__ultoa_invert>
    1f00:	88 2e       	mov	r8, r24
    1f02:	86 18       	sub	r8, r6
    1f04:	fb 2d       	mov	r31, r11
    1f06:	ff 77       	andi	r31, 0x7F	; 127
    1f08:	3f 2e       	mov	r3, r31
    1f0a:	36 fe       	sbrs	r3, 6
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <vfprintf+0x2e4>
    1f0e:	23 2d       	mov	r18, r3
    1f10:	2e 7f       	andi	r18, 0xFE	; 254
    1f12:	a2 2e       	mov	r10, r18
    1f14:	89 14       	cp	r8, r9
    1f16:	58 f4       	brcc	.+22     	; 0x1f2e <vfprintf+0x2ea>
    1f18:	34 fe       	sbrs	r3, 4
    1f1a:	0b c0       	rjmp	.+22     	; 0x1f32 <vfprintf+0x2ee>
    1f1c:	32 fc       	sbrc	r3, 2
    1f1e:	09 c0       	rjmp	.+18     	; 0x1f32 <vfprintf+0x2ee>
    1f20:	83 2d       	mov	r24, r3
    1f22:	8e 7e       	andi	r24, 0xEE	; 238
    1f24:	a8 2e       	mov	r10, r24
    1f26:	05 c0       	rjmp	.+10     	; 0x1f32 <vfprintf+0x2ee>
    1f28:	b8 2c       	mov	r11, r8
    1f2a:	a3 2c       	mov	r10, r3
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <vfprintf+0x2f0>
    1f2e:	b8 2c       	mov	r11, r8
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <vfprintf+0x2f0>
    1f32:	b9 2c       	mov	r11, r9
    1f34:	a4 fe       	sbrs	r10, 4
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <vfprintf+0x312>
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e8 0d       	add	r30, r8
    1f3c:	f1 1d       	adc	r31, r1
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 33       	cpi	r24, 0x30	; 48
    1f42:	21 f4       	brne	.+8      	; 0x1f4c <vfprintf+0x308>
    1f44:	9a 2d       	mov	r25, r10
    1f46:	99 7e       	andi	r25, 0xE9	; 233
    1f48:	a9 2e       	mov	r10, r25
    1f4a:	09 c0       	rjmp	.+18     	; 0x1f5e <vfprintf+0x31a>
    1f4c:	a2 fe       	sbrs	r10, 2
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <vfprintf+0x318>
    1f50:	b3 94       	inc	r11
    1f52:	b3 94       	inc	r11
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <vfprintf+0x31a>
    1f56:	8a 2d       	mov	r24, r10
    1f58:	86 78       	andi	r24, 0x86	; 134
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <vfprintf+0x31a>
    1f5c:	b3 94       	inc	r11
    1f5e:	a3 fc       	sbrc	r10, 3
    1f60:	10 c0       	rjmp	.+32     	; 0x1f82 <vfprintf+0x33e>
    1f62:	a0 fe       	sbrs	r10, 0
    1f64:	06 c0       	rjmp	.+12     	; 0x1f72 <vfprintf+0x32e>
    1f66:	b2 14       	cp	r11, r2
    1f68:	80 f4       	brcc	.+32     	; 0x1f8a <vfprintf+0x346>
    1f6a:	28 0c       	add	r2, r8
    1f6c:	92 2c       	mov	r9, r2
    1f6e:	9b 18       	sub	r9, r11
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <vfprintf+0x348>
    1f72:	b2 14       	cp	r11, r2
    1f74:	58 f4       	brcc	.+22     	; 0x1f8c <vfprintf+0x348>
    1f76:	b6 01       	movw	r22, r12
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	76 d0       	rcall	.+236    	; 0x206a <fputc>
    1f7e:	b3 94       	inc	r11
    1f80:	f8 cf       	rjmp	.-16     	; 0x1f72 <vfprintf+0x32e>
    1f82:	b2 14       	cp	r11, r2
    1f84:	18 f4       	brcc	.+6      	; 0x1f8c <vfprintf+0x348>
    1f86:	2b 18       	sub	r2, r11
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <vfprintf+0x34a>
    1f8a:	98 2c       	mov	r9, r8
    1f8c:	21 2c       	mov	r2, r1
    1f8e:	a4 fe       	sbrs	r10, 4
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <vfprintf+0x36c>
    1f92:	b6 01       	movw	r22, r12
    1f94:	80 e3       	ldi	r24, 0x30	; 48
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	68 d0       	rcall	.+208    	; 0x206a <fputc>
    1f9a:	a2 fe       	sbrs	r10, 2
    1f9c:	16 c0       	rjmp	.+44     	; 0x1fca <vfprintf+0x386>
    1f9e:	a1 fc       	sbrc	r10, 1
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <vfprintf+0x364>
    1fa2:	88 e7       	ldi	r24, 0x78	; 120
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <vfprintf+0x368>
    1fa8:	88 e5       	ldi	r24, 0x58	; 88
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	b6 01       	movw	r22, r12
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <vfprintf+0x384>
    1fb0:	8a 2d       	mov	r24, r10
    1fb2:	86 78       	andi	r24, 0x86	; 134
    1fb4:	51 f0       	breq	.+20     	; 0x1fca <vfprintf+0x386>
    1fb6:	a1 fe       	sbrs	r10, 1
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vfprintf+0x37a>
    1fba:	8b e2       	ldi	r24, 0x2B	; 43
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <vfprintf+0x37c>
    1fbe:	80 e2       	ldi	r24, 0x20	; 32
    1fc0:	a7 fc       	sbrc	r10, 7
    1fc2:	8d e2       	ldi	r24, 0x2D	; 45
    1fc4:	b6 01       	movw	r22, r12
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	50 d0       	rcall	.+160    	; 0x206a <fputc>
    1fca:	89 14       	cp	r8, r9
    1fcc:	30 f4       	brcc	.+12     	; 0x1fda <vfprintf+0x396>
    1fce:	b6 01       	movw	r22, r12
    1fd0:	80 e3       	ldi	r24, 0x30	; 48
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	4a d0       	rcall	.+148    	; 0x206a <fputc>
    1fd6:	9a 94       	dec	r9
    1fd8:	f8 cf       	rjmp	.-16     	; 0x1fca <vfprintf+0x386>
    1fda:	8a 94       	dec	r8
    1fdc:	f3 01       	movw	r30, r6
    1fde:	e8 0d       	add	r30, r8
    1fe0:	f1 1d       	adc	r31, r1
    1fe2:	80 81       	ld	r24, Z
    1fe4:	b6 01       	movw	r22, r12
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	40 d0       	rcall	.+128    	; 0x206a <fputc>
    1fea:	81 10       	cpse	r8, r1
    1fec:	f6 cf       	rjmp	.-20     	; 0x1fda <vfprintf+0x396>
    1fee:	22 20       	and	r2, r2
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <vfprintf+0x3b0>
    1ff2:	4e ce       	rjmp	.-868    	; 0x1c90 <vfprintf+0x4c>
    1ff4:	b6 01       	movw	r22, r12
    1ff6:	80 e2       	ldi	r24, 0x20	; 32
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	37 d0       	rcall	.+110    	; 0x206a <fputc>
    1ffc:	2a 94       	dec	r2
    1ffe:	f7 cf       	rjmp	.-18     	; 0x1fee <vfprintf+0x3aa>
    2000:	f6 01       	movw	r30, r12
    2002:	86 81       	ldd	r24, Z+6	; 0x06
    2004:	97 81       	ldd	r25, Z+7	; 0x07
    2006:	02 c0       	rjmp	.+4      	; 0x200c <vfprintf+0x3c8>
    2008:	8f ef       	ldi	r24, 0xFF	; 255
    200a:	9f ef       	ldi	r25, 0xFF	; 255
    200c:	2b 96       	adiw	r28, 0x0b	; 11
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	cf 90       	pop	r12
    2028:	bf 90       	pop	r11
    202a:	af 90       	pop	r10
    202c:	9f 90       	pop	r9
    202e:	8f 90       	pop	r8
    2030:	7f 90       	pop	r7
    2032:	6f 90       	pop	r6
    2034:	5f 90       	pop	r5
    2036:	4f 90       	pop	r4
    2038:	3f 90       	pop	r3
    203a:	2f 90       	pop	r2
    203c:	08 95       	ret

0000203e <strnlen_P>:
    203e:	fc 01       	movw	r30, r24
    2040:	05 90       	lpm	r0, Z+
    2042:	61 50       	subi	r22, 0x01	; 1
    2044:	70 40       	sbci	r23, 0x00	; 0
    2046:	01 10       	cpse	r0, r1
    2048:	d8 f7       	brcc	.-10     	; 0x2040 <strnlen_P+0x2>
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	8e 0f       	add	r24, r30
    2050:	9f 1f       	adc	r25, r31
    2052:	08 95       	ret

00002054 <strnlen>:
    2054:	fc 01       	movw	r30, r24
    2056:	61 50       	subi	r22, 0x01	; 1
    2058:	70 40       	sbci	r23, 0x00	; 0
    205a:	01 90       	ld	r0, Z+
    205c:	01 10       	cpse	r0, r1
    205e:	d8 f7       	brcc	.-10     	; 0x2056 <strnlen+0x2>
    2060:	80 95       	com	r24
    2062:	90 95       	com	r25
    2064:	8e 0f       	add	r24, r30
    2066:	9f 1f       	adc	r25, r31
    2068:	08 95       	ret

0000206a <fputc>:
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	fb 01       	movw	r30, r22
    2074:	23 81       	ldd	r18, Z+3	; 0x03
    2076:	21 fd       	sbrc	r18, 1
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <fputc+0x16>
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	9f ef       	ldi	r25, 0xFF	; 255
    207e:	2c c0       	rjmp	.+88     	; 0x20d8 <fputc+0x6e>
    2080:	22 ff       	sbrs	r18, 2
    2082:	16 c0       	rjmp	.+44     	; 0x20b0 <fputc+0x46>
    2084:	46 81       	ldd	r20, Z+6	; 0x06
    2086:	57 81       	ldd	r21, Z+7	; 0x07
    2088:	24 81       	ldd	r18, Z+4	; 0x04
    208a:	35 81       	ldd	r19, Z+5	; 0x05
    208c:	42 17       	cp	r20, r18
    208e:	53 07       	cpc	r21, r19
    2090:	44 f4       	brge	.+16     	; 0x20a2 <fputc+0x38>
    2092:	a0 81       	ld	r26, Z
    2094:	b1 81       	ldd	r27, Z+1	; 0x01
    2096:	9d 01       	movw	r18, r26
    2098:	2f 5f       	subi	r18, 0xFF	; 255
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	31 83       	std	Z+1, r19	; 0x01
    209e:	20 83       	st	Z, r18
    20a0:	8c 93       	st	X, r24
    20a2:	26 81       	ldd	r18, Z+6	; 0x06
    20a4:	37 81       	ldd	r19, Z+7	; 0x07
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	37 83       	std	Z+7, r19	; 0x07
    20ac:	26 83       	std	Z+6, r18	; 0x06
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <fputc+0x6e>
    20b0:	8b 01       	movw	r16, r22
    20b2:	ec 01       	movw	r28, r24
    20b4:	fb 01       	movw	r30, r22
    20b6:	00 84       	ldd	r0, Z+8	; 0x08
    20b8:	f1 85       	ldd	r31, Z+9	; 0x09
    20ba:	e0 2d       	mov	r30, r0
    20bc:	09 95       	icall
    20be:	89 2b       	or	r24, r25
    20c0:	e1 f6       	brne	.-72     	; 0x207a <fputc+0x10>
    20c2:	d8 01       	movw	r26, r16
    20c4:	16 96       	adiw	r26, 0x06	; 6
    20c6:	8d 91       	ld	r24, X+
    20c8:	9c 91       	ld	r25, X
    20ca:	17 97       	sbiw	r26, 0x07	; 7
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	17 96       	adiw	r26, 0x07	; 7
    20d0:	9c 93       	st	X, r25
    20d2:	8e 93       	st	-X, r24
    20d4:	16 97       	sbiw	r26, 0x06	; 6
    20d6:	ce 01       	movw	r24, r28
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <__ultoa_invert>:
    20e2:	fa 01       	movw	r30, r20
    20e4:	aa 27       	eor	r26, r26
    20e6:	28 30       	cpi	r18, 0x08	; 8
    20e8:	51 f1       	breq	.+84     	; 0x213e <__stack+0x3f>
    20ea:	20 31       	cpi	r18, 0x10	; 16
    20ec:	81 f1       	breq	.+96     	; 0x214e <__stack+0x4f>
    20ee:	e8 94       	clt
    20f0:	6f 93       	push	r22
    20f2:	6e 7f       	andi	r22, 0xFE	; 254
    20f4:	6e 5f       	subi	r22, 0xFE	; 254
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	af 4f       	sbci	r26, 0xFF	; 255
    20fe:	b1 e0       	ldi	r27, 0x01	; 1
    2100:	3e d0       	rcall	.+124    	; 0x217e <__stack+0x7f>
    2102:	b4 e0       	ldi	r27, 0x04	; 4
    2104:	3c d0       	rcall	.+120    	; 0x217e <__stack+0x7f>
    2106:	67 0f       	add	r22, r23
    2108:	78 1f       	adc	r23, r24
    210a:	89 1f       	adc	r24, r25
    210c:	9a 1f       	adc	r25, r26
    210e:	a1 1d       	adc	r26, r1
    2110:	68 0f       	add	r22, r24
    2112:	79 1f       	adc	r23, r25
    2114:	8a 1f       	adc	r24, r26
    2116:	91 1d       	adc	r25, r1
    2118:	a1 1d       	adc	r26, r1
    211a:	6a 0f       	add	r22, r26
    211c:	71 1d       	adc	r23, r1
    211e:	81 1d       	adc	r24, r1
    2120:	91 1d       	adc	r25, r1
    2122:	a1 1d       	adc	r26, r1
    2124:	20 d0       	rcall	.+64     	; 0x2166 <__stack+0x67>
    2126:	09 f4       	brne	.+2      	; 0x212a <__stack+0x2b>
    2128:	68 94       	set
    212a:	3f 91       	pop	r19
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	26 9f       	mul	r18, r22
    2130:	11 24       	eor	r1, r1
    2132:	30 19       	sub	r19, r0
    2134:	30 5d       	subi	r19, 0xD0	; 208
    2136:	31 93       	st	Z+, r19
    2138:	de f6       	brtc	.-74     	; 0x20f0 <__ultoa_invert+0xe>
    213a:	cf 01       	movw	r24, r30
    213c:	08 95       	ret
    213e:	46 2f       	mov	r20, r22
    2140:	47 70       	andi	r20, 0x07	; 7
    2142:	40 5d       	subi	r20, 0xD0	; 208
    2144:	41 93       	st	Z+, r20
    2146:	b3 e0       	ldi	r27, 0x03	; 3
    2148:	0f d0       	rcall	.+30     	; 0x2168 <__stack+0x69>
    214a:	c9 f7       	brne	.-14     	; 0x213e <__stack+0x3f>
    214c:	f6 cf       	rjmp	.-20     	; 0x213a <__stack+0x3b>
    214e:	46 2f       	mov	r20, r22
    2150:	4f 70       	andi	r20, 0x0F	; 15
    2152:	40 5d       	subi	r20, 0xD0	; 208
    2154:	4a 33       	cpi	r20, 0x3A	; 58
    2156:	18 f0       	brcs	.+6      	; 0x215e <__stack+0x5f>
    2158:	49 5d       	subi	r20, 0xD9	; 217
    215a:	31 fd       	sbrc	r19, 1
    215c:	40 52       	subi	r20, 0x20	; 32
    215e:	41 93       	st	Z+, r20
    2160:	02 d0       	rcall	.+4      	; 0x2166 <__stack+0x67>
    2162:	a9 f7       	brne	.-22     	; 0x214e <__stack+0x4f>
    2164:	ea cf       	rjmp	.-44     	; 0x213a <__stack+0x3b>
    2166:	b4 e0       	ldi	r27, 0x04	; 4
    2168:	a6 95       	lsr	r26
    216a:	97 95       	ror	r25
    216c:	87 95       	ror	r24
    216e:	77 95       	ror	r23
    2170:	67 95       	ror	r22
    2172:	ba 95       	dec	r27
    2174:	c9 f7       	brne	.-14     	; 0x2168 <__stack+0x69>
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	61 05       	cpc	r22, r1
    217a:	71 05       	cpc	r23, r1
    217c:	08 95       	ret
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	0a 2e       	mov	r0, r26
    2184:	06 94       	lsr	r0
    2186:	57 95       	ror	r21
    2188:	47 95       	ror	r20
    218a:	37 95       	ror	r19
    218c:	27 95       	ror	r18
    218e:	ba 95       	dec	r27
    2190:	c9 f7       	brne	.-14     	; 0x2184 <__stack+0x85>
    2192:	62 0f       	add	r22, r18
    2194:	73 1f       	adc	r23, r19
    2196:	84 1f       	adc	r24, r20
    2198:	95 1f       	adc	r25, r21
    219a:	a0 1d       	adc	r26, r0
    219c:	08 95       	ret

0000219e <_exit>:
    219e:	f8 94       	cli

000021a0 <__stop_program>:
    21a0:	ff cf       	rjmp	.-2      	; 0x21a0 <__stop_program>
