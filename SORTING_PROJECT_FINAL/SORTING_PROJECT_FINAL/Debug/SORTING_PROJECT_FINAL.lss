
SORTING_PROJECT_FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000bce  00000c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ad  00800108  00800108  00000c6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001428  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cb  00000000  00000000  00002f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  0000390c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a0  00000000  00000000  000043a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	d2 c3       	rjmp	.+1956   	; 0x7aa <__vector_1>
   6:	00 00       	nop
   8:	da c3       	rjmp	.+1972   	; 0x7be <__vector_2>
   a:	00 00       	nop
   c:	e2 c3       	rjmp	.+1988   	; 0x7d2 <__vector_3>
   e:	00 00       	nop
  10:	00 c4       	rjmp	.+2048   	; 0x812 <__vector_4>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	09 c4       	rjmp	.+2066   	; 0x830 <__vector_7>
  1e:	00 00       	nop
  20:	28 c4       	rjmp	.+2128   	; 0x872 <__vector_8>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	0d c4       	rjmp	.+2074   	; 0x890 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ec       	ldi	r30, 0xCE	; 206
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a8 30       	cpi	r26, 0x08	; 8
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	a8 e0       	ldi	r26, 0x08	; 8
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 3b       	cpi	r26, 0xB5	; 181
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	9e d1       	rcall	.+828    	; 0x40c <main>
  d0:	7c c5       	rjmp	.+2808   	; 0xbca <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <timer1Init>:
#include "interrupt.h"
void timer1Init (void){ //initialize Timer 1 for CTC (Clear Timer on Compare)
	TCCR1A = 0;
  d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  d8:	08 95       	ret

000000da <timer2Init>:
/*at a clock frequency of 8MHz this is a 1.024ms timer for each while loop cycle*/
/*e.g. (32/8MHz)x(0xFF=256)=0.001024s=1.024ms*/
void timer2Init(void){ //clock is turned on during interval of use and then off when unused
	//sei(); enables all interrupts thus following is unneccessary 
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
  da:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  de:	08 95       	ret

000000e0 <mTimer2>:
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  e0:	ac 01       	movw	r20, r24
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
  e2:	e1 eb       	ldi	r30, 0xB1	; 177
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	93 60       	ori	r25, 0x03	; 3
  ea:	90 83       	st	Z, r25
	TCNT2=0x00; //set timer equal to zero
  ec:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
  f0:	b8 99       	sbic	0x17, 0	; 23
  f2:	b8 9a       	sbi	0x17, 0	; 23
	//TIMSK2 |= _BV(TOIE2); //enable Timer/Counter 2 Overflow interrupt; sets TOV2 bit in TIFR2 register upon overflow
	TCCR2A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV2 flag
		//TOP=0xFF; Update is immediate
	//TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32); starts timer
}
void mTimer2(int count){
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	05 c0       	rjmp	.+10     	; 0x104 <mTimer2+0x24>
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
  fa:	b8 9b       	sbis	0x17, 0	; 23
  fc:	fe cf       	rjmp	.-4      	; 0xfa <mTimer2+0x1a>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
  fe:	b8 9a       	sbi	0x17, 0	; 23
			i+=1;
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
void mTimer2(int count){
	int i=0;
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	while (i<count){ //iterate through given count
 104:	24 17       	cp	r18, r20
 106:	35 07       	cpc	r19, r21
 108:	1c f4       	brge	.+6      	; 0x110 <mTimer2+0x30>
		if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 10a:	b8 9b       	sbis	0x17, 0	; 23
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <mTimer2+0x1a>
 10e:	f7 cf       	rjmp	.-18     	; 0xfe <mTimer2+0x1e>
			TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit
			i+=1;
			//equivalent; TIFR2 |= _BV(TOV2)
		}
	}
	TCCR2B&=0b11111000; //disable timer 2
 110:	e1 eb       	ldi	r30, 0xB1	; 177
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <timer3Init>:
}
void timer3Init(void){ //clock is turned on during interval of use and then off when unused
	TCCR3A=0; //Mode 0:normal port operation; keeps counting no matter what; means you have to reset the TOV3 flag
 11c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 120:	08 95       	ret

00000122 <stepperControl>:
	return (0); //This line returns a 0 value to the calling program
	// generally means no error was returned
}

/*function allows control of direction and quantity of steps to */
void stepperControl(int steps,int *stepperPos, int *stepperIt){
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	7b 01       	movw	r14, r22
 13c:	5a 01       	movw	r10, r20
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
 13e:	da 01       	movw	r26, r20
 140:	ed 91       	ld	r30, X+
 142:	fc 91       	ld	r31, X
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
	if (steps > 0){ 
 144:	18 16       	cp	r1, r24
 146:	19 06       	cpc	r1, r25
 148:	2c f4       	brge	.+10     	; 0x154 <stepperControl+0x32>
		DIRECTION = 1;// positive or clock-wise
		absSteps = steps;
 14a:	4c 01       	movw	r8, r24
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
	if (steps > 0){ 
		DIRECTION = 1;// positive or clock-wise
 14c:	cc 24       	eor	r12, r12
 14e:	c3 94       	inc	r12
 150:	d1 2c       	mov	r13, r1
 152:	0e c0       	rjmp	.+28     	; 0x170 <stepperControl+0x4e>
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
	uint8_t delay = maxDelay;
	int PORTAREGSet = *stepperIt;
	int DIRECTION = 1;
	uint16_t absSteps = abs(steps); //compute absolute value now to save computations in "for" loop
 154:	ec 01       	movw	r28, r24
 156:	99 23       	and	r25, r25
 158:	24 f4       	brge	.+8      	; 0x162 <stepperControl+0x40>
 15a:	cc 27       	eor	r28, r28
 15c:	dd 27       	eor	r29, r29
 15e:	c8 1b       	sub	r28, r24
 160:	d9 0b       	sbc	r29, r25
 162:	4e 01       	movw	r8, r28
	if (steps > 0){ 
		DIRECTION = 1;// positive or clock-wise
		absSteps = steps;
	} else if (steps < 0) {
 164:	c9 2e       	mov	r12, r25
 166:	cc 0c       	add	r12, r12
 168:	cc 08       	sbc	r12, r12
 16a:	0c 2c       	mov	r0, r12
 16c:	00 0c       	add	r0, r0
 16e:	dd 08       	sbc	r13, r13
		DIRECTION = -1; //negative or counter-clock-wise
		absSteps = abs(steps);
	} else DIRECTION=0;		
	if(absSteps<(differential*2)){ //if there isn't enough time for stepper to fully ramp up to full speed
 170:	b0 e1       	ldi	r27, 0x10	; 16
 172:	8b 16       	cp	r8, r27
 174:	91 04       	cpc	r9, r1
 176:	40 f4       	brcc	.+16     	; 0x188 <stepperControl+0x66>
		minDelay=maxDelay-absSteps/2;
 178:	94 01       	movw	r18, r8
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	02 2f       	mov	r16, r18
 180:	3f e0       	ldi	r19, 0x0F	; 15
 182:	53 2f       	mov	r21, r19
 184:	52 1b       	sub	r21, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <stepperControl+0x6a>
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
	uint8_t differential = maxDelay - minDelay;
 188:	08 e0       	ldi	r16, 0x08	; 8
void stepperControl(int steps,int *stepperPos, int *stepperIt){
	/*function variable declarations*/
	int i=0; //step quantity
	int k=0; //timer counter
	uint8_t maxDelay = 15; //20ms corresponds to 50 steps per second
	uint8_t minDelay = 7; //5ms corresponds to 200 steps per second; or 1 revolution per second
 18a:	57 e0       	ldi	r21, 0x07	; 7
		minDelay=maxDelay-absSteps/2;
		differential = maxDelay - minDelay;
	}
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
 18c:	ec 0d       	add	r30, r12
 18e:	fd 1d       	adc	r31, r13
	if(PORTAREGSet==4)PORTAREGSet=0;
 190:	e4 30       	cpi	r30, 0x04	; 4
 192:	f1 05       	cpc	r31, r1
 194:	39 f0       	breq	.+14     	; 0x1a4 <stepperControl+0x82>
	if(PORTAREGSet==-1)PORTAREGSet=3;
 196:	ef 3f       	cpi	r30, 0xFF	; 255
 198:	cf ef       	ldi	r28, 0xFF	; 255
 19a:	fc 07       	cpc	r31, r28
 19c:	29 f4       	brne	.+10     	; 0x1a8 <stepperControl+0x86>
 19e:	e3 e0       	ldi	r30, 0x03	; 3
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <stepperControl+0x86>
		differential = maxDelay - minDelay;
	}
	/*perform one stepper cycle before "for" loop so there is no wasted delay at
	beginning or end of stepper motion*/
	PORTAREGSet+=DIRECTION;
	if(PORTAREGSet==4)PORTAREGSet=0;
 1a4:	e0 e0       	ldi	r30, 0x00	; 0
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
	if(PORTAREGSet==-1)PORTAREGSet=3;
	//TCCR1B &= 0b11111000; //disable timer1; needed due to automated counter in ISR that may cause missed steps
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
 1a8:	a1 eb       	ldi	r26, 0xB1	; 177
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	2c 91       	ld	r18, X
 1ae:	23 60       	ori	r18, 0x03	; 3
 1b0:	2c 93       	st	X, r18
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
 1b2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
 1b6:	b8 99       	sbic	0x17, 0	; 23
 1b8:	b8 9a       	sbi	0x17, 0	; 23
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
 1ba:	df 01       	movw	r26, r30
 1bc:	aa 0f       	add	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a0 50       	subi	r26, 0x00	; 0
 1c2:	bf 4f       	sbci	r27, 0xFF	; 255
 1c4:	2c 91       	ld	r18, X
 1c6:	22 b9       	out	0x02, r18	; 2
	for(i=2;i<=absSteps;i++){	
 1c8:	d2 e0       	ldi	r29, 0x02	; 2
 1ca:	8d 16       	cp	r8, r29
 1cc:	91 04       	cpc	r9, r1
 1ce:	f0 f1       	brcs	.+124    	; 0x24c <stepperControl+0x12a>
 1d0:	4f e0       	ldi	r20, 0x0F	; 15
 1d2:	a2 e0       	ldi	r26, 0x02	; 2
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	94 01       	movw	r18, r8
 1de:	2a 1b       	sub	r18, r26
 1e0:	3b 0b       	sbc	r19, r27
 1e2:	02 17       	cp	r16, r18
 1e4:	13 07       	cpc	r17, r19
 1e6:	20 f4       	brcc	.+8      	; 0x1f0 <stepperControl+0xce>
			if(delay>minDelay)delay -= 1;
 1e8:	54 17       	cp	r21, r20
 1ea:	30 f4       	brcc	.+12     	; 0x1f8 <stepperControl+0xd6>
 1ec:	41 50       	subi	r20, 0x01	; 1
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <stepperControl+0xdc>
			else delay = minDelay;
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
 1f0:	4f 30       	cpi	r20, 0x0F	; 15
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <stepperControl+0xda>
 1f4:	4f 5f       	subi	r20, 0xFF	; 255
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <stepperControl+0xdc>
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
		//ramp up
		if((absSteps-i) > (differential+1)){ //the "added" one causes it to slow down one step early
			if(delay>minDelay)delay -= 1;
			else delay = minDelay;
 1f8:	45 2f       	mov	r20, r21
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <stepperControl+0xdc>
		} else { //ramp down if the amount of steps left are less than the differential between max and min delays
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
 1fc:	4f e0       	ldi	r20, 0x0F	; 15
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
 1fe:	ec 0d       	add	r30, r12
 200:	fd 1d       	adc	r31, r13
		if(PORTAREGSet==4)PORTAREGSet=0;
 202:	e4 30       	cpi	r30, 0x04	; 4
 204:	f1 05       	cpc	r31, r1
 206:	39 f0       	breq	.+14     	; 0x216 <stepperControl+0xf4>
		if(PORTAREGSet==-1)PORTAREGSet=3;
 208:	ef 3f       	cpi	r30, 0xFF	; 255
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	f2 07       	cpc	r31, r18
 20e:	29 f4       	brne	.+10     	; 0x21a <stepperControl+0xf8>
 210:	e3 e0       	ldi	r30, 0x03	; 3
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <stepperControl+0xf8>
			if(delay<maxDelay)delay += 1;
			else delay = maxDelay;
		}
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
 216:	e0 e0       	ldi	r30, 0x00	; 0
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	64 2f       	mov	r22, r20
 21c:	70 e0       	ldi	r23, 0x00	; 0
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
		while (k<delay){ //iterate through given count
 222:	05 c0       	rjmp	.+10     	; 0x22e <stepperControl+0x10c>
			if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
 224:	b8 9b       	sbis	0x17, 0	; 23
 226:	03 c0       	rjmp	.+6      	; 0x22e <stepperControl+0x10c>
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit;equivalent => TIFR2 |= _BV(TOV2)
 228:	b8 9a       	sbi	0x17, 0	; 23
				k++;
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
		/*determine direction and then iterate through stepper signals in correct direction*/
		PORTAREGSet+=DIRECTION;
		if(PORTAREGSet==4)PORTAREGSet=0;
		if(PORTAREGSet==-1)PORTAREGSet=3;
		k=0; //reset counter for timer
		while (k<delay){ //iterate through given count
 22e:	26 17       	cp	r18, r22
 230:	37 07       	cpc	r19, r23
 232:	c1 f7       	brne	.-16     	; 0x224 <stepperControl+0x102>
			if ((TIFR2 & 0x01) == 0x01){ //if overflow has occurred in counter
				TIFR2|=0x01; //reset overflow flag by writing a 1 to TOV2 bit;equivalent => TIFR2 |= _BV(TOV2)
				k++;
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
 234:	9f 01       	movw	r18, r30
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	20 50       	subi	r18, 0x00	; 0
 23c:	3f 4f       	sbci	r19, 0xFF	; 255
 23e:	e9 01       	movw	r28, r18
 240:	28 81       	ld	r18, Y
 242:	22 b9       	out	0x02, r18	; 2
	//TCCR1B &= 0b11111000; //disable timer1; needed due to automated counter in ISR that may cause missed steps
	TCCR2B |= _BV(CS20) | _BV(CS21); //clock pre-scalar (clk/32)
	TCNT2=0x00; //set timer equal to zero; note timer is already counting based on clock prescalar
	if ((TIFR2 & 0x01) == 0x01)TIFR2|=0x01; //if TOV2 flag is set to 1, reset it to zero
	PORTA = stepperSigOrd[PORTAREGSet];//initialize first step
	for(i=2;i<=absSteps;i++){	
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	8a 16       	cp	r8, r26
 248:	9b 06       	cpc	r9, r27
 24a:	40 f6       	brcc	.-112    	; 0x1dc <stepperControl+0xba>
				k++;
			}
		}
		PORTA = stepperSigOrd[PORTAREGSet];//move stepper after first delay
	}
	TCCR2B&=0b11111000; //disable timer 2
 24c:	a1 eb       	ldi	r26, 0xB1	; 177
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	2c 91       	ld	r18, X
 252:	28 7f       	andi	r18, 0xF8	; 248
 254:	2c 93       	st	X, r18
	//re-enable timer 1 and re-initialize counter so the next early step doesn't occur until 16ms later, not instantly
	//TCCR1B |= _BV(CS10); //clock pre-scalar (clk/1); 8ms per overflow; Starts timer1
	//TCNT1=0x0000; //set timer equal to zero
	//if ((TIFR1 & 0x01) == 0x01)TIFR1|=0x01; //if TOV1 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
	//stepEarlyCount =0; //reset counter for timer1
	*stepperIt=PORTAREGSet;
 256:	d5 01       	movw	r26, r10
 258:	ed 93       	st	X+, r30
 25a:	fc 93       	st	X, r31
	//*stepperIt=stepperSigOrd[(CURRENT_ITERATION+DIRECTION*(i-1))%4]; //set value of current iteration to variable address
	*stepperPos -= steps;
	*stepperPos %= 200; //represents 200 (0->199) steps of stepper positioning in a circle
 25c:	e7 01       	movw	r28, r14
 25e:	28 81       	ld	r18, Y
 260:	39 81       	ldd	r19, Y+1	; 0x01
 262:	f9 01       	movw	r30, r18
 264:	e8 1b       	sub	r30, r24
 266:	f9 0b       	sbc	r31, r25
 268:	cf 01       	movw	r24, r30
 26a:	68 ec       	ldi	r22, 0xC8	; 200
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	86 d4       	rcall	.+2316   	; 0xb7c <__divmodhi4>
 270:	99 83       	std	Y+1, r25	; 0x01
 272:	88 83       	st	Y, r24
	return; //returns nothing
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	af 90       	pop	r10
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	08 95       	ret

0000028e <stepperHome>:
////--ODA: CHANGE SO NO INTERRUPT IS USED FOR HALL EFFECT, simply check for voltage on an input pin
void stepperHome(int *stepperPos, int *stepperIt){
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	8c 01       	movw	r16, r24
 29c:	7b 01       	movw	r14, r22
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
 29e:	12 b8       	out	0x02, r1	; 2
	return; //returns nothing
}
////--ODA: CHANGE SO NO INTERRUPT IS USED FOR HALL EFFECT, simply check for voltage on an input pin
void stepperHome(int *stepperPos, int *stepperIt){
	uint8_t delay = 30; //20ms corresponds to 50 steps per second
	int i=0;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (PINE&0b00001000){ //Active low for hall effect sensor triggering
 2a4:	10 c0       	rjmp	.+32     	; 0x2c6 <stepperHome+0x38>
		PORTA = stepperSigOrd[i];
 2a6:	fe 01       	movw	r30, r28
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e0 50       	subi	r30, 0x00	; 0
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 2b4:	8e e1       	ldi	r24, 0x1E	; 30
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	13 df       	rcall	.-474    	; 0xe0 <mTimer2>
		i++;
 2ba:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2bc:	c4 30       	cpi	r28, 0x04	; 4
 2be:	d1 05       	cpc	r29, r1
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <stepperHome+0x38>
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
	int i=0;
	int x=0;
	uint8_t offset=2; //arbitrary at this point
	uint8_t DIRECTION=1; //1 for clockwise, -1 for counter-clockwise
	PORTA=0x00;
	while (PINE&0b00001000){ //Active low for hall effect sensor triggering
 2c6:	63 99       	sbic	0x0c, 3	; 12
 2c8:	ee cf       	rjmp	.-36     	; 0x2a6 <stepperHome+0x18>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 2ca:	c4 30       	cpi	r28, 0x04	; 4
 2cc:	d1 05       	cpc	r29, r1
 2ce:	a9 f1       	breq	.+106    	; 0x33a <stepperHome+0xac>
		if (i==-1)i=3;
 2d0:	cf 3f       	cpi	r28, 0xFF	; 255
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	d8 07       	cpc	r29, r24
 2d6:	41 f1       	breq	.+80     	; 0x328 <stepperHome+0x9a>
		PORTA = stepperSigOrd[i];
 2d8:	fe 01       	movw	r30, r28
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	80 81       	ld	r24, Z
 2e4:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 2e6:	8e e1       	ldi	r24, 0x1E	; 30
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fa de       	rcall	.-524    	; 0xe0 <mTimer2>
		if (i==4)i=0;
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 2ec:	21 96       	adiw	r28, 0x01	; 1
		if (i==4)i=0;
 2ee:	c4 30       	cpi	r28, 0x04	; 4
 2f0:	d1 05       	cpc	r29, r1
 2f2:	39 f0       	breq	.+14     	; 0x302 <stepperHome+0x74>
		if (i==-1)i=3;
 2f4:	cf 3f       	cpi	r28, 0xFF	; 255
 2f6:	ef ef       	ldi	r30, 0xFF	; 255
 2f8:	de 07       	cpc	r29, r30
 2fa:	29 f4       	brne	.+10     	; 0x306 <stepperHome+0x78>
 2fc:	c3 e0       	ldi	r28, 0x03	; 3
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <stepperHome+0x78>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 302:	c0 e0       	ldi	r28, 0x00	; 0
 304:	d0 e0       	ldi	r29, 0x00	; 0
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 306:	fe 01       	movw	r30, r28
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e0 50       	subi	r30, 0x00	; 0
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	80 81       	ld	r24, Z
 312:	82 b9       	out	0x02, r24	; 2
		mTimer2(delay);
 314:	8e e1       	ldi	r24, 0x1E	; 30
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	e3 de       	rcall	.-570    	; 0xe0 <mTimer2>
	}
	*stepperIt = i;//set current stepper iteration
 31a:	f7 01       	movw	r30, r14
 31c:	d1 83       	std	Z+1, r29	; 0x01
 31e:	c0 83       	st	Z, r28
	*stepperPos=0; //base stepper position (on black)
 320:	f8 01       	movw	r30, r16
 322:	11 82       	std	Z+1, r1	; 0x01
 324:	10 82       	st	Z, r1
}
 326:	12 c0       	rjmp	.+36     	; 0x34c <stepperHome+0xbe>
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 328:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_start+0x6>
		mTimer2(delay);
 32c:	82 b9       	out	0x02, r24	; 2
 32e:	8e e1       	ldi	r24, 0x1E	; 30
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	d6 de       	rcall	.-596    	; 0xe0 <mTimer2>
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
		if (i==4)i=0;
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	e6 cf       	rjmp	.-52     	; 0x306 <stepperHome+0x78>
		if (i==-1)i=3;
		PORTA = stepperSigOrd[i];
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		mTimer2(delay);
 33e:	82 b9       	out	0x02, r24	; 2
 340:	8e e1       	ldi	r24, 0x1E	; 30
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	cd de       	rcall	.-614    	; 0xe0 <mTimer2>
		if (i==4)i=0;
	}
	i--;
	/*Insert code here to compensate for offset */
	for (x=0;x<offset;x++){
		i+=DIRECTION;
 346:	c1 e0       	ldi	r28, 0x01	; 1
 348:	d0 e0       	ldi	r29, 0x00	; 0
 34a:	dd cf       	rjmp	.-70     	; 0x306 <stepperHome+0x78>
		PORTA = stepperSigOrd[i];
		mTimer2(delay);
	}
	*stepperIt = i;//set current stepper iteration
	*stepperPos=0; //base stepper position (on black)
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	08 95       	ret

0000035a <setupPWM>:
/*initializing the dc motor*/
void setupPWM(int motorDuty){
 35a:	bc 01       	movw	r22, r24
	uint8_t dutyCycle = 0;
	/*DC MOTOR PWM SETUP (runs conveyor)*/
	TCCR0A |= _BV(WGM00) | _BV(WGM01) | _BV(COM0A1); /*set to Fast PWM; OCRx updated at TOP; TOV set on MAX; Clear OC0A on Compare Match, set OC0A at TOP*/
 35c:	84 b5       	in	r24, 0x24	; 36
 35e:	83 68       	ori	r24, 0x83	; 131
 360:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01) | _BV(CS00);//Set clock pre-scalar (8MHz*1/64): 488Hz measured on PB7*
 362:	85 b5       	in	r24, 0x25	; 37
 364:	83 60       	ori	r24, 0x03	; 3
 366:	85 bd       	out	0x25, r24	; 37
	dutyCycle = motorDuty*2.55;
 368:	07 2e       	mov	r0, r23
 36a:	00 0c       	add	r0, r0
 36c:	88 0b       	sbc	r24, r24
 36e:	99 0b       	sbc	r25, r25
 370:	16 d3       	rcall	.+1580   	; 0x99e <__floatsisf>
 372:	23 e3       	ldi	r18, 0x33	; 51
 374:	33 e3       	ldi	r19, 0x33	; 51
 376:	43 e2       	ldi	r20, 0x23	; 35
 378:	50 e4       	ldi	r21, 0x40	; 64
 37a:	75 d3       	rcall	.+1770   	; 0xa66 <__mulsf3>
 37c:	e2 d2       	rcall	.+1476   	; 0x942 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle/start motor
 37e:	67 bd       	out	0x27, r22	; 39
	PORTB &= 0xF0; //Apply Vcc brake to conveyor
 380:	85 b1       	in	r24, 0x05	; 5
 382:	80 7f       	andi	r24, 0xF0	; 240
 384:	85 b9       	out	0x05, r24	; 5
 386:	08 95       	ret

00000388 <setupISR>:
void setupISR(void){
	/*INT(7:4) => PE(7:4); INT(3:0) => PD(3:0)*/
	//Ex: rising edge on INT2: EICRA |= _BV(ISC21) | _BV(ISC20);
	//Ex: falling edge on INT2: EICRA |= _BV(ISC21);
	//see ISR routines for 
	EIMSK |= _BV(INT7) |_BV(INT6)|_BV(INT3)|_BV(INT2);
 388:	8d b3       	in	r24, 0x1d	; 29
 38a:	8c 6c       	ori	r24, 0xCC	; 204
 38c:	8d bb       	out	0x1d, r24	; 29
	//EIMSK |= 0b00111100; //initialize INT5:2
	EICRA |= _BV(ISC21) | _BV(ISC20) | _BV(ISC31);
 38e:	e9 e6       	ldi	r30, 0x69	; 105
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	80 6b       	ori	r24, 0xB0	; 176
 396:	80 83       	st	Z, r24
	//EICRA |= 0b10110000; //rising edge trigger (active low) for OI (INT2); falling edge detection (active low) for IN (INT3)
	EICRB |= _BV(ISC71) | _BV(ISC70) | _BV(ISC61);
 398:	ea e6       	ldi	r30, 0x6A	; 106
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 6e       	ori	r24, 0xE0	; 224
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <setupADC>:
	//EICRB |= 0b00001011; //rising edge trigger (active high) for OR (INT6); falling edge detection (active low) for EX (INT7)
}
void setupADC(void){
	ADCSRA |= _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS0); //adc scalar = 32;
 3a4:	ea e7       	ldi	r30, 0x7A	; 122
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	8d 68       	ori	r24, 0x8D	; 141
 3ac:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | _BV(MUX0); //AVcc reference (3.3V);read from ADC 1;output left-adjusted
 3ae:	ec e7       	ldi	r30, 0x7C	; 124
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	81 64       	ori	r24, 0x41	; 65
 3b6:	80 83       	st	Z, r24
	ADMUX &= 0b11100001; //reading from PF1 (ADC1); ADC0 works, but MCU has thermistor on pin...
 3b8:	80 81       	ld	r24, Z
 3ba:	81 7e       	andi	r24, 0xE1	; 225
 3bc:	80 83       	st	Z, r24
 3be:	08 95       	ret

000003c0 <motorControl>:
}
void motorControl(int s, uint8_t d){//note that DC motor driver expects inverted bits
	uint8_t dutyCycle = 0;
	static uint8_t oldDirection;
	if((oldDirection & 0b00000011) != d){ //if current direction doesn't match new direction
 3c0:	26 2f       	mov	r18, r22
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__data_end>
 3c8:	43 70       	andi	r20, 0x03	; 3
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	42 17       	cp	r20, r18
 3ce:	53 07       	cpc	r21, r19
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <motorControl+0x32>
		PORTB &= 0b11110000; //apply Vcc Brake
 3d2:	45 b1       	in	r20, 0x05	; 5
 3d4:	40 7f       	andi	r20, 0xF0	; 240
 3d6:	45 b9       	out	0x05, r20	; 5
		PORTB |= ((~d & 0b11) << 2); //start motor in specified direction
 3d8:	45 b1       	in	r20, 0x05	; 5
 3da:	20 95       	com	r18
 3dc:	30 95       	com	r19
 3de:	23 70       	andi	r18, 0x03	; 3
 3e0:	33 27       	eor	r19, r19
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	24 2b       	or	r18, r20
 3ec:	25 b9       	out	0x05, r18	; 5
		oldDirection=d;
 3ee:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <__data_end>
	}
	dutyCycle = s*2.55;
 3f2:	bc 01       	movw	r22, r24
 3f4:	99 0f       	add	r25, r25
 3f6:	88 0b       	sbc	r24, r24
 3f8:	99 0b       	sbc	r25, r25
 3fa:	d1 d2       	rcall	.+1442   	; 0x99e <__floatsisf>
 3fc:	23 e3       	ldi	r18, 0x33	; 51
 3fe:	33 e3       	ldi	r19, 0x33	; 51
 400:	43 e2       	ldi	r20, 0x23	; 35
 402:	50 e4       	ldi	r21, 0x40	; 64
 404:	30 d3       	rcall	.+1632   	; 0xa66 <__mulsf3>
 406:	9d d2       	rcall	.+1338   	; 0x942 <__fixunssfsi>
	OCR0A = dutyCycle;//set duty cycle
 408:	67 bd       	out	0x27, r22	; 39
 40a:	08 95       	ret

0000040c <main>:
volatile unsigned char systemRampFlag; //corresponds to system ramp down function
//volatile unsigned char HallEffect; //becomes set during stepper homing to know position
unsigned int stepperSigOrd[4] = {0b00110110,0b00101110,0b00101101,0b00110101};

/* Main Routine */
int main(int argc, char *argv[]){
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <main+0x6>
 412:	00 d0       	rcall	.+0      	; 0x414 <main+0x8>
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	CLKPR = _BV(CLKPCE);/*initialize clock to 8MHz*/
 418:	e1 e6       	ldi	r30, 0x61	; 97
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	80 83       	st	Z, r24
	CLKPR = 0;
 420:	10 82       	st	Z, r1
	/*User Variables*/
	int i=0x00; //solely used in for loops
	int stepperPosition = 0x00; //stepper position w.r.t. 360 degrees (circle); steps 0-200 => degrees 0-360
 422:	1a 82       	std	Y+2, r1	; 0x02
 424:	19 82       	std	Y+1, r1	; 0x01
	int stepperIteration = 0x00;
 426:	1c 82       	std	Y+4, r1	; 0x04
 428:	1b 82       	std	Y+3, r1	; 0x03
	//int OIEX_Count = 0x00; //count of objects between optical sensors 1 and 3 (Exit sensor)
	//int OREX_Count = 0x00; //count of objects between optical sensors 2 and 3 (Exit sensor)
	int RLEX_Count = 0x00; //count of objects that have had their reflectivity measured, but not reached sensor 3 (EX)
	uint8_t tempFerrous=0;
	/*initializations*/
	cli(); //disable interrupts
 42a:	f8 94       	cli
	setupPWM(CONVEYOR_SPEED); //DC Motor PWM setup;
 42c:	88 e2       	ldi	r24, 0x28	; 40
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	94 df       	rcall	.-216    	; 0x35a <setupPWM>
	setupISR();
 432:	aa df       	rcall	.-172    	; 0x388 <setupISR>
	setupADC();
 434:	b7 df       	rcall	.-146    	; 0x3a4 <setupADC>
	timer1Init();
 436:	4e de       	rcall	.-868    	; 0xd4 <timer1Init>
 438:	50 de       	rcall	.-864    	; 0xda <timer2Init>
	timer2Init();
 43a:	70 de       	rcall	.-800    	; 0x11c <timer3Init>
 43c:	8f ef       	ldi	r24, 0xFF	; 255
	timer3Init();
 43e:	81 b9       	out	0x01, r24	; 1
 440:	84 b9       	out	0x04, r24	; 4
	/*Port I/O Definitions*/
	DDRA = 0xFF; /* Sets all pins on Port A to output: stepper motor control */
 442:	87 b9       	out	0x07, r24	; 7
 444:	80 ef       	ldi	r24, 0xF0	; 240
		/*stepper motor connections to MCU: PA5:0 = EN0, L1, L2, EN1, L3, L4*/
	DDRB = 0xFF; /*controls dc motor: PB7=PWM signal PB3:0={INA,INB,ENA,ENB}*/
 446:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF; //LEDs Debugging
 448:	1d b8       	out	0x0d, r1	; 13
	DDRD = 0xF0; //upper nibble for on-board bi-color LEDs, interrupts on lower nibble	PORTD3:0=INT3:0
 44a:	10 ba       	out	0x10, r1	; 16
 44c:	78 94       	sei
	DDRE = 0x00; /*PE3=HallEffect for stepper, interrupts on upper nibble*/
 44e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <OR_Count+0x1>
	DDRF = 0x00; /*PF1=ADC1 pin*/	
	sei(); //enable interrupts
 452:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <OR_Count>
	/*initialize flags and counters*/
	OR_Count=0;
 456:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <RL_Count+0x1>
 45a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <RL_Count>
	RL_Count=0;
 45e:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <OI_Count+0x1>
 462:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <OI_Count>
	OI_Count=0;
 466:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <EX_Count+0x1>
 46a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <EX_Count>
	EX_Count=0;
 46e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <OIRL_Count+0x1>
 472:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <OIRL_Count>
	OIRL_Count=0;
 476:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <inductiveFlag>
 47a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <optExitFlag>
	falseInductFlag=0;
	inductiveFlag=0x00;
 47e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ADCResultFlag>
	optExitFlag=0x00;
 482:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <stepEarlyCount+0x1>
	ADCResultFlag=0x00;	
 486:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <stepEarlyCount>
	//HallEffect=0x00; 
	stepEarlyCount=0x00;
 48a:	8a ea       	ldi	r24, 0xAA	; 170
 48c:	88 b9       	out	0x08, r24	; 8
	PORTC=0b10101010;
 48e:	80 ed       	ldi	r24, 0xD0	; 208
 490:	97 e0       	ldi	r25, 0x07	; 7
	mTimer2(2000);
 492:	26 de       	rcall	.-948    	; 0xe0 <mTimer2>
 494:	8f e0       	ldi	r24, 0x0F	; 15
 496:	88 b9       	out	0x08, r24	; 8
	PORTC=0b00001111;
 498:	80 ed       	ldi	r24, 0xD0	; 208
 49a:	97 e0       	ldi	r25, 0x07	; 7
	mTimer2(2000);
 49c:	21 de       	rcall	.-958    	; 0xe0 <mTimer2>
 49e:	be 01       	movw	r22, r28
 4a0:	6d 5f       	subi	r22, 0xFD	; 253
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	f2 de       	rcall	.-540    	; 0x28e <stepperHome>
 4aa:	62 e0       	ldi	r22, 0x02	; 2
 4ac:	88 e2       	ldi	r24, 0x28	; 40
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	87 df       	rcall	.-242    	; 0x3c0 <motorControl>
 4b2:	51 2c       	mov	r5, r1
 4b4:	01 e9       	ldi	r16, 0x91	; 145
 4b6:	10 e0       	ldi	r17, 0x00	; 0
	OR_Count=0;
	RL_Count=0;
	OI_Count=0;
	EX_Count=0;
	OIRL_Count=0;
	falseInductFlag=0;
 4b8:	aa 24       	eor	r10, r10
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
 4ba:	a3 94       	inc	r10
 4bc:	b1 2c       	mov	r11, r1
				falseInductFlag=0x00; //reset flag
				inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
 4be:	0f 2e       	mov	r0, r31
 4c0:	f4 e9       	ldi	r31, 0x94	; 148
 4c2:	cf 2e       	mov	r12, r31
	while(1){
		if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				falseInductFlag=0x01;
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
				TCNT3=0x00; //set timer equal to zero
 4c4:	d1 2c       	mov	r13, r1
 4c6:	f0 2d       	mov	r31, r0
 4c8:	44 24       	eor	r4, r4
 4ca:	43 94       	inc	r4
 4cc:	0f 2e       	mov	r0, r31
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				falseInductFlag=0x01;
 4ce:	f2 e3       	ldi	r31, 0x32	; 50
 4d0:	8f 2e       	mov	r8, r31
				if(!tempFerrous)typeArray[RL_Count]=100;//object is white
				else typeArray[RL_Count]=50;//object is steel when it is dark
			}
			else{//object is non-reflective
				if(!tempFerrous) typeArray[RL_Count]=0;//object is black plastic when no ferrous material exists
				else typeArray[RL_Count]=50;//object is steel when it is dark			 
 4d2:	91 2c       	mov	r9, r1
 4d4:	f0 2d       	mov	r31, r0
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f4 e6       	ldi	r31, 0x64	; 100
 4da:	6f 2e       	mov	r6, r31
			inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
			//sorting objects by reflectivity; using inductive on black and white plastics
			if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
			else if(ADCAverage<850)typeArray[RL_Count]=50;//object is steel
			else if(ADCAverage<955){
				if(!tempFerrous)typeArray[RL_Count]=100;//object is white
 4dc:	71 2c       	mov	r7, r1
 4de:	f0 2d       	mov	r31, r0
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f6 e9       	ldi	r31, 0x96	; 150
 4e4:	ef 2e       	mov	r14, r31
			//PORTD&=0x0F;
			//PORTD|=((lowADC&0x0300)>>3);
			tempFerrous=inductiveArray[RL_Count]; //store whether object was ferrous or non-ferrous
			inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
			//sorting objects by reflectivity; using inductive on black and white plastics
			if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
 4e6:	f1 2c       	mov	r15, r1
 4e8:	f0 2d       	mov	r31, r0
 4ea:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <inductiveFlag>
 4ee:	88 23       	and	r24, r24
	PORTC=0b00001111;
	mTimer2(2000);
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
 4f0:	29 f1       	breq	.+74     	; 0x53c <main+0x130>
 4f2:	51 10       	cpse	r5, r1
 4f4:	0d c0       	rjmp	.+26     	; 0x510 <main+0x104>
 4f6:	f8 01       	movw	r30, r16
			if (falseInductFlag==0x00){
 4f8:	80 81       	ld	r24, Z
 4fa:	81 60       	ori	r24, 0x01	; 1
				falseInductFlag=0x01;
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
 4fc:	80 83       	st	Z, r24
 4fe:	f6 01       	movw	r30, r12
 500:	11 82       	std	Z+1, r1	; 0x01
 502:	10 82       	st	Z, r1
				TCNT3=0x00; //set timer equal to zero
 504:	c0 9b       	sbis	0x18, 0	; 24
 506:	03 c0       	rjmp	.+6      	; 0x50e <main+0x102>
 508:	c0 9a       	sbi	0x18, 0	; 24
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
 50a:	54 2c       	mov	r5, r4
 50c:	01 c0       	rjmp	.+2      	; 0x510 <main+0x104>
 50e:	54 2c       	mov	r5, r4
	stepperHome(&stepperPosition,&stepperIteration); //home stepper
	motorControl(CONVEYOR_SPEED,DC_FORWARD);//conveyor forward (counter-clock-wise)
	while(1){
		if (inductiveFlag){ //triggered on a falling edge when a ferrous material is in front of inductive sensor
			if (falseInductFlag==0x00){
				falseInductFlag=0x01;
 510:	c0 9b       	sbis	0x18, 0	; 24
 512:	14 c0       	rjmp	.+40     	; 0x53c <main+0x130>
 514:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <inductiveFlag>
				TCCR3B |= _BV(CS30); //clock pre-scalar (clk/1); initialize clock counting
				TCNT3=0x00; //set timer equal to zero
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
 518:	f8 01       	movw	r30, r16
				inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
 51a:	80 81       	ld	r24, Z
 51c:	88 7f       	andi	r24, 0xF8	; 248
				TCCR3B&=0b11111000; //disable timer 3
 51e:	80 83       	st	Z, r24
 520:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <OI_Count>
 524:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <OI_Count+0x1>
				falseInductFlag=0x00; //reset flag
				inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	ef 73       	andi	r30, 0x3F	; 63
 52c:	ff 27       	eor	r31, r31
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	e9 56       	subi	r30, 0x69	; 105
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	b1 82       	std	Z+1, r11	; 0x01
 538:	a0 82       	st	Z, r10
 53a:	51 2c       	mov	r5, r1
 53c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <ADCResultFlag>
				if ((TIFR3 & 0x01) == 0x01)TIFR3|=0x01; //if TOV3 flag is set to 1, reset to 0 by setting bit to 1 (confused?)
			} //because of the closeness of interrupts OI and IN sensor, reliance on OI_Count w.r.t. inductive, delay given
			if ((TIFR3 & 0x01) == 0x01){ //if counter has overflowed ~>8ms; time to allow OI_Count to change
				inductiveFlag=0; //reset flag; allow flag to reset again after 8ms
				TCCR3B&=0b11111000; //disable timer 3
				falseInductFlag=0x00; //reset flag
 540:	88 23       	and	r24, r24
				inductiveArray[(OI_Count-1)%64]=0x01; //set the actual current object to inductive=1; modulus of 64
			}
		} 
		if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
 542:	09 f4       	brne	.+2      	; 0x546 <main+0x13a>
 544:	c0 c0       	rjmp	.+384    	; 0x6c6 <main+0x2ba>
 546:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ADCResultFlag>
 54a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <ADCAverage+0x1>
			ADCResultFlag=0; //reset flag
 54e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ADCAverage>
			ADCAverage=0;
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <ADCFilterCount>
 55a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <ADCFilterCount+0x1>
			for(i=0;i<8;i++){
				ADCAverage+=lowADCArray[ADCFilterCount];
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	e5 5e       	subi	r30, 0xE5	; 229
 564:	fd 4f       	sbci	r31, 0xFD	; 253
 566:	40 81       	ld	r20, Z
 568:	51 81       	ldd	r21, Z+1	; 0x01
 56a:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <ADCAverage>
 56e:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <ADCAverage+0x1>
 572:	24 0f       	add	r18, r20
 574:	35 1f       	adc	r19, r21
 576:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <ADCAverage+0x1>
 57a:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <ADCAverage>
 57e:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <ADCFilterCount>
 582:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <ADCFilterCount+0x1>
				ADCFilterCount++;
 586:	2f 5f       	subi	r18, 0xFF	; 255
 588:	3f 4f       	sbci	r19, 0xFF	; 255
 58a:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <ADCFilterCount+0x1>
 58e:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <ADCFilterCount>
 592:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <ADCFilterCount>
 596:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <ADCFilterCount+0x1>
				ADCFilterCount&=0b00000111; //modulus of 8 with positive incrementing variables
 59a:	27 70       	andi	r18, 0x07	; 7
 59c:	33 27       	eor	r19, r19
 59e:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <ADCFilterCount+0x1>
 5a2:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <ADCFilterCount>
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	b1 f6       	brne	.-84     	; 0x556 <main+0x14a>
 5aa:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <ADCAverage>
			}
		} 
		if(ADCResultFlag){ //If the minimum reflectivity has been reached for an object
			ADCResultFlag=0; //reset flag
			ADCAverage=0;
			for(i=0;i<8;i++){
 5ae:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <ADCAverage+0x1>
				ADCAverage+=lowADCArray[ADCFilterCount];
				ADCFilterCount++;
				ADCFilterCount&=0b00000111; //modulus of 8 with positive incrementing variables
			}
			ADCAverage>>=3; //division by 8 with chopping arithmetic
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <ADCAverage+0x1>
 5c2:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <ADCAverage>
 5c6:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 5ca:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
			//PORTD&=0x0F;
			//PORTD|=((ADCAverage&0x0300)>>3);
			//PORTC=lowADC;
			//PORTD&=0x0F;
			//PORTD|=((lowADC&0x0300)>>3);
			tempFerrous=inductiveArray[RL_Count]; //store whether object was ferrous or non-ferrous
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	e9 56       	subi	r30, 0x69	; 105
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	80 81       	ld	r24, Z
 5d8:	91 81       	ldd	r25, Z+1	; 0x01
 5da:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 5de:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
			inductiveArray[RL_Count]=0x00; //reset inductive array to zero; otherwise, array will produce errors if more than 64 objects are sorted
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	e9 56       	subi	r30, 0x69	; 105
 5e8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ea:	11 82       	std	Z+1, r1	; 0x01
 5ec:	10 82       	st	Z, r1
 5ee:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <ADCAverage>
 5f2:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <ADCAverage+0x1>
			//sorting objects by reflectivity; using inductive on black and white plastics
			if (ADCAverage<300)typeArray[RL_Count]=150;//object is aluminum
 5f6:	2c 32       	cpi	r18, 0x2C	; 44
 5f8:	31 40       	sbci	r19, 0x01	; 1
 5fa:	58 f4       	brcc	.+22     	; 0x612 <main+0x206>
 5fc:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 600:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	e3 5f       	subi	r30, 0xF3	; 243
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	f1 82       	std	Z+1, r15	; 0x01
 60e:	e0 82       	st	Z, r14
 610:	48 c0       	rjmp	.+144    	; 0x6a2 <main+0x296>
 612:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <ADCAverage>
 616:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <ADCAverage+0x1>
			else if(ADCAverage<850)typeArray[RL_Count]=50;//object is steel
 61a:	22 35       	cpi	r18, 0x52	; 82
 61c:	33 40       	sbci	r19, 0x03	; 3
 61e:	58 f4       	brcc	.+22     	; 0x636 <main+0x22a>
 620:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 624:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	e3 5f       	subi	r30, 0xF3	; 243
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	91 82       	std	Z+1, r9	; 0x01
 632:	80 82       	st	Z, r8
 634:	36 c0       	rjmp	.+108    	; 0x6a2 <main+0x296>
 636:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <ADCAverage>
 63a:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <ADCAverage+0x1>
			else if(ADCAverage<955){
 63e:	2b 3b       	cpi	r18, 0xBB	; 187
 640:	33 40       	sbci	r19, 0x03	; 3
 642:	c0 f4       	brcc	.+48     	; 0x674 <main+0x268>
 644:	81 11       	cpse	r24, r1
 646:	0b c0       	rjmp	.+22     	; 0x65e <main+0x252>
 648:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
				if(!tempFerrous)typeArray[RL_Count]=100;//object is white
 64c:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	e3 5f       	subi	r30, 0xF3	; 243
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	71 82       	std	Z+1, r7	; 0x01
 65a:	60 82       	st	Z, r6
 65c:	22 c0       	rjmp	.+68     	; 0x6a2 <main+0x296>
 65e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 662:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
				else typeArray[RL_Count]=50;//object is steel when it is dark
 666:	ee 0f       	add	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	e3 5f       	subi	r30, 0xF3	; 243
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
 66e:	91 82       	std	Z+1, r9	; 0x01
 670:	80 82       	st	Z, r8
 672:	17 c0       	rjmp	.+46     	; 0x6a2 <main+0x296>
 674:	81 11       	cpse	r24, r1
 676:	0b c0       	rjmp	.+22     	; 0x68e <main+0x282>
 678:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
			}
			else{//object is non-reflective
				if(!tempFerrous) typeArray[RL_Count]=0;//object is black plastic when no ferrous material exists
 67c:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	e3 5f       	subi	r30, 0xF3	; 243
 686:	fe 4f       	sbci	r31, 0xFE	; 254
 688:	11 82       	std	Z+1, r1	; 0x01
 68a:	10 82       	st	Z, r1
 68c:	0a c0       	rjmp	.+20     	; 0x6a2 <main+0x296>
 68e:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RL_Count>
 692:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <RL_Count+0x1>
				else typeArray[RL_Count]=50;//object is steel when it is dark			 
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	e3 5f       	subi	r30, 0xF3	; 243
 69c:	fe 4f       	sbci	r31, 0xFE	; 254
 69e:	91 82       	std	Z+1, r9	; 0x01
 6a0:	80 82       	st	Z, r8
 6a2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <RL_Count>
 6a6:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <RL_Count+0x1>
			}
			RL_Count++;//add one to amount of objects that have had their reflectivity's measured
 6aa:	01 96       	adiw	r24, 0x01	; 1
 6ac:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <RL_Count+0x1>
 6b0:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <RL_Count>
 6b4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <OIRL_Count>
 6b8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <OIRL_Count+0x1>
			RLEX_Count+=1;
			OIRL_Count-=1;			
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <OIRL_Count+0x1>
 6c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <OIRL_Count>
 6c6:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <optExitFlag>
 6ca:	88 23       	and	r24, r24
			//ADCCompleteFlag=0x01; //set flag to tell system there is no ADC conversions occurring
		}
		if(optExitFlag){ //object has hit sensor at end of conveyor
 6cc:	b1 f1       	breq	.+108    	; 0x73a <main+0x32e>
 6ce:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <EX_Count>
 6d2:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <EX_Count+0x1>
			//mTimer2(1000);
			//PORTC = OI_Count;
			//mTimer2(500);
			//PORTC = RL_Count;
			//mTimer2(500);
			tempType=typeArray[EX_Count];
 6d6:	ee 0f       	add	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	e3 5f       	subi	r30, 0xF3	; 243
 6dc:	fe 4f       	sbci	r31, 0xFE	; 254
 6de:	20 81       	ld	r18, Z
 6e0:	31 81       	ldd	r19, Z+1	; 0x01
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	82 1b       	sub	r24, r18
			stepperMovement=stepperPosition-tempType;
 6e8:	93 0b       	sbc	r25, r19
 6ea:	e1 f0       	breq	.+56     	; 0x724 <main+0x318>
 6ec:	25 b1       	in	r18, 0x05	; 5
 6ee:	20 7f       	andi	r18, 0xF0	; 240
			//PORTC=typeArray[EX_Count];
			//PORTC=stepperMovement;
			if (stepperMovement){//if object type doesn't match stepper location; stop motor, move stepper, start motor
 6f0:	25 b9       	out	0x05, r18	; 5
				//PORTC=0b00111100;
				PORTB &=0xF0; //Apply Vcc brake to motor
 6f2:	9c 01       	movw	r18, r24
 6f4:	99 23       	and	r25, r25
 6f6:	24 f4       	brge	.+8      	; 0x700 <main+0x2f4>
				//stepper rotation logic; value of steps to rotate stepper is kept between 1:100)
				
				if (abs(stepperMovement)>100){
 6f8:	22 27       	eor	r18, r18
 6fa:	33 27       	eor	r19, r19
 6fc:	28 1b       	sub	r18, r24
 6fe:	39 0b       	sbc	r19, r25
 700:	25 36       	cpi	r18, 0x65	; 101
 702:	31 05       	cpc	r19, r1
 704:	3c f0       	brlt	.+14     	; 0x714 <main+0x308>
 706:	99 23       	and	r25, r25
 708:	1c f4       	brge	.+6      	; 0x710 <main+0x304>
 70a:	88 53       	subi	r24, 0x38	; 56
					if (stepperMovement<0) stepperMovement+=200;
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	02 c0       	rjmp	.+4      	; 0x714 <main+0x308>
 710:	88 5c       	subi	r24, 0xC8	; 200
 712:	91 09       	sbc	r25, r1
					else stepperMovement-=200;
 714:	ae 01       	movw	r20, r28
 716:	4d 5f       	subi	r20, 0xFD	; 253
				}
				//if(stepperMovement==-150)stepperMovement=50;
				//if(stepperMovement==150)stepperMovement=-50;
				stepperControl(stepperMovement, &stepperPosition, &stepperIteration);//rotate stepper to proper location
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	be 01       	movw	r22, r28
 71c:	6f 5f       	subi	r22, 0xFF	; 255
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	00 dd       	rcall	.-1536   	; 0x122 <stepperControl>
 722:	2a 9a       	sbi	0x05, 2	; 5
 724:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <EX_Count>
				PORTB |=0b00000100; //start motor forwards
 728:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <EX_Count+0x1>
			if (tempType==0)BL_Count += 0x01;
			else if (tempType==50)ST_Count += 0x01;
			else if (tempType==100)WH_Count += 0x01;
			else if (tempType==150)AL_Count += 0x01;
			RLEX_Count-=1;
			EX_Count++;
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <EX_Count+0x1>
 732:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <EX_Count>
 736:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <optExitFlag>
 73a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <OIRL_Count>
			optExitFlag=0; //reset flag
 73e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <OIRL_Count+0x1>
		}
		if(OIRL_Count<=0)OI_Count=RL_Count; //OI optical sensor is unreliable;set equal to RL sensor count if no objects between sensors
 742:	18 16       	cp	r1, r24
 744:	19 06       	cpc	r1, r25
 746:	44 f0       	brlt	.+16     	; 0x758 <main+0x34c>
 748:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <RL_Count>
 74c:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <RL_Count+0x1>
 750:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <OI_Count+0x1>
 754:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <OI_Count>
 758:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <OI_Count>
 75c:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <OI_Count+0x1>
		}
		if (rampDownFlag){//if RAMP DOWN Button is pressed
			//
		}*/
		//efficient modulus for counters; forces them to stay within 0->63 as struct array only has 64 places
		OI_Count &= 0b00111111;//modulus of 64
 760:	8f 73       	andi	r24, 0x3F	; 63
 762:	99 27       	eor	r25, r25
 764:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <OI_Count+0x1>
 768:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <OI_Count>
 76c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <RL_Count>
 770:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <RL_Count+0x1>
		RL_Count &= 0b00111111;
 774:	8f 73       	andi	r24, 0x3F	; 63
 776:	99 27       	eor	r25, r25
 778:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <RL_Count+0x1>
 77c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <RL_Count>
 780:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <OR_Count>
 784:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <OR_Count+0x1>
		OR_Count &= 0b00111111;
 788:	8f 73       	andi	r24, 0x3F	; 63
 78a:	99 27       	eor	r25, r25
 78c:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <OR_Count+0x1>
 790:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <OR_Count>
 794:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <EX_Count>
 798:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <EX_Count+0x1>
		EX_Count &= 0b00111111;
 79c:	8f 73       	andi	r24, 0x3F	; 63
 79e:	99 27       	eor	r25, r25
 7a0:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <EX_Count+0x1>
 7a4:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <EX_Count>
 7a8:	a0 ce       	rjmp	.-704    	; 0x4ea <main+0xde>

000007aa <__vector_1>:
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
	}
 7ae:	0f b6       	in	r0, 0x3f	; 63
	OCR0A = dutyCycle;//set duty cycle
}

/**********INTERRUPT SERVICE ROUTINES**********/

ISR(INT0_vect){ // on PD0; taken for LCD Screen
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
}
 7b4:	0f 90       	pop	r0
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	0f 90       	pop	r0
 7ba:	1f 90       	pop	r1
 7bc:	18 95       	reti

000007be <__vector_2>:
ISR(INT1_vect){ // on PD1; taken for LCD Screen
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
}
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <__vector_3>:
/*sensor 1: OI: 1st Optical-Inductive-Near Inductive sensor*/
ISR(INT2_vect){ // on PD2; active low; triggered on rising-edge
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	8f 93       	push	r24
 7de:	9f 93       	push	r25
	OI_Count+=1;
 7e0:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <OI_Count>
 7e4:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <OI_Count+0x1>
 7e8:	01 96       	adiw	r24, 0x01	; 1
 7ea:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <OI_Count+0x1>
 7ee:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <OI_Count>
	OIRL_Count+=1;
 7f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <OIRL_Count>
 7f6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <OIRL_Count+0x1>
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <OIRL_Count+0x1>
 800:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <OIRL_Count>
}
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	0f 90       	pop	r0
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <__vector_4>:
/*sensor 2: IN: Inductive sensor*/
ISR(INT3_vect){ //on PD3; active low; triggered on falling-edge
 812:	1f 92       	push	r1
 814:	0f 92       	push	r0
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	0f 92       	push	r0
 81a:	11 24       	eor	r1, r1
 81c:	8f 93       	push	r24
	inductiveFlag=0x01;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <inductiveFlag>
}
 824:	8f 91       	pop	r24
 826:	0f 90       	pop	r0
 828:	0f be       	out	0x3f, r0	; 63
 82a:	0f 90       	pop	r0
 82c:	1f 90       	pop	r1
 82e:	18 95       	reti

00000830 <__vector_7>:
/*sensor 3: OR: 2nd Optical-Reflective-Near Reflective sensor*/
ISR(INT6_vect){ // on PD6; active high; triggered on rising-edge
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	0b b6       	in	r0, 0x3b	; 59
 83c:	0f 92       	push	r0
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	lowADC=0xFFFF;
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	9f ef       	ldi	r25, 0xFF	; 255
 84a:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <lowADC+0x1>
 84e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <lowADC>
	ADCSRA|= _BV(ADSC); //trigger ADC (i.e. begin ADC conversion)
 852:	ea e7       	ldi	r30, 0x7A	; 122
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	80 64       	ori	r24, 0x40	; 64
 85a:	80 83       	st	Z, r24
	//OR_Count+=1;	
	//ADCCompleteFlag=0x00; // tell system ADC conversions are occurring
}
 85c:	ff 91       	pop	r31
 85e:	ef 91       	pop	r30
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	0f 90       	pop	r0
 866:	0b be       	out	0x3b, r0	; 59
 868:	0f 90       	pop	r0
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	0f 90       	pop	r0
 86e:	1f 90       	pop	r1
 870:	18 95       	reti

00000872 <__vector_8>:
/*sensor 5: EX: 3rd Optical-Near exit of conveyor*/
ISR(INT7_vect){ //on PE7; active low; triggered on falling-edge
 872:	1f 92       	push	r1
 874:	0f 92       	push	r0
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	0f 92       	push	r0
 87a:	11 24       	eor	r1, r1
 87c:	8f 93       	push	r24
	optExitFlag=0x01;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <optExitFlag>
}
 884:	8f 91       	pop	r24
 886:	0f 90       	pop	r0
 888:	0f be       	out	0x3f, r0	; 63
 88a:	0f 90       	pop	r0
 88c:	1f 90       	pop	r1
 88e:	18 95       	reti

00000890 <__vector_29>:
/*ADC ISR: triggered when ADC is completed*/
ISR(ADC_vect){
 890:	1f 92       	push	r1
 892:	0f 92       	push	r0
 894:	0f b6       	in	r0, 0x3f	; 63
 896:	0f 92       	push	r0
 898:	11 24       	eor	r1, r1
 89a:	0b b6       	in	r0, 0x3b	; 59
 89c:	0f 92       	push	r0
 89e:	2f 93       	push	r18
 8a0:	3f 93       	push	r19
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	ef 93       	push	r30
 8a8:	ff 93       	push	r31
	if (lowADC>ADC){ //if ADC result is still decreasing (i.e. if object's reflectivity is increasing)
 8aa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8ae:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8b2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <lowADC>
 8b6:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <lowADC+0x1>
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	48 f5       	brcc	.+82     	; 0x912 <__vector_29+0x82>
		lowADC=ADC; //ADC holds the entire 10 bit value in a 16bit variable; lowADC set for future comparison
 8c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 8c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 8c8:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <lowADC+0x1>
 8cc:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <lowADC>
		lowADCArray[ADCFilterCount]=lowADC;
 8d0:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <ADCFilterCount>
 8d4:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <ADCFilterCount+0x1>
 8d8:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <lowADC>
 8dc:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <lowADC+0x1>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	e5 5e       	subi	r30, 0xE5	; 229
 8e6:	fd 4f       	sbci	r31, 0xFD	; 253
 8e8:	91 83       	std	Z+1, r25	; 0x01
 8ea:	80 83       	st	Z, r24
		ADCFilterCount++; //increment array location being set
 8ec:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ADCFilterCount>
 8f0:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ADCFilterCount+0x1>
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ADCFilterCount+0x1>
 8fa:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ADCFilterCount>
		ADCFilterCount&=0b00000111; //modulus of 8
 8fe:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ADCFilterCount>
 902:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ADCFilterCount+0x1>
 906:	87 70       	andi	r24, 0x07	; 7
 908:	99 27       	eor	r25, r25
 90a:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ADCFilterCount+0x1>
 90e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ADCFilterCount>
		//highByteADC=ADCH;
		//lowByteADC=ADCL;
	}
	if (PINE&0b00010000) ADCSRA|= _BV(ADSC); //if there is still an object keep initializing ADC conversions
 912:	64 9b       	sbis	0x0c, 4	; 12
 914:	06 c0       	rjmp	.+12     	; 0x922 <__vector_29+0x92>
 916:	ea e7       	ldi	r30, 0x7A	; 122
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	80 64       	ori	r24, 0x40	; 64
 91e:	80 83       	st	Z, r24
 920:	03 c0       	rjmp	.+6      	; 0x928 <__vector_29+0x98>
	//if (ADC<(lowADC+40)) ADCSRA|= _BV(ADSC); //if there is still an object keep initializing ADC conversions
	else ADCResultFlag = 1;
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <ADCResultFlag>
}
 928:	ff 91       	pop	r31
 92a:	ef 91       	pop	r30
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0b be       	out	0x3b, r0	; 59
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <__fixunssfsi>:
 942:	70 d0       	rcall	.+224    	; 0xa24 <__fp_splitA>
 944:	88 f0       	brcs	.+34     	; 0x968 <__fixunssfsi+0x26>
 946:	9f 57       	subi	r25, 0x7F	; 127
 948:	90 f0       	brcs	.+36     	; 0x96e <__fixunssfsi+0x2c>
 94a:	b9 2f       	mov	r27, r25
 94c:	99 27       	eor	r25, r25
 94e:	b7 51       	subi	r27, 0x17	; 23
 950:	a0 f0       	brcs	.+40     	; 0x97a <__fixunssfsi+0x38>
 952:	d1 f0       	breq	.+52     	; 0x988 <__fixunssfsi+0x46>
 954:	66 0f       	add	r22, r22
 956:	77 1f       	adc	r23, r23
 958:	88 1f       	adc	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	1a f0       	brmi	.+6      	; 0x964 <__fixunssfsi+0x22>
 95e:	ba 95       	dec	r27
 960:	c9 f7       	brne	.-14     	; 0x954 <__fixunssfsi+0x12>
 962:	12 c0       	rjmp	.+36     	; 0x988 <__fixunssfsi+0x46>
 964:	b1 30       	cpi	r27, 0x01	; 1
 966:	81 f0       	breq	.+32     	; 0x988 <__fixunssfsi+0x46>
 968:	77 d0       	rcall	.+238    	; 0xa58 <__fp_zero>
 96a:	b1 e0       	ldi	r27, 0x01	; 1
 96c:	08 95       	ret
 96e:	74 c0       	rjmp	.+232    	; 0xa58 <__fp_zero>
 970:	67 2f       	mov	r22, r23
 972:	78 2f       	mov	r23, r24
 974:	88 27       	eor	r24, r24
 976:	b8 5f       	subi	r27, 0xF8	; 248
 978:	39 f0       	breq	.+14     	; 0x988 <__fixunssfsi+0x46>
 97a:	b9 3f       	cpi	r27, 0xF9	; 249
 97c:	cc f3       	brlt	.-14     	; 0x970 <__fixunssfsi+0x2e>
 97e:	86 95       	lsr	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b3 95       	inc	r27
 986:	d9 f7       	brne	.-10     	; 0x97e <__fixunssfsi+0x3c>
 988:	3e f4       	brtc	.+14     	; 0x998 <__fixunssfsi+0x56>
 98a:	90 95       	com	r25
 98c:	80 95       	com	r24
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__floatunsisf>:
 99a:	e8 94       	clt
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__floatsisf+0x12>

0000099e <__floatsisf>:
 99e:	97 fb       	bst	r25, 7
 9a0:	3e f4       	brtc	.+14     	; 0x9b0 <__floatsisf+0x12>
 9a2:	90 95       	com	r25
 9a4:	80 95       	com	r24
 9a6:	70 95       	com	r23
 9a8:	61 95       	neg	r22
 9aa:	7f 4f       	sbci	r23, 0xFF	; 255
 9ac:	8f 4f       	sbci	r24, 0xFF	; 255
 9ae:	9f 4f       	sbci	r25, 0xFF	; 255
 9b0:	99 23       	and	r25, r25
 9b2:	a9 f0       	breq	.+42     	; 0x9de <__floatsisf+0x40>
 9b4:	f9 2f       	mov	r31, r25
 9b6:	96 e9       	ldi	r25, 0x96	; 150
 9b8:	bb 27       	eor	r27, r27
 9ba:	93 95       	inc	r25
 9bc:	f6 95       	lsr	r31
 9be:	87 95       	ror	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b7 95       	ror	r27
 9c6:	f1 11       	cpse	r31, r1
 9c8:	f8 cf       	rjmp	.-16     	; 0x9ba <__floatsisf+0x1c>
 9ca:	fa f4       	brpl	.+62     	; 0xa0a <__floatsisf+0x6c>
 9cc:	bb 0f       	add	r27, r27
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__floatsisf+0x36>
 9d0:	60 ff       	sbrs	r22, 0
 9d2:	1b c0       	rjmp	.+54     	; 0xa0a <__floatsisf+0x6c>
 9d4:	6f 5f       	subi	r22, 0xFF	; 255
 9d6:	7f 4f       	sbci	r23, 0xFF	; 255
 9d8:	8f 4f       	sbci	r24, 0xFF	; 255
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	16 c0       	rjmp	.+44     	; 0xa0a <__floatsisf+0x6c>
 9de:	88 23       	and	r24, r24
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <__floatsisf+0x48>
 9e2:	96 e9       	ldi	r25, 0x96	; 150
 9e4:	11 c0       	rjmp	.+34     	; 0xa08 <__floatsisf+0x6a>
 9e6:	77 23       	and	r23, r23
 9e8:	21 f0       	breq	.+8      	; 0x9f2 <__floatsisf+0x54>
 9ea:	9e e8       	ldi	r25, 0x8E	; 142
 9ec:	87 2f       	mov	r24, r23
 9ee:	76 2f       	mov	r23, r22
 9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__floatsisf+0x5e>
 9f2:	66 23       	and	r22, r22
 9f4:	71 f0       	breq	.+28     	; 0xa12 <__floatsisf+0x74>
 9f6:	96 e8       	ldi	r25, 0x86	; 134
 9f8:	86 2f       	mov	r24, r22
 9fa:	70 e0       	ldi	r23, 0x00	; 0
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	2a f0       	brmi	.+10     	; 0xa0a <__floatsisf+0x6c>
 a00:	9a 95       	dec	r25
 a02:	66 0f       	add	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	da f7       	brpl	.-10     	; 0xa00 <__floatsisf+0x62>
 a0a:	88 0f       	add	r24, r24
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	97 f9       	bld	r25, 7
 a12:	08 95       	ret

00000a14 <__fp_split3>:
 a14:	57 fd       	sbrc	r21, 7
 a16:	90 58       	subi	r25, 0x80	; 128
 a18:	44 0f       	add	r20, r20
 a1a:	55 1f       	adc	r21, r21
 a1c:	59 f0       	breq	.+22     	; 0xa34 <__fp_splitA+0x10>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	71 f0       	breq	.+28     	; 0xa3e <__fp_splitA+0x1a>
 a22:	47 95       	ror	r20

00000a24 <__fp_splitA>:
 a24:	88 0f       	add	r24, r24
 a26:	97 fb       	bst	r25, 7
 a28:	99 1f       	adc	r25, r25
 a2a:	61 f0       	breq	.+24     	; 0xa44 <__fp_splitA+0x20>
 a2c:	9f 3f       	cpi	r25, 0xFF	; 255
 a2e:	79 f0       	breq	.+30     	; 0xa4e <__fp_splitA+0x2a>
 a30:	87 95       	ror	r24
 a32:	08 95       	ret
 a34:	12 16       	cp	r1, r18
 a36:	13 06       	cpc	r1, r19
 a38:	14 06       	cpc	r1, r20
 a3a:	55 1f       	adc	r21, r21
 a3c:	f2 cf       	rjmp	.-28     	; 0xa22 <__fp_split3+0xe>
 a3e:	46 95       	lsr	r20
 a40:	f1 df       	rcall	.-30     	; 0xa24 <__fp_splitA>
 a42:	08 c0       	rjmp	.+16     	; 0xa54 <__fp_splitA+0x30>
 a44:	16 16       	cp	r1, r22
 a46:	17 06       	cpc	r1, r23
 a48:	18 06       	cpc	r1, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	f1 cf       	rjmp	.-30     	; 0xa30 <__fp_splitA+0xc>
 a4e:	86 95       	lsr	r24
 a50:	71 05       	cpc	r23, r1
 a52:	61 05       	cpc	r22, r1
 a54:	08 94       	sec
 a56:	08 95       	ret

00000a58 <__fp_zero>:
 a58:	e8 94       	clt

00000a5a <__fp_szero>:
 a5a:	bb 27       	eor	r27, r27
 a5c:	66 27       	eor	r22, r22
 a5e:	77 27       	eor	r23, r23
 a60:	cb 01       	movw	r24, r22
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret

00000a66 <__mulsf3>:
 a66:	0b d0       	rcall	.+22     	; 0xa7e <__mulsf3x>
 a68:	78 c0       	rjmp	.+240    	; 0xb5a <__fp_round>
 a6a:	69 d0       	rcall	.+210    	; 0xb3e <__fp_pscA>
 a6c:	28 f0       	brcs	.+10     	; 0xa78 <__mulsf3+0x12>
 a6e:	6e d0       	rcall	.+220    	; 0xb4c <__fp_pscB>
 a70:	18 f0       	brcs	.+6      	; 0xa78 <__mulsf3+0x12>
 a72:	95 23       	and	r25, r21
 a74:	09 f0       	breq	.+2      	; 0xa78 <__mulsf3+0x12>
 a76:	5a c0       	rjmp	.+180    	; 0xb2c <__fp_inf>
 a78:	5f c0       	rjmp	.+190    	; 0xb38 <__fp_nan>
 a7a:	11 24       	eor	r1, r1
 a7c:	ee cf       	rjmp	.-36     	; 0xa5a <__fp_szero>

00000a7e <__mulsf3x>:
 a7e:	ca df       	rcall	.-108    	; 0xa14 <__fp_split3>
 a80:	a0 f3       	brcs	.-24     	; 0xa6a <__mulsf3+0x4>

00000a82 <__mulsf3_pse>:
 a82:	95 9f       	mul	r25, r21
 a84:	d1 f3       	breq	.-12     	; 0xa7a <__mulsf3+0x14>
 a86:	95 0f       	add	r25, r21
 a88:	50 e0       	ldi	r21, 0x00	; 0
 a8a:	55 1f       	adc	r21, r21
 a8c:	62 9f       	mul	r22, r18
 a8e:	f0 01       	movw	r30, r0
 a90:	72 9f       	mul	r23, r18
 a92:	bb 27       	eor	r27, r27
 a94:	f0 0d       	add	r31, r0
 a96:	b1 1d       	adc	r27, r1
 a98:	63 9f       	mul	r22, r19
 a9a:	aa 27       	eor	r26, r26
 a9c:	f0 0d       	add	r31, r0
 a9e:	b1 1d       	adc	r27, r1
 aa0:	aa 1f       	adc	r26, r26
 aa2:	64 9f       	mul	r22, r20
 aa4:	66 27       	eor	r22, r22
 aa6:	b0 0d       	add	r27, r0
 aa8:	a1 1d       	adc	r26, r1
 aaa:	66 1f       	adc	r22, r22
 aac:	82 9f       	mul	r24, r18
 aae:	22 27       	eor	r18, r18
 ab0:	b0 0d       	add	r27, r0
 ab2:	a1 1d       	adc	r26, r1
 ab4:	62 1f       	adc	r22, r18
 ab6:	73 9f       	mul	r23, r19
 ab8:	b0 0d       	add	r27, r0
 aba:	a1 1d       	adc	r26, r1
 abc:	62 1f       	adc	r22, r18
 abe:	83 9f       	mul	r24, r19
 ac0:	a0 0d       	add	r26, r0
 ac2:	61 1d       	adc	r22, r1
 ac4:	22 1f       	adc	r18, r18
 ac6:	74 9f       	mul	r23, r20
 ac8:	33 27       	eor	r19, r19
 aca:	a0 0d       	add	r26, r0
 acc:	61 1d       	adc	r22, r1
 ace:	23 1f       	adc	r18, r19
 ad0:	84 9f       	mul	r24, r20
 ad2:	60 0d       	add	r22, r0
 ad4:	21 1d       	adc	r18, r1
 ad6:	82 2f       	mov	r24, r18
 ad8:	76 2f       	mov	r23, r22
 ada:	6a 2f       	mov	r22, r26
 adc:	11 24       	eor	r1, r1
 ade:	9f 57       	subi	r25, 0x7F	; 127
 ae0:	50 40       	sbci	r21, 0x00	; 0
 ae2:	8a f0       	brmi	.+34     	; 0xb06 <__mulsf3_pse+0x84>
 ae4:	e1 f0       	breq	.+56     	; 0xb1e <__mulsf3_pse+0x9c>
 ae6:	88 23       	and	r24, r24
 ae8:	4a f0       	brmi	.+18     	; 0xafc <__mulsf3_pse+0x7a>
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	bb 1f       	adc	r27, r27
 af0:	66 1f       	adc	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	91 50       	subi	r25, 0x01	; 1
 af8:	50 40       	sbci	r21, 0x00	; 0
 afa:	a9 f7       	brne	.-22     	; 0xae6 <__mulsf3_pse+0x64>
 afc:	9e 3f       	cpi	r25, 0xFE	; 254
 afe:	51 05       	cpc	r21, r1
 b00:	70 f0       	brcs	.+28     	; 0xb1e <__mulsf3_pse+0x9c>
 b02:	14 c0       	rjmp	.+40     	; 0xb2c <__fp_inf>
 b04:	aa cf       	rjmp	.-172    	; 0xa5a <__fp_szero>
 b06:	5f 3f       	cpi	r21, 0xFF	; 255
 b08:	ec f3       	brlt	.-6      	; 0xb04 <__mulsf3_pse+0x82>
 b0a:	98 3e       	cpi	r25, 0xE8	; 232
 b0c:	dc f3       	brlt	.-10     	; 0xb04 <__mulsf3_pse+0x82>
 b0e:	86 95       	lsr	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b7 95       	ror	r27
 b16:	f7 95       	ror	r31
 b18:	e7 95       	ror	r30
 b1a:	9f 5f       	subi	r25, 0xFF	; 255
 b1c:	c1 f7       	brne	.-16     	; 0xb0e <__mulsf3_pse+0x8c>
 b1e:	fe 2b       	or	r31, r30
 b20:	88 0f       	add	r24, r24
 b22:	91 1d       	adc	r25, r1
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <__fp_inf>:
 b2c:	97 f9       	bld	r25, 7
 b2e:	9f 67       	ori	r25, 0x7F	; 127
 b30:	80 e8       	ldi	r24, 0x80	; 128
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	08 95       	ret

00000b38 <__fp_nan>:
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	80 ec       	ldi	r24, 0xC0	; 192
 b3c:	08 95       	ret

00000b3e <__fp_pscA>:
 b3e:	00 24       	eor	r0, r0
 b40:	0a 94       	dec	r0
 b42:	16 16       	cp	r1, r22
 b44:	17 06       	cpc	r1, r23
 b46:	18 06       	cpc	r1, r24
 b48:	09 06       	cpc	r0, r25
 b4a:	08 95       	ret

00000b4c <__fp_pscB>:
 b4c:	00 24       	eor	r0, r0
 b4e:	0a 94       	dec	r0
 b50:	12 16       	cp	r1, r18
 b52:	13 06       	cpc	r1, r19
 b54:	14 06       	cpc	r1, r20
 b56:	05 06       	cpc	r0, r21
 b58:	08 95       	ret

00000b5a <__fp_round>:
 b5a:	09 2e       	mov	r0, r25
 b5c:	03 94       	inc	r0
 b5e:	00 0c       	add	r0, r0
 b60:	11 f4       	brne	.+4      	; 0xb66 <__fp_round+0xc>
 b62:	88 23       	and	r24, r24
 b64:	52 f0       	brmi	.+20     	; 0xb7a <__fp_round+0x20>
 b66:	bb 0f       	add	r27, r27
 b68:	40 f4       	brcc	.+16     	; 0xb7a <__fp_round+0x20>
 b6a:	bf 2b       	or	r27, r31
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__fp_round+0x18>
 b6e:	60 ff       	sbrs	r22, 0
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <__fp_round+0x20>
 b72:	6f 5f       	subi	r22, 0xFF	; 255
 b74:	7f 4f       	sbci	r23, 0xFF	; 255
 b76:	8f 4f       	sbci	r24, 0xFF	; 255
 b78:	9f 4f       	sbci	r25, 0xFF	; 255
 b7a:	08 95       	ret

00000b7c <__divmodhi4>:
 b7c:	97 fb       	bst	r25, 7
 b7e:	07 2e       	mov	r0, r23
 b80:	16 f4       	brtc	.+4      	; 0xb86 <__divmodhi4+0xa>
 b82:	00 94       	com	r0
 b84:	06 d0       	rcall	.+12     	; 0xb92 <__divmodhi4_neg1>
 b86:	77 fd       	sbrc	r23, 7
 b88:	08 d0       	rcall	.+16     	; 0xb9a <__divmodhi4_neg2>
 b8a:	0b d0       	rcall	.+22     	; 0xba2 <__udivmodhi4>
 b8c:	07 fc       	sbrc	r0, 7
 b8e:	05 d0       	rcall	.+10     	; 0xb9a <__divmodhi4_neg2>
 b90:	3e f4       	brtc	.+14     	; 0xba0 <__divmodhi4_exit>

00000b92 <__divmodhi4_neg1>:
 b92:	90 95       	com	r25
 b94:	81 95       	neg	r24
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	08 95       	ret

00000b9a <__divmodhi4_neg2>:
 b9a:	70 95       	com	r23
 b9c:	61 95       	neg	r22
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba0 <__divmodhi4_exit>:
 ba0:	08 95       	ret

00000ba2 <__udivmodhi4>:
 ba2:	aa 1b       	sub	r26, r26
 ba4:	bb 1b       	sub	r27, r27
 ba6:	51 e1       	ldi	r21, 0x11	; 17
 ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <__udivmodhi4_ep>

00000baa <__udivmodhi4_loop>:
 baa:	aa 1f       	adc	r26, r26
 bac:	bb 1f       	adc	r27, r27
 bae:	a6 17       	cp	r26, r22
 bb0:	b7 07       	cpc	r27, r23
 bb2:	10 f0       	brcs	.+4      	; 0xbb8 <__udivmodhi4_ep>
 bb4:	a6 1b       	sub	r26, r22
 bb6:	b7 0b       	sbc	r27, r23

00000bb8 <__udivmodhi4_ep>:
 bb8:	88 1f       	adc	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	5a 95       	dec	r21
 bbe:	a9 f7       	brne	.-22     	; 0xbaa <__udivmodhi4_loop>
 bc0:	80 95       	com	r24
 bc2:	90 95       	com	r25
 bc4:	bc 01       	movw	r22, r24
 bc6:	cd 01       	movw	r24, r26
 bc8:	08 95       	ret

00000bca <_exit>:
 bca:	f8 94       	cli

00000bcc <__stop_program>:
 bcc:	ff cf       	rjmp	.-2      	; 0xbcc <__stop_program>
